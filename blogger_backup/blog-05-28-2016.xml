<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="https://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0' xmlns:georss='http://www.georss.org/georss'><id>tag:blogger.com,1999:blog-5940427300271272994.archive</id><updated>2016-05-28T14:07:06.400+02:00</updated><title type='text'>Mona's learning blog</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/archive'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/archive'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/archive'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='https://www.blogger.com'>Blogger</generator><entry><id>tag:blogger.com,1999:blog-5940427300271272994.layout</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#template'/><title type='text'>Szablon: Mona's learning blog</title><content type='text'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE HTML&gt;
&lt;html b:render='false' b:version='2' class='v2' expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'&gt;
  &lt;head&gt;
    &lt;b:include data='blog' name='all-head-content'/&gt;
    &lt;title&gt;&lt;data:blog.pageTitle/&gt;&lt;/title&gt;
    &lt;meta content='!' name='fragment'/&gt;
    &lt;meta content='dynamic' name='blogger-template'/&gt;
    &lt;meta content='IE=9,chrome=1' http-equiv='X-UA-Compatible'/&gt;
    &lt;meta content='initial-scale=1.0, maximum-scale=1.0, user-scalable=no, width=device-width' name='viewport'/&gt;
    &lt;b:skin&gt;&lt;![CDATA[/*-----------------------------------------------
Blogger Template Style
Name: Dynamic Views
----------------------------------------------- */

/* Variable definitions
   ====================
   &lt;Variable name="keycolor" description="Main Color" type="color" default="#ffffff"
         variants="#2b256f,#00b2b4,#4ba976,#696f00,#b38f00,#f07300,#d0422c,#f37a86,#7b5341" value="#ffffff"/&gt;

   &lt;Group description="Page"&gt;
     &lt;Variable name="page.text.font" description="Font" type="font"
         default="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif" value="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif"/&gt;
     &lt;Variable name="page.text.color" description="Text Color" type="color"
         default="#333333" variants="#333333" value="#333333"/&gt;
     &lt;Variable name="body.background.color" description="Background Color" type="color"
         default="#EEEEEE"
         variants="#dfdfea,#d9f4f4,#e4f2eb,#e9ead9,#f4eed9,#fdead9,#f8e3e0,#fdebed,#ebe5e3" value="#EEEEEE"/&gt;
   &lt;/Group&gt;

   &lt;Variable name="body.background" description="Body Background" type="background"
       color="#EEEEEE" default="$(color) none repeat scroll top left" value="$(color) none repeat scroll top left"/&gt;

   &lt;Group description="Header"&gt;
     &lt;Variable name="header.background.color" description="Background Color" type="color"
         default="#F3F3F3" variants="#F3F3F3" value="#F3F3F3"/&gt;
   &lt;/Group&gt;

   &lt;Group description="Header Bar"&gt;
     &lt;Variable name="primary.color" description="Background Color" type="color"
         default="#333333" variants="#2b256f,#00b2b4,#4ba976,#696f00,#b38f00,#f07300,#d0422c,#f37a86,#7b5341" value="#333333"/&gt;
     &lt;Variable name="menu.font" description="Font" type="font"
         default="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif" value="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif"/&gt;
     &lt;Variable name="menu.text.color" description="Text Color" type="color"
         default="#FFFFFF" variants="#FFFFFF" value="#FFFFFF"/&gt;
   &lt;/Group&gt;

   &lt;Group description="Links"&gt;
     &lt;Variable name="link.font" description="Link Text" type="font"
         default="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif" value="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif"/&gt;
     &lt;Variable name="link.color" description="Link Color" type="color"
         default="#009EB8"
         variants="#2b256f,#00b2b4,#4ba976,#696f00,#b38f00,#f07300,#d0422c,#f37a86,#7b5341" value="#009EB8"/&gt;
     &lt;Variable name="link.hover.color" description="Link Hover Color" type="color"
         default="#009EB8"
         variants="#2b256f,#00b2b4,#4ba976,#696f00,#b38f00,#f07300,#d0422c,#f37a86,#7b5341" value="#009EB8"/&gt;
     &lt;Variable name="link.visited.color" description="Link Visited Color" type="color"
         default="#009EB8"
         variants="#2b256f,#00b2b4,#4ba976,#696f00,#b38f00,#f07300,#d0422c,#f37a86,#7b5341" value="#009EB8"/&gt;
   &lt;/Group&gt;

   &lt;Group description="Blog Title"&gt;
     &lt;Variable name="blog.title.font" description="Font" type="font"
         default="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif" value="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif"/&gt;
     &lt;Variable name="blog.title.color" description="Color" type="color"
         default="#555555" variants="#555555" value="#555555"/&gt;
   &lt;/Group&gt;

   &lt;Group description="Blog Description"&gt;
     &lt;Variable name="blog.description.font" description="Font" type="font"
         default="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif" value="italic normal 10% 'Courier New', Courier, FreeMono, monospace"/&gt;
     &lt;Variable name="blog.description.color" description="Color" type="color"
         default="#555555" variants="#555555" value="#666666"/&gt;
   &lt;/Group&gt;

   &lt;Group description="Post Title"&gt;
     &lt;Variable name="post.title.font" description="Font" type="font"
         default="'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif" value="normal normal 100% 'Helvetica Neue Light', HelveticaNeue-Light, 'Helvetica Neue', Helvetica, Arial, sans-serif"/&gt;
     &lt;Variable name="post.title.color" description="Color" type="color"
         default="#333333" variants="#333333" value="#333333"/&gt;
   &lt;/Group&gt;

   &lt;Group description="Date Ribbon"&gt;
     &lt;Variable name="ribbon.color" description="Color" type="color"
         default="#666666" variants="#2b256f,#00b2b4,#4ba976,#696f00,#b38f00,#f07300,#d0422c,#f37a86,#7b5341" value="#666666"/&gt;
     &lt;Variable name="ribbon.hover.color" description="Hover Color" type="color"
         default="#AD3A2B" variants="#AD3A2B" value="#AD3A2B"/&gt;
   &lt;/Group&gt;

   &lt;Variable name="blitzview" description="Initial view type"
       type="automatic" default="sidebar" value="sidebar"/&gt;
*/

/* BEGIN CUT */
{
 "font:Text": "$(page.text.font)",
 "color:Text": "$(page.text.color)",
 "image:Background": "$(body.background)",
 "color:Background": "$(body.background.color)",
 "color:Header Background": "$(header.background.color)",
 "color:Primary": "$(primary.color)",
 "color:Menu Text": "$(menu.text.color)",
 "font:Menu": "$(menu.font)",
 "font:Link": "$(link.font)",
 "color:Link": "$(link.color)",
 "color:Link Visited": "$(link.visited.color)",
 "color:Link Hover": "$(link.hover.color)",
 "font:Blog Title": "$(blog.title.font)",
 "color:Blog Title": "$(blog.title.color)",
 "font:Blog Description": "$(blog.description.font)",
 "color:Blog Description": "$(blog.description.color)",
 "font:Post Title": "$(post.title.font)",
 "color:Post Title": "$(post.title.color)",
 "color:Ribbon": "$(ribbon.color)",
 "color:Ribbon Hover": "$(ribbon.hover.color)",
 "view": "$blitzview"
}
/* END CUT */
]]&gt;&lt;/b:skin&gt;
    &lt;b:template-skin&gt;
      &lt;b:variable default='960px' name='content.width' type='length'/&gt;
      &lt;b:variable default='0' name='main.column.left.width' type='length'/&gt;
      &lt;b:variable default='310px' name='main.column.right.width' type='length' value='260px'/&gt;
      &lt;b:variable default='46px' name='faviconpanel.height' type='length'/&gt;

      &lt;![CDATA[
      body {
        min-width: $(content.width);
      }

      .column-center-outer {
        margin-top: $(faviconpanel.height);
      }

      .content-outer, .content-fauxcolumn-outer, .region-inner {
        min-width: $(content.width);
        max-width: $(content.width);
        _width: $(content.width);
      }

      .main-inner .columns {
        padding-left: $(main.column.left.width);
        padding-right: $(main.column.right.width);
      }

      .main-inner .fauxcolumn-center-outer {
        left: $(main.column.left.width);
        right: $(main.column.right.width);
        /* IE6 does not respect left and right together */
        _width: expression(this.parentNode.offsetWidth -
            parseInt("$(main.column.left.width)") -
            parseInt("$(main.column.right.width)") + 'px');
      }

      .main-inner .fauxcolumn-left-outer {
        width: $(main.column.left.width);
      }

      .main-inner .fauxcolumn-right-outer {
        width: $(main.column.right.width);
      }

      .main-inner .column-left-outer {
        width: $(main.column.left.width);
        right: 100%;
        margin-left: -$(main.column.left.width);
      }

      .main-inner .column-right-outer {
        width: $(main.column.right.width);
        margin-right: -$(main.column.right.width);
      }

      #layout {
        min-width: 0;
      }

      #layout .content-outer {
        min-width: 0;
        width: 800px;
      }

      #layout .region-inner {
        min-width: 0;
        width: auto;
      }
      ]]&gt;
    &lt;/b:template-skin&gt;

    &lt;script expr:src='data:blog.dynamicViewsScriptSrc + &amp;quot;/js/thirdparty/jquery.js&amp;quot;' type='text/javascript'/&gt;
    &lt;script expr:src='data:blog.dynamicViewsScriptSrc + &amp;quot;/js/thirdparty/jquery-mousewheel.js&amp;quot;' type='text/javascript'/&gt;
    &lt;script expr:src='data:blog.dynamicViewsScriptSrc + &amp;quot;/js/common.js&amp;quot;' type='text/javascript'/&gt;
    &lt;b:if cond='data:blog.localeUnderscoreDelimited != &amp;quot;en&amp;quot;'&gt;
      &lt;script expr:src='data:blog.dynamicViewsScriptSrc +           &amp;quot;/js/languages/lang__&amp;quot; + data:blog.localeUnderscoreDelimited + &amp;quot;.js&amp;quot;' type='text/javascript'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:blog.view'&gt;
      &lt;script expr:src='data:blog.dynamicViewsScriptSrc + &amp;quot;/js/&amp;quot; + data:blog.view + &amp;quot;.js&amp;quot;' type='text/javascript'/&gt;
    &lt;b:else/&gt;
      &lt;b:if cond='data:blog.isMobileRequest'&gt;
        &lt;script expr:src='data:blog.dynamicViewsScriptSrc + &amp;quot;/js/classic.js&amp;quot;' type='text/javascript'/&gt;
      &lt;b:else/&gt;
        &lt;b:if cond='data:skin.vars.blitzview'&gt;
          &lt;script expr:src='data:blog.dynamicViewsScriptSrc + &amp;quot;/js/&amp;quot; + data:skin.vars.blitzview + &amp;quot;.js&amp;quot;' type='text/javascript'/&gt;
        &lt;b:else/&gt;
          &lt;script expr:src='data:blog.dynamicViewsScriptSrc + &amp;quot;/js/sidebar.js&amp;quot;' type='text/javascript'/&gt;
        &lt;/b:if&gt;
      &lt;/b:if&gt;
    &lt;/b:if&gt;
    &lt;script expr:src='data:blog.dynamicViewsScriptSrc + &amp;quot;/js/gadgets.js&amp;quot;' type='text/javascript'/&gt;
    &lt;script expr:src='data:blog.dynamicViewsCommentsSrc'/&gt;
    &lt;b:include data='blog' name='google-analytics'/&gt;
    &lt;style&gt;
      div.hide { display:none; background-color:blue;}
      div.show { }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class='content'&gt;
      &lt;div class='content-outer'&gt;
        &lt;div class='fauxborder-left content-fauxborder-left'&gt;
          &lt;div class='content-inner'&gt;
            &lt;div class='main-outer'&gt;
              &lt;div class='fauxborder-left main-fauxborder-left'&gt;
                &lt;div class='region-inner main-inner'&gt;
                  &lt;div class='columns fauxcolumns'&gt;
                    &lt;div class='column-center-outer'&gt;
                      &lt;div class='column-center-inner'&gt;
                        &lt;b:section class='main' id='main' showaddelement='no'&gt;
                          &lt;b:widget id='Blog1' locked='false' title='Blog Posts' type='Blog' visible='true'&gt;
                            &lt;b:includable id='main' var='top'&gt;
  &lt;b:if cond='!data:mobile'&gt;
    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.isDateStart and not data:post.isFirstPost'&gt;
          &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-outer&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.dateHeader'&gt;
          &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-posts&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;div class='post-outer'&gt;
          &lt;b:include data='post' name='post'/&gt;
          &lt;b:include cond='data:blog.pageType in {&amp;quot;static_page&amp;quot;,&amp;quot;item&amp;quot;}' data='post' name='comment_picker'/&gt;
        &lt;/div&gt;

        &lt;!-- Ad --&gt;
        &lt;b:if cond='data:post.includeAd'&gt;
          &lt;div class='inline-ad'&gt;
            &lt;data:adCode/&gt;
          &lt;/div&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
      &lt;b:if cond='data:numPosts != 0'&gt;
        &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
      &lt;/b:if&gt;
    &lt;/div&gt;

    &lt;!-- navigation --&gt;
    &lt;b:include name='nextprev'/&gt;

    &lt;!-- feed links --&gt;
    &lt;b:include name='feedLinks'/&gt;

  &lt;b:else/&gt;
    &lt;b:include name='mobile-main'/&gt;
  &lt;/b:if&gt;

  &lt;b:if cond='data:top.showPlusOne'&gt;
    &lt;data:top.googlePlusBootstrap/&gt;
  &lt;/b:if&gt;

&lt;/b:includable&gt;
                            &lt;b:includable id='backlinkDeleteIcon' var='backlink'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:backlink.adminClass'&gt;
    &lt;a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'&gt;
      &lt;img src='https://img1.blogblog.com/img/icon_delete13.gif'/&gt;
    &lt;/a&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='backlinks' var='post'&gt;
  &lt;a name='links'/&gt;&lt;h4&gt;&lt;data:post.backlinksLabel/&gt;&lt;/h4&gt;
  &lt;b:if cond='data:post.numBacklinks != 0'&gt;
    &lt;dl class='comments-block' id='comments-block'&gt;
      &lt;b:loop values='data:post.backlinks' var='backlink'&gt;
        &lt;div class='collapsed-backlink backlink-control'&gt;
          &lt;dt class='comment-title'&gt;
            &lt;span class='backlink-toggle-zippy'&gt;&amp;#160;&lt;/span&gt;
            &lt;a expr:href='data:backlink.url' rel='nofollow'&gt;&lt;data:backlink.title/&gt;&lt;/a&gt;
            &lt;b:include data='backlink' name='backlinkDeleteIcon'/&gt;
          &lt;/dt&gt;
          &lt;dd class='comment-body collapseable'&gt;
            &lt;data:backlink.snippet/&gt;
          &lt;/dd&gt;
          &lt;dd class='comment-footer collapseable'&gt;
            &lt;span class='comment-author'&gt;&lt;data:post.authorLabel/&gt; &lt;data:backlink.author/&gt;&lt;/span&gt;
            &lt;span class='comment-timestamp'&gt;&lt;data:post.timestampLabel/&gt; &lt;data:backlink.timestamp/&gt;&lt;/span&gt;
          &lt;/dd&gt;
        &lt;/div&gt;
      &lt;/b:loop&gt;
    &lt;/dl&gt;
  &lt;/b:if&gt;
  &lt;p class='comment-footer'&gt;
    &lt;a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + &amp;quot;_backlinks-create-link&amp;quot;' target='_blank'&gt;&lt;data:post.createLinkLabel/&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;h4 id='comment-post-message'&gt;
        &lt;a expr:id='data:widget.instanceId + &amp;quot;_comment-editor-toggle-link&amp;quot;' href='javascript:void(0)'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;h4 id='comment-post-message'&gt;&lt;data:postCommentMsg/&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='commentDeleteIcon' var='comment'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:comment.adminClass'&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div class='goog-toggle-button'&gt;
        &lt;div class='goog-inline-block comment-action-icon'/&gt;
      &lt;/div&gt;
    &lt;b:else/&gt;
      &lt;a class='comment-delete' expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'&gt;
        &lt;img src='https://img1.blogblog.com/img/icon_delete13.gif'/&gt;
      &lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='comment_count_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;span class='cmt_count_iframe_holder' expr:data-count='data:post.numComments' expr:data-onclick='data:post.addCommentOnclick' expr:data-post-url='data:post.url' expr:data-url='data:post.url.canonical.http'&gt;
    &lt;/span&gt;
  &lt;b:else/&gt;
    &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;
      &lt;data:post.commentLabelFull/&gt;:
    &lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='comment_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;b:include data='post' name='iframe_comments'/&gt;
  &lt;b:elseif cond='data:post.showThreadedComments'/&gt;
    &lt;b:include data='post' name='threaded_comments'/&gt;
  &lt;b:else/&gt;
    &lt;b:include data='post' name='comments'/&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;b:if cond='data:post.allowComments'&gt;
      &lt;h4&gt;&lt;data:post.commentLabelFull/&gt;:&lt;/h4&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;b:if cond='data:post.hasOlderLinks'&gt;
            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;&lt;data:post.oldestLinkText/&gt;&lt;/a&gt;
              &amp;#160;
            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;&lt;data:post.olderLinkText/&gt;&lt;/a&gt;
              &amp;#160;
          &lt;/b:if&gt;

          &lt;data:post.commentRangeText/&gt;

          &lt;b:if cond='data:post.hasNewerLinks'&gt;
            &amp;#160;
            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;&lt;data:post.newerLinkText/&gt;&lt;/a&gt;
            &amp;#160;
            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;&lt;data:post.newestLinkText/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;div expr:id='data:widget.instanceId + &amp;quot;_comments-block-wrapper&amp;quot;'&gt;
        &lt;dl expr:class='data:post.avatarIndentClass' id='comments-block'&gt;
          &lt;b:loop values='data:post.comments' var='comment'&gt;
            &lt;dt expr:class='&amp;quot;comment-author &amp;quot; + data:comment.authorClass' expr:id='data:comment.anchorName'&gt;
              &lt;b:if cond='data:comment.favicon'&gt;
                &lt;img expr:src='data:comment.favicon' height='16px' style='margin-bottom:-2px;' width='16px'/&gt;
              &lt;/b:if&gt;
              &lt;a expr:name='data:comment.anchorName'/&gt;
              &lt;b:if cond='data:blog.enabledCommentProfileImages'&gt;
                &lt;data:comment.authorAvatarImage/&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:comment.authorUrl'&gt;
                &lt;a expr:href='data:comment.authorUrl' rel='nofollow'&gt;&lt;data:comment.author/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;data:comment.author/&gt;
              &lt;/b:if&gt;
              &lt;data:commentPostedByMsg/&gt;
            &lt;/dt&gt;
            &lt;dd class='comment-body' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'&gt;
              &lt;b:if cond='data:comment.isDeleted'&gt;
                &lt;span class='deleted-comment'&gt;&lt;data:comment.body/&gt;&lt;/span&gt;
              &lt;b:else/&gt;
                &lt;p&gt;
                  &lt;data:comment.body/&gt;
                &lt;/p&gt;
              &lt;/b:if&gt;
            &lt;/dd&gt;
            &lt;dd class='comment-footer'&gt;
              &lt;span class='comment-timestamp'&gt;
                &lt;a expr:href='data:comment.url' title='comment permalink'&gt;
                  &lt;data:comment.timestamp/&gt;
                &lt;/a&gt;
                &lt;b:include data='comment' name='commentDeleteIcon'/&gt;
              &lt;/span&gt;
            &lt;/dd&gt;
          &lt;/b:loop&gt;
        &lt;/dl&gt;
      &lt;/div&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;
            &lt;data:post.oldestLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;
            &lt;data:post.olderLinkText/&gt;
          &lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;
            &lt;data:post.newerLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;
            &lt;data:post.newestLinkText/&gt;
          &lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;p class='comment-footer'&gt;
        &lt;b:if cond='data:post.embedCommentForm'&gt;
          &lt;b:if cond='data:post.allowNewComments'&gt;
            &lt;b:include data='post' name='comment-form'/&gt;
          &lt;b:else/&gt;
            &lt;data:post.noNewCommentsText/&gt;
          &lt;/b:if&gt;
        &lt;b:elseif cond='data:post.allowComments'/&gt;
          &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
        &lt;/b:if&gt;
      &lt;/p&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:include cond='data:post.showBacklinks' data='post' name='backlinks'/&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='feedLinks'&gt;
  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt; &lt;!-- Blog feed links --&gt;
    &lt;b:if cond='data:feedLinks'&gt;
      &lt;div class='blog-feeds'&gt;
        &lt;b:include data='feedLinks' name='feedLinksBody'/&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

  &lt;b:else/&gt; &lt;!--Post feed links --&gt;
    &lt;div class='post-feeds'&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:include cond='data:post.allowComments and data:post.feedLinks' data='post.feedLinks' name='feedLinksBody'/&gt;
      &lt;/b:loop&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='feedLinksBody' var='links'&gt;
  &lt;div class='feed-links'&gt;
  &lt;data:feedLinksMsg/&gt;
  &lt;b:loop values='data:links' var='f'&gt;
     &lt;a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'&gt;&lt;data:f.name/&gt; (&lt;data:f.feedType/&gt;)&lt;/a&gt;
  &lt;/b:loop&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='iframe_comments' var='post'&gt;

  &lt;b:if cond='data:post.allowIframeComments'&gt;
    &lt;script expr:src='data:post.iframeCommentSrc' type='text/javascript'/&gt;
    &lt;div class='cmt_iframe_holder' expr:data-href='data:post.url.canonical' expr:data-viewtype='data:post.viewType'/&gt;

    &lt;b:if cond='data:post.embedCommentForm == &amp;quot;false&amp;quot;'&gt;
      &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='mobile-index-post' var='post'&gt;
  &lt;div class='mobile-date-outer date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;div class='date-header'&gt;
        &lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-post-outer'&gt;
      &lt;a expr:href='data:post.url'&gt;
        &lt;h3 class='mobile-index-title entry-title' itemprop='name'&gt;
          &lt;data:post.title/&gt;
        &lt;/h3&gt;

        &lt;div class='mobile-index-arrow'&gt;&amp;amp;rsaquo;&lt;/div&gt;

        &lt;div class='mobile-index-contents'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;div class='mobile-index-thumbnail'&gt;
              &lt;div class='Image'&gt;
                &lt;img expr:src='data:post.thumbnailUrl'/&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/b:if&gt;

          &lt;div class='post-body'&gt;
            &lt;b:if cond='data:post.snippet'&gt;&lt;data:post.snippet/&gt;&lt;/b:if&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div style='clear: both;'/&gt;
      &lt;/a&gt;

      &lt;div class='mobile-index-comment'&gt;
        &lt;b:include cond='data:blog.pageType != &amp;quot;static_page&amp;quot;                          and data:post.allowComments                          and data:post.numComments != 0' data='post' name='comment_count_picker'/&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='mobile-main' var='top'&gt;
    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;b:if cond='data:blog.pageType == &amp;quot;index&amp;quot;'&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-index-post'/&gt;
        &lt;/b:loop&gt;
      &lt;b:else/&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-post'/&gt;
        &lt;/b:loop&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;

   &lt;b:include name='mobile-nextprev'/&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='mobile-nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&amp;amp;lsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&amp;amp;rsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-link-button' id='blog-pager-home-link'&gt;
    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class='mobile-desktop-link'&gt;
      &lt;a class='home-link' expr:href='data:desktopLinkUrl'&gt;&lt;data:desktopLinkMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='mobile-post' var='post'&gt;
  &lt;div class='date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='date-posts'&gt;
      &lt;div class='post-outer'&gt;

        &lt;div class='post hentry uncustomized-post-template' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;meta expr:content='data:post.thumbnailUrl' itemprop='image_url'/&gt;
          &lt;/b:if&gt;
          &lt;meta expr:content='data:blog.blogId' itemprop='blogId'/&gt;
          &lt;meta expr:content='data:post.id' itemprop='postId'/&gt;

          &lt;a expr:name='data:post.id'/&gt;
          &lt;b:if cond='data:post.title'&gt;
            &lt;h3 class='post-title entry-title' itemprop='name'&gt;
              &lt;b:if cond='data:post.link'&gt;
                &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
              &lt;b:elseif cond='data:post.url and data:blog.url != data:post.url'/&gt;
                &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;data:post.title/&gt;
              &lt;/b:if&gt;
            &lt;/h3&gt;
          &lt;/b:if&gt;

          &lt;div class='post-header'&gt;
            &lt;div class='post-header-line-1'/&gt;
          &lt;/div&gt;

          &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' itemprop='articleBody'&gt;
            &lt;data:post.body/&gt;
            &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
          &lt;/div&gt;

          &lt;div class='post-footer'&gt;
            &lt;div class='post-footer-line post-footer-line-1'&gt;
              &lt;span class='post-author vcard'&gt;
                &lt;b:if cond='data:top.showAuthor'&gt;
                  &lt;b:if cond='data:post.authorProfileUrl'&gt;
                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                      &lt;meta expr:content='data:post.authorProfileUrl' itemprop='url'/&gt;
                      &lt;a expr:href='data:post.authorProfileUrl' rel='author' title='author profile'&gt;
                        &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                      &lt;/a&gt;
                    &lt;/span&gt;
                  &lt;b:else/&gt;
                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                      &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                    &lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-timestamp'&gt;
                &lt;b:if cond='data:top.showTimestamp'&gt;
                  &lt;data:top.timestampLabel/&gt;
                  &lt;b:if cond='data:post.url'&gt;
                    &lt;meta expr:content='data:post.url.canonical' itemprop='url'/&gt;
                    &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601' itemprop='datePublished'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-comment-link'&gt;
                &lt;b:include cond='data:blog.pageType not in {&amp;quot;item&amp;quot;,&amp;quot;static_page&amp;quot;}                                  and data:post.allowComments' data='post' name='comment_count_picker'/&gt;
              &lt;/span&gt;
            &lt;/div&gt;

            &lt;div class='post-footer-line post-footer-line-2'&gt;
              &lt;b:if cond='data:top.showMobileShare'&gt;
                &lt;div class='mobile-link-button goog-inline-block' id='mobile-share-button'&gt;
                  &lt;a href='javascript:void(0);'&gt;&lt;data:shareMsg/&gt;&lt;/a&gt;
                &lt;/div&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:top.showDummy'&gt;
                &lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;
              &lt;/b:if&gt;
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;

        &lt;b:include cond='data:blog.pageType in {&amp;quot;static_page&amp;quot;,&amp;quot;item&amp;quot;}' data='post' name='comment_picker'/&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;span id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&lt;data:newerPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;span id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&lt;data:olderPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;

    &lt;b:if cond='data:mobileLinkUrl'&gt;
      &lt;div class='blog-mobile-link'&gt;
        &lt;a expr:href='data:mobileLinkUrl'&gt;&lt;data:mobileLinkMsg/&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='post' var='post'&gt;
  &lt;div class='post hentry uncustomized-post-template' itemprop='blogPost' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'&gt;
    &lt;b:if cond='data:post.firstImageUrl'&gt;
      &lt;meta expr:content='data:post.firstImageUrl' itemprop='image_url'/&gt;
    &lt;/b:if&gt;
    &lt;meta expr:content='data:blog.blogId' itemprop='blogId'/&gt;
    &lt;meta expr:content='data:post.id' itemprop='postId'/&gt;

    &lt;a expr:name='data:post.id'/&gt;
    &lt;b:if cond='data:post.title'&gt;
      &lt;h3 class='post-title entry-title' itemprop='name'&gt;
      &lt;b:if cond='data:post.link or (data:post.url and data:blog.url != data:post.url)'&gt;
        &lt;a expr:href='data:post.link ? data:post.link : data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
      &lt;b:else/&gt;
        &lt;data:post.title/&gt;
      &lt;/b:if&gt;
      &lt;/h3&gt;
    &lt;/b:if&gt;

    &lt;div class='post-header'&gt;
    &lt;div class='post-header-line-1'/&gt;
    &lt;/div&gt;

    &lt;!-- Then use the post body as the schema.org description, for good G+/FB snippeting. --&gt;
    &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' expr:itemprop='(data:blog.metaDescription ? &amp;quot;&amp;quot; : &amp;quot;description &amp;quot;) + &amp;quot;articleBody&amp;quot;'&gt;
      &lt;data:post.body/&gt;
      &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
    &lt;/div&gt;

    &lt;b:if cond='data:post.hasJumpLink'&gt;
      &lt;div class='jump-link'&gt;
        &lt;a expr:href='data:post.url + &amp;quot;#more&amp;quot;' expr:title='data:post.title'&gt;&lt;data:post.jumpText/&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='post-footer'&gt;
    &lt;div class='post-footer-line post-footer-line-1'&gt;
      &lt;span class='post-author vcard'&gt;
        &lt;b:if cond='data:top.showAuthor'&gt;
          &lt;data:top.authorLabel/&gt;
            &lt;b:if cond='data:post.authorProfileUrl'&gt;
              &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                &lt;meta expr:content='data:post.authorProfileUrl' itemprop='url'/&gt;
                &lt;a class='g-profile' expr:href='data:post.authorProfileUrl' rel='author' title='author profile'&gt;
                  &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                &lt;/a&gt;
              &lt;/span&gt;
            &lt;b:else/&gt;
              &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
              &lt;/span&gt;
            &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='post-timestamp'&gt;
        &lt;b:if cond='data:top.showTimestamp'&gt;
          &lt;data:top.timestampLabel/&gt;
          &lt;b:if cond='data:post.url'&gt;
            &lt;meta expr:content='data:post.url.canonical' itemprop='url'/&gt;
            &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601' itemprop='datePublished'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='reaction-buttons'&gt;
        &lt;b:if cond='data:top.showReactions'&gt;
          &lt;table border='0' cellpadding='0' cellspacing='0' width='100%'&gt;&lt;tr&gt;
            &lt;td class='reactions-label-cell' nowrap='nowrap' valign='top' width='1%'&gt;
              &lt;span class='reactions-label'&gt;
              &lt;data:top.reactionsLabel/&gt;&lt;/span&gt;&amp;#160;&lt;/td&gt;
            &lt;td&gt;&lt;iframe allowtransparency='true' class='reactions-iframe' expr:src='data:post.reactionsUrl' frameborder='0' name='reactions' scrolling='no'/&gt;&lt;/td&gt;
           &lt;/tr&gt;&lt;/table&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;

      &lt;span class='post-comment-link'&gt;
        &lt;b:include cond='data:blog.pageType not in {&amp;quot;item&amp;quot;,&amp;quot;static_page&amp;quot;}                          and data:post.allowComments' data='post' name='comment_count_picker'/&gt;
      &lt;/span&gt;

       &lt;!-- backlinks --&gt;
       &lt;span class='post-backlinks post-comment-link'&gt;
         &lt;b:if cond='data:blog.pageType not in {&amp;quot;item&amp;quot;,&amp;quot;static_page&amp;quot;}                      and data:post.showBacklinks'&gt;
           &lt;a class='comment-link' expr:href='data:post.url + &amp;quot;#links&amp;quot;'&gt;&lt;data:top.backlinkLabel/&gt;&lt;/a&gt;
         &lt;/b:if&gt;
       &lt;/span&gt;

      &lt;span class='post-icons'&gt;
        &lt;!-- email post links --&gt;
        &lt;b:if cond='data:post.emailPostUrl'&gt;
          &lt;span class='item-action'&gt;
          &lt;a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'&gt;
            &lt;img alt='' class='icon-action' height='13' src='https://img1.blogblog.com/img/icon18_email.gif' width='18'/&gt;
          &lt;/a&gt;
          &lt;/span&gt;
        &lt;/b:if&gt;

        &lt;!-- quickedit pencil --&gt;
        &lt;b:include data='post' name='postQuickEdit'/&gt;
      &lt;/span&gt;

      &lt;!-- share buttons --&gt;
      &lt;div class='post-share-buttons goog-inline-block'&gt;
        &lt;b:include cond='data:post.sharePostUrl' data='post' name='shareButtons'/&gt;
      &lt;/div&gt;

      &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-2'&gt;
      &lt;span class='post-labels'&gt;
        &lt;b:if cond='data:top.showPostLabels and data:post.labels'&gt;
          &lt;data:postLabelsLabel/&gt;
          &lt;b:loop values='data:post.labels' var='label'&gt;
            &lt;a expr:href='data:label.url' rel='tag'&gt;&lt;data:label.name/&gt;&lt;/a&gt;&lt;b:if cond='not data:label.isLast'&gt;,&lt;/b:if&gt;
          &lt;/b:loop&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;
      &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-3'&gt;
      &lt;span class='post-location'&gt;
        &lt;b:if cond='data:top.showLocation and data:post.location'&gt;
          &lt;data:postLocationLabel/&gt;
          &lt;a expr:href='data:post.location.mapsUrl' target='_blank'&gt;&lt;data:post.location.name/&gt;&lt;/a&gt;
        &lt;/b:if&gt;
      &lt;/span&gt;
      &lt;/div&gt;
      &lt;b:if cond='data:post.authorAboutMe'&gt;
        &lt;div class='author-profile' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
          &lt;b:if cond='data:post.authorPhoto.url'&gt;
            &lt;img expr:src='data:post.authorPhoto.url' itemprop='image' width='50px'/&gt;
          &lt;/b:if&gt;
          &lt;div&gt;
            &lt;a class='g-profile' expr:href='data:post.authorProfileUrl' itemprop='url' rel='author' title='author profile'&gt;
              &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
            &lt;/a&gt;
          &lt;/div&gt;
          &lt;span itemprop='description'&gt;&lt;data:post.authorAboutMe/&gt;&lt;/span&gt;
        &lt;/div&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='postQuickEdit' var='post'&gt;
  &lt;b:if cond='data:post.editUrl'&gt;
    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:post.adminClass'&gt;
      &lt;a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'&gt;
        &lt;img alt='' class='icon-action' height='18' src='https://img1.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='shareButtons' var='post'&gt;
  &lt;b:if cond='data:top.showEmailButton'&gt;&lt;a class='goog-inline-block share-button sb-email' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=email&amp;quot;' expr:title='data:top.emailThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.emailThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showBlogThisButton'&gt;&lt;a class='goog-inline-block share-button sb-blog' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=blog&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=270,width=475\&amp;quot;); return false;&amp;quot;' expr:title='data:top.blogThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.blogThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showTwitterButton'&gt;&lt;a class='goog-inline-block share-button sb-twitter' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=twitter&amp;quot;' expr:title='data:top.shareToTwitterMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToTwitterMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showFacebookButton'&gt;&lt;a class='goog-inline-block share-button sb-facebook' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=facebook&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=430,width=640\&amp;quot;); return false;&amp;quot;' expr:title='data:top.shareToFacebookMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToFacebookMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showPinterestButton'&gt;&lt;a class='goog-inline-block share-button sb-pinterest' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=pinterest&amp;quot;' expr:title='data:top.shareToPinterestMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToPinterestMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showPlusOne'&gt;&lt;div class='goog-inline-block google-plus-share-container'&gt;&lt;data:post.googlePlusShareTag/&gt;&lt;/div&gt;&lt;/b:if&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='status-message'&gt;
  &lt;b:if cond='data:navMessage'&gt;
  &lt;div class='status-msg-wrap'&gt;
    &lt;div class='status-msg-body'&gt;
      &lt;data:navMessage/&gt;
    &lt;/div&gt;
    &lt;div class='status-msg-border'&gt;
      &lt;div class='status-msg-bg'&gt;
        &lt;div class='status-msg-hidden'&gt;&lt;data:navMessage/&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div style='clear: both;'/&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='threaded-comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='threaded_comment_js' var='post'&gt;
  &lt;script async='async' expr:src='data:post.commentSrc' type='text/javascript'/&gt;

  &lt;script type='text/javascript'&gt;
    (function() {
      var items = &lt;data:post.commentJso/&gt;;
      var msgs = &lt;data:post.commentMsgs/&gt;;
      var config = &lt;data:post.commentConfig/&gt;;

// &lt;![CDATA[
      var cursor = null;
      if (items &amp;&amp; items.length &gt; 0) {
        cursor = parseInt(items[items.length - 1].timestamp) + 1;
      }

      var bodyFromEntry = function(entry) {
        if (entry.gd$extendedProperty) {
          for (var k in entry.gd$extendedProperty) {
            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {
              return '&lt;span class="deleted-comment"&gt;' + entry.content.$t + '&lt;/span&gt;';
            }
          }
        }
        return entry.content.$t;
      }

      var parse = function(data) {
        cursor = null;
        var comments = [];
        if (data &amp;&amp; data.feed &amp;&amp; data.feed.entry) {
          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {
            var comment = {};
            // comment ID, parsed out of the original id format
            var id = /blog-(\d+).post-(\d+)/.exec(entry.id.$t);
            comment.id = id ? id[2] : null;
            comment.body = bodyFromEntry(entry);
            comment.timestamp = Date.parse(entry.published.$t) + '';
            if (entry.author &amp;&amp; entry.author.constructor === Array) {
              var auth = entry.author[0];
              if (auth) {
                comment.author = {
                  name: (auth.name ? auth.name.$t : undefined),
                  profileUrl: (auth.uri ? auth.uri.$t : undefined),
                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)
                };
              }
            }
            if (entry.link) {
              if (entry.link[2]) {
                comment.link = comment.permalink = entry.link[2].href;
              }
              if (entry.link[3]) {
                var pid = /.*comments\/default\/(\d+)\?.*/.exec(entry.link[3].href);
                if (pid &amp;&amp; pid[1]) {
                  comment.parentId = pid[1];
                }
              }
            }
            comment.deleteclass = 'item-control blog-admin';
            if (entry.gd$extendedProperty) {
              for (var k in entry.gd$extendedProperty) {
                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {
                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;
                } else if (entry.gd$extendedProperty[k].name == 'blogger.displayTime') {
                  comment.displayTime = entry.gd$extendedProperty[k].value;
                }
              }
            }
            comments.push(comment);
          }
        }
        return comments;
      };

      var paginator = function(callback) {
        if (hasMore()) {
          var url = config.feed + '?alt=json&amp;v=2&amp;orderby=published&amp;reverse=false&amp;max-results=50';
          if (cursor) {
            url += '&amp;published-min=' + new Date(cursor).toISOString();
          }
          window.bloggercomments = function(data) {
            var parsed = parse(data);
            cursor = parsed.length &lt; 50 ? null
                : parseInt(parsed[parsed.length - 1].timestamp) + 1
            callback(parsed);
            window.bloggercomments = null;
          }
          url += '&amp;callback=bloggercomments';
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = url;
          document.getElementsByTagName('head')[0].appendChild(script);
        }
      };
      var hasMore = function() {
        return !!cursor;
      };
      var getMeta = function(key, comment) {
        if ('iswriter' == key) {
          var matches = !!comment.author
              &amp;&amp; comment.author.name == config.authorName
              &amp;&amp; comment.author.profileUrl == config.authorUrl;
          return matches ? 'true' : '';
        } else if ('deletelink' == key) {
          return config.baseUri + '/delete-comment.g?blogID='
               + config.blogId + '&amp;postID=' + comment.id;
        } else if ('deleteclass' == key) {
          return comment.deleteclass;
        }
        return '';
      };

      var replybox = null;
      var replyUrlParts = null;
      var replyParent = undefined;

      var onReply = function(commentId, domId) {
        if (replybox == null) {
          // lazily cache replybox, and adjust to suit this style:
          replybox = document.getElementById('comment-editor');
          if (replybox != null) {
            replybox.height = '250px';
            replybox.style.display = 'block';
            replyUrlParts = replybox.src.split('#');
          }
        }
        if (replybox &amp;&amp; (commentId !== replyParent)) {
          replybox.src = '';
          document.getElementById(domId).insertBefore(replybox, null);
          replybox.src = replyUrlParts[0]
              + (commentId ? '&amp;parentID=' + commentId : '')
              + '#' + replyUrlParts[1];
          replyParent = commentId;
        }
      };

      var hash = (window.location.hash || '#').substring(1);
      var startThread, targetComment;
      if (/^comment-form_/.test(hash)) {
        startThread = hash.substring('comment-form_'.length);
      } else if (/^c[0-9]+$/.test(hash)) {
        targetComment = hash.substring(1);
      }

      // Configure commenting API:
      var configJso = {
        'maxDepth': config.maxThreadDepth
      };
      var provider = {
        'id': config.postId,
        'data': items,
        'loadNext': paginator,
        'hasMore': hasMore,
        'getMeta': getMeta,
        'onReply': onReply,
        'rendered': true,
        'initComment': targetComment,
        'initReplyThread': startThread,
        'config': configJso,
        'messages': msgs
      };

      var render = function() {
        if (window.goog &amp;&amp; window.goog.comments) {
          var holder = document.getElementById('comment-holder');
          window.goog.comments.render(holder, provider);
        }
      };

      // render now, or queue to render when library loads:
      if (window.goog &amp;&amp; window.goog.comments) {
        render();
      } else {
        window.goog = window.goog || {};
        window.goog.comments = window.goog.comments || {};
        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];
        window.goog.comments.loadQueue.push(render);
      }
    })();
// ]]&gt;
  &lt;/script&gt;
&lt;/b:includable&gt;
                            &lt;b:includable id='threaded_comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;h4&gt;&lt;data:post.commentLabelFull/&gt;:&lt;/h4&gt;

    &lt;div class='comments-content'&gt;
      &lt;b:include cond='data:post.embedCommentForm' data='post' name='threaded_comment_js'/&gt;
      &lt;div id='comment-holder'&gt;
         &lt;data:post.commentHtml/&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;p class='comment-footer'&gt;
      &lt;b:if cond='data:post.allowNewComments'&gt;
        &lt;b:include data='post' name='threaded-comment-form'/&gt;
      &lt;b:else/&gt;
        &lt;data:post.noNewCommentsText/&gt;
      &lt;/b:if&gt;
    &lt;/p&gt;

    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
      &lt;b:include cond='data:post.showBacklinks' data='post' name='backlinks'/&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                          &lt;/b:widget&gt;
                          &lt;b:widget id='Text1' locked='false' title='About this blog' type='Text' visible='true'&gt;
                            &lt;b:includable id='main'&gt;
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;data:content/&gt;
  &lt;/div&gt;

  &lt;b:include name='quickedit'/&gt;
&lt;/b:includable&gt;
                          &lt;/b:widget&gt;
                        &lt;/b:section&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div class='column-right-outer'&gt;
                      &lt;div class='column-right-inner'&gt;
                        &lt;aside&gt;
                          &lt;b:section class='sidebar' id='sidebar-right-1' preferred='yes' showaddelement='yes'&gt;
                            &lt;b:widget id='PageList2' locked='false' title='Pages' type='PageList' visible='true'&gt;
                              &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;&lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;&lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;select expr:id='data:widget.instanceId + &amp;quot;_select&amp;quot;'&gt;
        &lt;b:loop values='data:links' var='link'&gt;
          &lt;b:if cond='data:link.isCurrentPage'&gt;
            &lt;option expr:value='data:link.href' selected='selected'&gt;&lt;data:link.title/&gt;&lt;/option&gt;
          &lt;b:else/&gt;
            &lt;option expr:value='data:link.href'&gt;&lt;data:link.title/&gt;&lt;/option&gt;
          &lt;/b:if&gt;
        &lt;/b:loop&gt;
      &lt;/select&gt;
      &lt;span class='pagelist-arrow'&gt;&amp;amp;#9660;&lt;/span&gt;

    &lt;b:else/&gt;
      &lt;ul&gt;
        &lt;b:loop values='data:links' var='link'&gt;
          &lt;b:if cond='data:link.isCurrentPage'&gt;
            &lt;li class='selected'&gt;&lt;a expr:href='data:link.href'&gt;&lt;data:link.title/&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;b:else/&gt;
            &lt;li&gt;&lt;a expr:href='data:link.href'&gt;&lt;data:link.title/&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;/b:if&gt;
        &lt;/b:loop&gt;
      &lt;/ul&gt;
    &lt;/b:if&gt;
    &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;/b:widget&gt;
                            &lt;b:widget id='Header1' locked='false' title='Mona&amp;apos;s learning blog (Header)' type='Header' visible='true'&gt;
                              &lt;b:includable id='main'&gt;

  &lt;b:if cond='data:useImage'&gt;
    &lt;b:if cond='data:imagePlacement == &amp;quot;BEHIND&amp;quot;'&gt;
      &lt;!--
      Show image as background to text. You can't really calculate the width
      reliably in JS because margins are not taken into account by any of
      clientWidth, offsetWidth or scrollWidth, so we don't force a minimum
      width if the user is using shrink to fit.
      This results in a margin-width's worth of pixels being cropped. If the
      user is not using shrink to fit then we expand the header.
      --&gt;
      &lt;b:if cond='data:mobile'&gt;
        &lt;div id='header-inner'&gt;
          &lt;div class='titlewrapper' style='background: transparent'&gt;
            &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
              &lt;b:include name='title'/&gt;
            &lt;/h1&gt;
          &lt;/div&gt;
          &lt;b:include name='description'/&gt;
        &lt;/div&gt;
      &lt;b:else/&gt;
        &lt;div expr:style='&amp;quot;background-image: url(\&amp;quot;&amp;quot; + data:sourceUrl + &amp;quot;\&amp;quot;); &amp;quot;                      + &amp;quot;background-position: &amp;quot;                      + data:backgroundPositionStyleStr + &amp;quot;; &amp;quot;                      + data:widthStyleStr                      + &amp;quot;min-height: &amp;quot; + data:height                      + &amp;quot;_height: &amp;quot; + data:height                      + &amp;quot;background-repeat: no-repeat; &amp;quot;' id='header-inner'&gt;
          &lt;div class='titlewrapper' style='background: transparent'&gt;
            &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
              &lt;b:include name='title'/&gt;
            &lt;/h1&gt;
          &lt;/div&gt;
          &lt;b:include name='description'/&gt;
        &lt;/div&gt;
      &lt;/b:if&gt;
    &lt;b:else/&gt;
      &lt;!--Show the image only--&gt;
      &lt;div id='header-inner'&gt;
        &lt;a expr:href='data:blog.homepageUrl' style='display: block'&gt;
          &lt;img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + &amp;quot;_headerimg&amp;quot;' expr:src='data:sourceUrl' expr:width='data:width' style='display: block'/&gt;
        &lt;/a&gt;
        &lt;!--Show the description--&gt;
        &lt;b:if cond='data:imagePlacement == &amp;quot;BEFORE_DESCRIPTION&amp;quot;'&gt;
          &lt;b:include name='description'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;
  &lt;b:else/&gt;
    &lt;!--No header image --&gt;
    &lt;div id='header-inner'&gt;
      &lt;div class='titlewrapper'&gt;
        &lt;h1 class='title'&gt;
          &lt;b:include name='title'/&gt;
        &lt;/h1&gt;
      &lt;/div&gt;
      &lt;b:include name='description'/&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
                              &lt;b:includable id='description'&gt;
  &lt;div class='descriptionwrapper'&gt;
    &lt;p class='description'&gt;&lt;span&gt;&lt;data:description/&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                              &lt;b:includable id='title'&gt;
  &lt;b:if cond='data:blog.url == data:blog.homepageUrl'&gt;
    &lt;data:title/&gt;
  &lt;b:else/&gt;
    &lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:title/&gt;&lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
                            &lt;/b:widget&gt;
                            &lt;b:widget id='Label1' locked='false' title='Tags' type='Label' visible='true'&gt;
                              &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div expr:class='&amp;quot;widget-content &amp;quot; + data:display + &amp;quot;-label-widget-content&amp;quot;'&gt;
    &lt;b:if cond='data:display == &amp;quot;list&amp;quot;'&gt;
      &lt;ul&gt;
        &lt;b:loop values='data:labels' var='label'&gt;
          &lt;li&gt;
            &lt;b:if cond='data:blog.url == data:label.url'&gt;
              &lt;span expr:dir='data:blog.languageDirection'&gt;&lt;data:label.name/&gt;&lt;/span&gt;
            &lt;b:else/&gt;
              &lt;a expr:dir='data:blog.languageDirection' expr:href='data:label.url'&gt;&lt;data:label.name/&gt;&lt;/a&gt;
            &lt;/b:if&gt;
            &lt;b:if cond='data:showFreqNumbers'&gt;
              &lt;span dir='ltr'&gt;(&lt;data:label.count/&gt;)&lt;/span&gt;
            &lt;/b:if&gt;
          &lt;/li&gt;
        &lt;/b:loop&gt;
      &lt;/ul&gt;
    &lt;b:else/&gt;
      &lt;b:loop values='data:labels' var='label'&gt;
        &lt;span expr:class='&amp;quot;label-size label-size-&amp;quot; + data:label.cssSize'&gt;
          &lt;b:if cond='data:blog.url == data:label.url'&gt;
            &lt;span expr:dir='data:blog.languageDirection'&gt;&lt;data:label.name/&gt;&lt;/span&gt;
          &lt;b:else/&gt;
            &lt;a expr:dir='data:blog.languageDirection' expr:href='data:label.url'&gt;&lt;data:label.name/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
          &lt;b:if cond='data:showFreqNumbers'&gt;
            &lt;span class='label-count' dir='ltr'&gt;(&lt;data:label.count/&gt;)&lt;/span&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;
      &lt;/b:loop&gt;
    &lt;/b:if&gt;
    &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;/b:widget&gt;
                            &lt;b:widget id='PageList1' locked='false' title='Courses @ UNB' type='PageList' visible='true'&gt;
                              &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;&lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;&lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;select expr:id='data:widget.instanceId + &amp;quot;_select&amp;quot;'&gt;
        &lt;b:loop values='data:links' var='link'&gt;
          &lt;b:if cond='data:link.isCurrentPage'&gt;
            &lt;option expr:value='data:link.href' selected='selected'&gt;&lt;data:link.title/&gt;&lt;/option&gt;
          &lt;b:else/&gt;
            &lt;option expr:value='data:link.href'&gt;&lt;data:link.title/&gt;&lt;/option&gt;
          &lt;/b:if&gt;
        &lt;/b:loop&gt;
      &lt;/select&gt;
      &lt;span class='pagelist-arrow'&gt;&amp;amp;#9660;&lt;/span&gt;

    &lt;b:else/&gt;
      &lt;ul&gt;
        &lt;b:loop values='data:links' var='link'&gt;
          &lt;b:if cond='data:link.isCurrentPage'&gt;
            &lt;li class='selected'&gt;&lt;a expr:href='data:link.href'&gt;&lt;data:link.title/&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;b:else/&gt;
            &lt;li&gt;&lt;a expr:href='data:link.href'&gt;&lt;data:link.title/&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;/b:if&gt;
        &lt;/b:loop&gt;
      &lt;/ul&gt;
    &lt;/b:if&gt;
    &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;/b:widget&gt;
                            &lt;b:widget id='LinkList1' locked='false' title='Courses @ UEF' type='LinkList' visible='true'&gt;
                              &lt;b:includable id='main'&gt;

&lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;&lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;&lt;/b:if&gt;
 &lt;div class='widget-content'&gt;
   &lt;ul&gt;
     &lt;b:loop values='data:links' var='link'&gt;
       &lt;li&gt;&lt;a expr:href='data:link.target'&gt;&lt;data:link.name/&gt;&lt;/a&gt;&lt;/li&gt;
     &lt;/b:loop&gt;
   &lt;/ul&gt;
   &lt;b:include name='quickedit'/&gt;
 &lt;/div&gt;
&lt;/b:includable&gt;
                            &lt;/b:widget&gt;
                            &lt;b:widget id='BlogArchive1' locked='false' title='All posts' type='BlogArchive' visible='true'&gt;
                              &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
  &lt;div id='ArchiveList'&gt;
  &lt;div expr:id='data:widget.instanceId + &amp;quot;_ArchiveList&amp;quot;'&gt;
    &lt;b:include cond='data:style == &amp;quot;HIERARCHY&amp;quot;' data='data' name='interval'/&gt;
    &lt;b:include cond='data:style == &amp;quot;FLAT&amp;quot;' data='data' name='flat'/&gt;
    &lt;b:include cond='data:style == &amp;quot;MENU&amp;quot;' data='data' name='menu'/&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
                              &lt;b:includable id='flat' var='data'&gt;
  &lt;ul class='flat'&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;li class='archivedate'&gt;
        &lt;a expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt; (&lt;data:i.post-count/&gt;)
      &lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
                              &lt;b:includable id='interval' var='intervalData'&gt;
  &lt;b:loop values='data:intervalData' var='interval'&gt;
    &lt;ul class='hierarchy'&gt;
      &lt;li expr:class='&amp;quot;archivedate &amp;quot; + data:interval.expclass'&gt;
        &lt;b:include cond='data:interval.toggleId' data='interval' name='toggle'/&gt;
        &lt;a class='post-count-link' expr:href='data:interval.url'&gt;
          &lt;data:interval.name/&gt;
        &lt;/a&gt;
        &lt;span class='post-count' dir='ltr'&gt;(&lt;data:interval.post-count/&gt;)&lt;/span&gt;
        &lt;b:include cond='data:interval.data' data='interval.data' name='interval'/&gt;
        &lt;b:include cond='data:interval.posts' data='interval.posts' name='posts'/&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/b:loop&gt;
&lt;/b:includable&gt;
                              &lt;b:includable id='menu' var='data'&gt;
  &lt;select expr:id='data:widget.instanceId + &amp;quot;_ArchiveMenu&amp;quot;'&gt;
    &lt;option value=''&gt;&lt;data:title/&gt;&lt;/option&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;option expr:value='data:i.url'&gt;&lt;data:i.name/&gt; (&lt;data:i.post-count/&gt;)&lt;/option&gt;
    &lt;/b:loop&gt;
  &lt;/select&gt;
&lt;/b:includable&gt;
                              &lt;b:includable id='posts' var='posts'&gt;
  &lt;ul class='posts'&gt;
    &lt;b:loop values='data:posts' var='post'&gt;
      &lt;li&gt;&lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
                              &lt;b:includable id='toggle' var='interval'&gt;
  &lt;a class='toggle' href='javascript:void(0)'&gt;
    &lt;span expr:class='&amp;quot;zippy&amp;quot; + (data:interval.expclass == &amp;quot;expanded&amp;quot; ? &amp;quot; toggle-open&amp;quot; : &amp;quot;&amp;quot;)'&gt;
      &lt;b:if cond='data:interval.expclass == &amp;quot;expanded&amp;quot;'&gt;
        &amp;#9660;&amp;#160;
      &lt;b:elseif cond='data:blog.languageDirection == &amp;quot;rtl&amp;quot;'/&gt;
        &amp;#9668;&amp;#160;
      &lt;b:else/&gt;
        &amp;#9658;&amp;#160;
      &lt;/b:if&gt;
    &lt;/span&gt;
  &lt;/a&gt;
&lt;/b:includable&gt;
                            &lt;/b:widget&gt;
                            &lt;b:widget id='Navbar1' locked='false' title='Navbar' type='Navbar' visible='true'&gt;
                              &lt;b:includable id='main'&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener(&amp;#39;load&amp;#39;,
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent(&amp;#39;onload&amp;#39;, function(){ object[attribute] = val; });
      }
    }
  &amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;navbar-iframe-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://apis.google.com/js/plusone.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      gapi.load(&amp;quot;gapi.iframes:gapi.iframes.style.bubble&amp;quot;, function() {
        if (gapi.iframes &amp;amp;&amp;amp; gapi.iframes.getContext) {
          gapi.iframes.getContext().openChild({
              url: &amp;#39;https://www.blogger.com/navbar.g?targetBlogID\x3d5940427300271272994\x26blogName\x3dMona\x27s+learning+blog\x26publishMode\x3dPUBLISH_MODE_BLOGSPOT\x26navbarType\x3dLIGHT\x26layoutType\x3dLAYOUTS\x26searchRoot\x3dhttps://learningmonik.blogspot.com/search\x26blogLocale\x3den\x26v\x3d2\x26homepageUrl\x3dhttps://learningmonik.blogspot.com/\x26vt\x3d1317216801338470204&amp;#39;,
              where: document.getElementById(&amp;quot;navbar-iframe-container&amp;quot;),
              id: &amp;quot;navbar-iframe&amp;quot;
          });
        }
      });
    &amp;lt;/script&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function() {
var script = document.createElement(&amp;#39;script&amp;#39;);
script.type = &amp;#39;text/javascript&amp;#39;;
script.src = &amp;#39;//pagead2.googlesyndication.com/pagead/js/google_top_exp.js&amp;#39;;
var head = document.getElementsByTagName(&amp;#39;head&amp;#39;)[0];
if (head) {
head.appendChild(script);
}})();
&amp;lt;/script&amp;gt;
&lt;/b:includable&gt;
                            &lt;/b:widget&gt;
                            &lt;b:widget id='Attribution1' locked='false' title='' type='Attribution' visible='true'&gt;
                              &lt;b:includable id='main'&gt;
    &lt;b:if cond='data:feedbackSurveyLink'&gt;
      &lt;div class='mobile-survey-link' style='text-align: center;'&gt;
        &lt;data:feedbackSurveyLink/&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='widget-content' style='text-align: center;'&gt;
      &lt;b:if cond='data:attribution != &amp;quot;&amp;quot;'&gt;
       &lt;data:attribution/&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;

    &lt;b:include name='quickedit'/&gt;
  &lt;/b:includable&gt;
                            &lt;/b:widget&gt;
                          &lt;/b:section&gt;
                        &lt;/aside&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style='clear: both'/&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;script language='javascript' type='text/javascript'&gt;
      window.onload = function() {
        blogger.ui().configure().view();
      };
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/template/default'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/template/default'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_PUBLISHING_MODE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Typ publikowania dla tego bloga.</title><content type='text'>PUBLISH_MODE_BLOGSPOT</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_PUBLISHING_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_PUBLISHING_MODE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_ADMIN_PERMISSION</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Lista adresów e-mail administratorów bloga.</title><content type='text'>monika.machunik@gmail.com</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ADMIN_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ADMIN_PERMISSION'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_ADULT_CONTENT</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy ten blog zawiera treści tylko dla osób dorosłych</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ADULT_CONTENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ADULT_CONTENT'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_ALTERNATE_JSRENDER_ALLOWED</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Czy alternatywne renderowanie języka JavaScript jest dozwolone</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_ANALYTICS_ACCOUNT_NUMBER</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Numer konta Google Analytics bloga</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_ARCHIVE_DATE_FORMAT</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Numer formatu daty indeksu archiwum</title><content type='text'>9</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ARCHIVE_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ARCHIVE_DATE_FORMAT'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_ARCHIVE_FREQUENCY</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Jak często należy archiwizować tego bloga</title><content type='text'>MONTHLY</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ARCHIVE_FREQUENCY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_ARCHIVE_FREQUENCY'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_AUTHOR_PERMISSION</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Lista adresów e-mail autorów, którzy mają uprawnienia do publikowania.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_AUTHOR_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_AUTHOR_PERMISSION'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_BACKLINKS_ALLOWED</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy linki przychodzące komentarzy mają być pokazywane w blogu</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_BACKLINKS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_BACKLINKS_ALLOWED'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_BY_POST_ARCHIVING</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy dla każdego posta ma być dostępna strona archiwum</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_BY_POST_ARCHIVING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_BY_POST_ARCHIVING'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_ACCESS</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Kto może komentować</title><content type='text'>REGISTERED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_ACCESS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_ACCESS'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_CAPTCHA</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy wymagać od komentujących przechodzenia testu Captcha</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_CAPTCHA'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_CAPTCHA'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_EMAIL</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Lista adresów e-mail, na które będą wysyłane powiadomienia o nowych komentarzach</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_EMAIL'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_FEED</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Typ kanału, który ma być dostępny dla komentarzy do bloga</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_FEED'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_FORM_LOCATION</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Lokalizacja formularza komentarzy do bloga</title><content type='text'>EMBEDDED_IFRAME</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_FORM_LOCATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_FORM_LOCATION'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_MESSAGE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Wiadomość komentarza do bloga</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_MESSAGE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_MESSAGE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_MODERATION</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy włączyć moderowanie komentarzy</title><content type='text'>DISABLED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_MODERATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_MODERATION'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_MODERATION_DELAY</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Liczba dni, po upłynięciu których nowe komentarze będą poddawane moderowaniu</title><content type='text'>14</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_MODERATION_DELAY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_MODERATION_DELAY'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_MODERATION_EMAIL</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Adres e-mail, na który będą przesyłane powiadomienia o nowych komentarzach wymagających moderowania</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_MODERATION_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_MODERATION_EMAIL'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENT_PROFILE_IMAGES</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy obrazy profilów mają być pokazywane przy komentarzach</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_PROFILE_IMAGES'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENT_PROFILE_IMAGES'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENTS_ALLOWED</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy komentarze mają być pokazywane</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENTS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENTS_ALLOWED'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Numer formatu znaczników czasu komentarzy</title><content type='text'>22</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_CONVERT_LINE_BREAKS</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy w edytorze postów podziały wierszy mają być konwertowane na tagi &lt;br /&gt;</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_CONVERT_LINE_BREAKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_CONVERT_LINE_BREAKS'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_CUSTOM_PAGE_NOT_FOUND</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Treść wyświetlana, gdy nie można znaleźć żądanego posta lub strony.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_CUSTOM_ROBOTS_TXT</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Zawartość niestandardowego pliku robots.txt bloga udostępnianego wyszukiwarkom.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_CUSTOM_ROBOTS_TXT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_CUSTOM_ROBOTS_TXT'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_CUSTOM_ROBOTS_TXT_ENABLED</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Czy ten blog ma udostępniać zawartość niestandardowego pliku robots.txt wyszukiwarkom.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_DATE_FORMAT</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Numer formatu nagłówka daty</title><content type='text'>2</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_DATE_FORMAT'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_DEFAULT_BACKLINKS_MODE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Domyślny tryb linków przychodzących dla postów</title><content type='text'>DEFAULT_HAVE_BACKLINKS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_DEFAULT_COMMENTS_MODE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Domyślny tryb komentarzy dla postów</title><content type='text'>DEFAULT_HAVE_COMMENTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_DEFAULT_COMMENTS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_DEFAULT_COMMENTS_MODE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_DESCRIPTION</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Opis bloga</title><content type='text'> my study notes</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_DESCRIPTION'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_EMAIL_POST_LINKS</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy link umożliwiający wysyłanie postów w wiadomościach e-mail ma być dostępny</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_EMAIL_POST_LINKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_EMAIL_POST_LINKS'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_FEED_REDIRECT_URL</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Adres URL, na który będą przekierowywane żądania dotyczące kanału postów</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_FEED_REDIRECT_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_FEED_REDIRECT_URL'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_FLOAT_ALIGNMENT</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy w blogu jest włączone wyrównanie ruchome</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_FLOAT_ALIGNMENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_FLOAT_ALIGNMENT'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_LOCALE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Język tego bloga</title><content type='text'>en</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_LOCALE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_LOCALE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_M2B_WHITELIST_EMAIL</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Lista adresów e-mail, które mogą publikować na blogu przez e-maila.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_M2B_WHITELIST_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_M2B_WHITELIST_EMAIL'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_MAX_NUM</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Maksymalna liczba elementów wyświetlanych na stronie głównej</title><content type='text'>7</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_MAX_NUM'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_MAX_NUM'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_MAX_UNIT</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Jednostka elementów wyświetlanych na stronie głównej</title><content type='text'>POSTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_MAX_UNIT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_MAX_UNIT'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_META_DESCRIPTION</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Metaopis bloga udostępniany wyszukiwarkom.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_META_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_META_DESCRIPTION'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_META_DESCRIPTION_ENABLED</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Czy ten blog jest udostępniany z metaopisami.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_META_DESCRIPTION_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_META_DESCRIPTION_ENABLED'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_NAME</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Nazwa bloga</title><content type='text'>Mona's learning blog</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_NAME'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_NAME'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_PER_POST_FEED</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Typ kanału, który ma być dostępny dla komentarzy do postów</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_PER_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_PER_POST_FEED'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_POST_FEED</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Typ kanału, który ma być dostępny dla postów w blogu</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_POST_FEED'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_POST_FEED_FOOTER</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Stopka, która ma być dołączana na końcu każdego wpisu w kanale postów</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_POST_FEED_FOOTER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_POST_FEED_FOOTER'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_POST_TEMPLATE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Szablon postów bloga</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_POST_TEMPLATE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_POST_TEMPLATE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_PROMOTED</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy ten blog może być promowany przez Bloggera</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_PROMOTED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_PROMOTED'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_QUICK_EDITING</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy funkcja szybkiej edycji ma być włączona</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_QUICK_EDITING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_QUICK_EDITING'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_READ_ACCESS_MODE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Typ dostępu dla czytelników bloga.</title><content type='text'>PUBLIC</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_READ_ACCESS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_READ_ACCESS_MODE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_READER_PERMISSION</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Lista adresów e-mail użytkowników, którzy mają uprawnienia do czytania bloga.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_READER_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_READER_PERMISSION'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_SEARCHABLE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy ten blog ma być indeksowany przez wyszukiwarki</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SEARCHABLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SEARCHABLE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_SEND_EMAIL</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Lista adresów e-mail oddzielonych przecinkami, na które będą wysyłane nowe posty w blogu</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SEND_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SEND_EMAIL'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_SHOW_TITLE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy pole tytułu ma być pokazywane</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SHOW_TITLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SHOW_TITLE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_SHOW_URL</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy w oknie tworzenia postów ma być wyświetlane pole pokrewnych linków</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SHOW_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SHOW_URL'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_SUBDOMAIN</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Poddomena usługi BlogSpot, w której zostanie opublikowany blog</title><content type='text'>learningmonik</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SUBDOMAIN'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_SUBDOMAIN'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_TIME_STAMP_FORMAT</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Numer formatu znacznika czasu</title><content type='text'>6</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_TIME_STAMP_FORMAT'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_TIME_ZONE</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Strefa czasowa tego bloga</title><content type='text'>Europe/Berlin</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_TIME_ZONE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_TIME_ZONE'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.settings.BLOG_USE_LIGHTBOX</id><published>2010-09-25T17:31:37.406+02:00</published><updated>2016-05-28T14:07:06.400+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Określa, czy obrazy mają być po kliknięciu pokazywane w widoku lightbox.</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_USE_LIGHTBOX'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/settings/BLOG_USE_LIGHTBOX'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-2399890181916792650</id><published>2016-05-28T14:02:00.002+02:00</published><updated>2016-05-28T14:04:00.213+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Java 8 OCA 1Z0 808 exam checklist</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div onclick="document.getElementById('q1').className='show';"&gt;Aaaa&lt;/div&gt;&lt;div id="q1" class="hide"&gt;aaaa &lt;/div&gt; &lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/2399890181916792650/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2016/05/java-8-oca-1z0-808-exam-checklist.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2399890181916792650'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2399890181916792650'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2016/05/java-8-oca-1z0-808-exam-checklist.html' title='Java 8 OCA 1Z0 808 exam checklist'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-2617148401622069827</id><published>2016-03-03T12:14:00.003+01:00</published><updated>2016-05-27T11:08:11.690+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Preparation for Java 8 OCA 1Z0 808 exam</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;These are my&lt;b&gt; study notes&lt;/b&gt; taken while preparing for&lt;b&gt; Java Oracle Certified Associate&lt;/b&gt; exam and reading one of the available study guides (the one with most review stars found somewhere). Reading such study guide is the best way to prepare for the exam, as it actually teaches you things you will need on the exam rather than what you need when you program in Java (which is entirely different than taking an exam, of course). Here I make notes on the stuff I found new, important or surprising.&lt;br /&gt;&lt;br /&gt;Some background about me - in my programming experience I started at Java 5 by first reading thoughroughly the first two thirds of Thinking in Java (what I didn't read were threading and custom annotations), I recently understood some Java 8 stuff, though this came mostly by learning F# (functional language derived from C#).&lt;br /&gt;&lt;br /&gt;Very important: please comment if you find an error.&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Things that surprised me about the exam&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;when they ask you about &lt;b&gt;compilation errors&lt;/b&gt;, they ask you about &lt;b&gt;all of them&lt;/b&gt;, not the first one&lt;/li&gt;&lt;li&gt;when they ask for the "output" they can mean &lt;b&gt;part of the output&lt;/b&gt;, it also counts (facepalm). basically &lt;b&gt;each bit of output can be a separate answer &lt;/b&gt;- in such case you need to mark them all&lt;/li&gt;&lt;li&gt;if there is an answer like "&lt;i&gt;an exception is thrown&lt;/i&gt;" it still &lt;b&gt;does not mean &lt;/b&gt;that some other outputs are not true as well, that will happen before the exception; exception is not exclusive with other answers&lt;/li&gt;&lt;li&gt;when there are &lt;b&gt;no line numbers &lt;/b&gt;in a code snippet assume &lt;b&gt;missing imports do&amp;nbsp;&lt;/b&gt;cause compilation errors&lt;/li&gt;&lt;li&gt;&lt;b&gt;public void MyClass() &lt;/b&gt;- this is how they may trick you, notice this is &lt;b&gt;NOT a constructor &lt;/b&gt;since it has void return type..&lt;/li&gt;&lt;li&gt;&lt;b&gt;StringBuilder str = "bla"; &lt;/b&gt;- another way to trick, this &lt;b&gt;does not compile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Vocabulary: "legal" = "valid" = "compiles"&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style="background-color: #fff2cc;"&gt;I am marking in yellow everything that I consider I need to &lt;b&gt;memorize &lt;/b&gt;rather than understand or get a feeling for.&lt;/span&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;General things that surprised me about Java&lt;/h3&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;On the self assesment test (40% correct)&lt;/h4&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;class/variable name &lt;b&gt;can &lt;/b&gt;start with "_"&lt;/li&gt;&lt;li&gt;"$" is a &lt;b&gt;perfectly valid&lt;/b&gt; variable name, or start of one&lt;/li&gt;&lt;li&gt;same naming rules apply for methods, variables, fields and classes, and the two above are all the weird exceptions (well except other Unicode letters of weird languages) (&lt;b&gt;numbers &lt;/b&gt;are also allowed but &lt;b&gt;not as first&lt;/b&gt;)&lt;/li&gt;&lt;li&gt;the, compiler, will, fu**ing, &lt;b&gt;complain about &lt;u&gt;reading&lt;/u&gt; any uninitialized &lt;u&gt;LOCAL&lt;/u&gt;&amp;nbsp;variable &lt;/b&gt;(&lt;b&gt;ALSO PRIMITIVE&lt;/b&gt;), but instance variables are ok (if not final)&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-MvbdBFZac_8/Vva6untWECI/AAAAAAAACWY/K1q-kn9QhZcYyqCkrfWeikVrWUSMgUKoQ/s1600/notinitialized.png" /&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;string1 ==string2 will render &lt;b&gt;true &lt;/b&gt;but stringBuffer1.toString()==s2 (with same string) will render &lt;b&gt;false&lt;/b&gt; - there's something called &lt;b&gt;string pool; &lt;/b&gt;also sth like new String("bla") will be always created not taken from string pool&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-m88rDwlZoSQ/VvbNgWIQbEI/AAAAAAAACXE/JGWTkdQb1WsJEJAWzjtn-nd2N0voy4oIw/s1600/stringpool.png" /&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;printing list without .toString() prints only the object ref of course&lt;/li&gt;&lt;li&gt;int[] array = {3,5}; - this is also how you can initialize an array (along with ..=new int[]{3,5};), but only &lt;b&gt;if it is in same line as declaration&lt;/b&gt;!&lt;/li&gt;&lt;li&gt;it is possible to &lt;b&gt;override &lt;/b&gt;a protected method with a &lt;b&gt;public&lt;/b&gt;; if the method is not protected but &lt;b&gt;private&lt;/b&gt;, there is no compiler error, and the two are &lt;b&gt;completely separate&lt;/b&gt;;&lt;/li&gt;&lt;li&gt;writing super() in public F() {&amp;nbsp;super();... is optional, &lt;b&gt;super(); will be invoked anyway (first)&amp;nbsp;&lt;/b&gt;if no super is invoked manually&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;java.lang.Error&lt;/b&gt;:&amp;nbsp;&lt;i&gt;An Error is a subclass of Throwable that indicates serious problems that a reasonable application should &lt;b&gt;not &lt;/b&gt;try to catch.&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;RuntimeException &lt;/b&gt;is thrown by both JVM and developer, &lt;b&gt;Error &lt;/b&gt;is thrown by JVM, both are &lt;b&gt;not required &lt;/b&gt;to be caught&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Java has fu**ing &lt;b&gt;GOTO statements &lt;/b&gt;- what the hell?!&amp;nbsp;http://www.java-examples.com/java-continue-statement-label-example&lt;/li&gt;&lt;li&gt;int x = 6, j=8; - almost forgot this &lt;b&gt;multiple assigment syntax; &lt;/b&gt;int i, &lt;strike&gt;int &lt;/strike&gt;j; - wrong, int i,j; - good&lt;/li&gt;&lt;li&gt;&lt;b&gt;this loop&lt;/b&gt;: do {....}while(condition);&lt;/li&gt;&lt;li&gt;&lt;strike&gt;for(int i=0;i&amp;lt;3;){ &lt;/strike&gt;&lt;b&gt;&lt;strike&gt;means same as&amp;nbsp;for(int i=0;i&amp;lt;3;i++)!!!&lt;/strike&gt;&lt;span style="color: red;"&gt; WRONG&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;there is such class as &lt;b&gt;java.time.LocalDate&lt;/b&gt;, with a &lt;b&gt;static method&lt;/b&gt;: of(int year, &lt;b&gt;java.time.Month &lt;/b&gt;month, int dayOfMonth), which works predicably, throwing&amp;nbsp;DateTimeException if the input is messed up; &lt;b&gt;months numbered from 1&lt;/b&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" height="328" src="https://1.bp.blogspot.com/-z4wf7b6ELoU/Vva-x1VePKI/AAAAAAAACWo/Mj2eTTrmxQUqTzvP0OXBsEQUcNrjPItgQ/s640/localdate.png" width="640" /&gt;&lt;a href="https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html" target="_blank"&gt;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in lambda variations - &lt;span style="background-color: #fff2cc;"&gt;if {} are used, &lt;b&gt;return &lt;/b&gt;must be used&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Autoboxing&lt;/b&gt; (int&amp;lt;-&amp;gt;Integer) works for collections but &lt;b&gt;not &lt;/b&gt;for inferring predicates;&lt;/li&gt;&lt;li&gt;color=color in constructor works of course, except it does nothing, as "this." is missing&lt;/li&gt;&lt;li&gt;about interface:&amp;nbsp;&lt;b&gt;default method and normal interface method &lt;/b&gt;also do not combine well when implementing 2 interfaces with same method signature (compilation error)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;Chapter 1 Java Building Blocks (83% correct on the test)&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;a &lt;b&gt;method &lt;/b&gt;has input &lt;b&gt;parameters&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;/** &lt;/b&gt;is &lt;b&gt;Javadoc comment&lt;/b&gt;, and /* is normal comment&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;the &lt;b&gt;Java process &lt;/b&gt;is managed by &lt;b&gt;JVM &lt;/b&gt;and within this process the &lt;b&gt;static void main's code&amp;nbsp;&lt;/b&gt;is executed; &lt;b&gt;JVM &lt;/b&gt;allocates the &lt;b&gt;memory&lt;/b&gt;, &lt;b&gt;CPU&lt;/b&gt;, &lt;b&gt;file access&lt;/b&gt;, etc.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Starting a Java program: &lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;$ javac com/bla/Zoo.java &lt;br /&gt;$ java com.bla.Zoo&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;where Zoo has static void main of course (&lt;b&gt;JDK required for javac, for java only JRE&lt;/b&gt;); if &lt;b&gt;main is missing &lt;/b&gt;the &lt;b&gt;process &lt;/b&gt;with throw exception; if &lt;b&gt;main is wrong signature &lt;/b&gt;the &lt;b&gt;Java &lt;/b&gt;will throw &lt;b&gt;exception&lt;/b&gt;; &lt;b&gt;args[0] is not the program name &lt;/b&gt;but &lt;b&gt;first input arg&lt;/b&gt;; if an input arg has &lt;b&gt;a space&lt;/b&gt;, &lt;b&gt;wrap it in d-quotes&lt;/b&gt;;&amp;nbsp;&lt;/li&gt;&lt;li&gt;many imports does not slow down the program, compiler figures out what is actually needed&lt;/li&gt;&lt;li&gt;&lt;b&gt;java.lang.*&lt;/b&gt; is &lt;b&gt;automatically imported&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;asterisk&lt;/b&gt;&amp;nbsp;in package import &lt;b&gt;does not import child packages&lt;/b&gt;&lt;/li&gt;&lt;li&gt;if there is class &lt;b&gt;name conflict in 2 imported packages, you get compilation error&lt;/b&gt;: &lt;i&gt;The type ... is ambiguous&lt;/i&gt;, but it is ok, if you point to one name explicitly (e.g. java.util.Date and java.sql.*); if both are &lt;b&gt;explicit but collide&lt;/b&gt;, you get another compilation error: &lt;i&gt;The import ... collides with another import ...&lt;/i&gt;&lt;/li&gt;&lt;li&gt;{..} directly in a class is called&lt;span style="background-color: #fff2cc;"&gt; &lt;b&gt;instance initilalizer &lt;/b&gt;&lt;/span&gt;(may be static or not); instance initilalizer is also a &lt;b&gt;code block&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;order of initialization: fields &lt;/b&gt;and &lt;b&gt;instance initializer &lt;/b&gt;blocks are run in the order they appear in the file, and constructor at the end&lt;/span&gt;&lt;/li&gt;&lt;li&gt;the opposite of &lt;b&gt;primitive type &lt;/b&gt;is called &lt;b&gt;reference type&lt;/b&gt;&lt;/li&gt;&lt;li&gt;there is &lt;b&gt;eight primitive types: &lt;/b&gt;&lt;span style="background-color: #fff2cc;"&gt;byte (from -128 to 127), short, int, long: 8, 16, 32, 64-bit integral; float, double: 32, 64-bit floating-point(=decimal); char: 16-bit Unicode&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;int num;&amp;nbsp;&lt;/b&gt;- and &lt;b&gt;the 32 bits is already allocated &lt;/b&gt;by Java&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;number formats:&amp;nbsp;&lt;b&gt;octal&lt;/b&gt;:&lt;b&gt; &lt;/b&gt;starts with 0, e.g. 017, &lt;b&gt;hexadecimal&lt;/b&gt;: starts with 0x or 0X, e.g. 0xFF, &lt;b&gt;binary&lt;/b&gt;: starts with 0b or 0B, e.g. 0b10&lt;/span&gt;&lt;/li&gt;&lt;li&gt;from Java 7 &lt;b&gt;you can add underscores to numbers&lt;/b&gt;, to make them easier to read, e.g. 1_000_000, or 1_00_0_000 :P but not at beginning/end/touching the decimal point&lt;/li&gt;&lt;li&gt;instance variable = field, class variable = static field&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;objects &lt;/b&gt;are stored on the &lt;b&gt;heap, &lt;/b&gt;references may be&lt;/span&gt;&lt;/li&gt;&lt;li&gt;System.gc() is only a &lt;b&gt;suggestion &lt;/b&gt;to run gc, not an order&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;object is eligible for gc &lt;b&gt;also &lt;/b&gt;if &lt;b&gt;all references to it have gone out of scope&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;they claim that "&lt;b&gt;Java prevents memory leaks&lt;/b&gt;", ok good to remember&lt;/li&gt;&lt;li&gt;they say also that it is &lt;b&gt;secure &lt;/b&gt;because it runs inside JVM&lt;/li&gt;&lt;li&gt;double values do not have to have .0, e.g. &lt;b&gt;double d = 98;&lt;/b&gt; is ok! (it's called &lt;b&gt;upcasting&lt;/b&gt;), same for &lt;b&gt;float&lt;/b&gt;!&lt;/li&gt;&lt;li&gt;even though Java 8 has functional stuff, it's stil an &lt;b&gt;OO language&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;Chapter 2 Operators and Statements (70% correct on the test)&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;three types of operators: &lt;b&gt;unary&lt;/b&gt;, &lt;b&gt;binary&lt;/b&gt;, &lt;b&gt;ternary&lt;/b&gt;, depending to how many operands they can be applied (1, 2, or 3)&lt;/li&gt;&lt;li&gt;order of &lt;b&gt;operator precedence &lt;/b&gt;(most weird ones are not required for this exam):&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;i++, i--&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;++i, --i&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;unary +, -, !&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;*, /, %&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;+, -&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&amp;lt;&amp;lt;, &amp;gt;&amp;gt;, &amp;gt;&amp;gt;&amp;gt; (shift operators)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=, instanceof (relational operators)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;==, !=&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&amp;amp;, ^, | (logical operators)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&amp;amp;&amp;amp;, ||&amp;nbsp;(short circuit logical operators)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;ternary a ? b: c&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;=, +=, -=, *=, /=, %=, &amp;amp;=, ^=, !=, &amp;lt;&amp;lt;=, &amp;gt;&amp;gt;=, &amp;gt;&amp;gt;&amp;gt;= (assignment operators)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;int t = 11/3 = 3! (floor)&lt;/li&gt;&lt;li&gt;&lt;b&gt;numeric promotion&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;integer multiplied by double is type double&lt;/li&gt;&lt;li&gt;numeric promotion occurs actually before the operation, for any operator&lt;/li&gt;&lt;li&gt;&lt;b&gt;short&amp;nbsp;multiplied&amp;nbsp;by short is integer &lt;/b&gt;(same for char) for binary operators&lt;/li&gt;&lt;ul&gt;&lt;li&gt;but short t =9, g=2; t *= g; works :) - use of compound assignment, casts automatically &lt;b&gt;after&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;blockquote class="tr_bq" style="clear: both; text-align: center;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-sI_U_czH15k/VvbJAf_AhBI/AAAAAAAACW4/gWHMZ9IWoOEQtDfqIsnnYHpwK0UD8HedQ/s1600/conversion.png" /&gt;&lt;/blockquote&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;(short)1921222 = 20678 - because &lt;b&gt;overflow &lt;/b&gt;happened&lt;/li&gt;&lt;li&gt;int y = (x=3); - this is &lt;b&gt;correct&lt;/b&gt;, and the&amp;nbsp;&lt;b&gt;value &lt;/b&gt;is 3;&lt;/li&gt;&lt;li&gt;the boolean operator ^ means &lt;b&gt;exclusive or&lt;/b&gt;!&lt;/li&gt;&lt;li&gt;&lt;b&gt;5 == 5.0 is true &lt;/b&gt;(promotion)&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;Java statement is &lt;b&gt;complete unit of execution, terminated by semicolon&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;loops, if, are called &lt;b&gt;control flow statements&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;watch out for &lt;/b&gt;tricky &lt;b&gt;indentation!&lt;/b&gt;&lt;/li&gt;&lt;li&gt;the a ? b : c is also doing &lt;b&gt;short circuiting&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;switch&lt;/b&gt;&amp;nbsp;supports: int, byte, short, char, their wrappers, enums and strings &lt;/span&gt;(some since Java 7), &lt;b&gt;no long&lt;/b&gt;, &lt;b&gt;no boolean&lt;/b&gt;! and they must be either constants (e.g. literals) or &lt;b&gt;final&lt;/b&gt;&lt;/li&gt;&lt;li&gt;do-while loop &lt;b&gt;guarantees that the statement will be executed at least once, &lt;/b&gt;on contrary to the while loop&lt;/li&gt;&lt;li&gt;the for loop&amp;nbsp;consists of:&lt;span style="background-color: #fff2cc;"&gt; initialization, booleanExpression and updateStatement&lt;/span&gt;; &lt;b&gt;initialization &lt;/b&gt;and&amp;nbsp;&lt;b&gt;updateStatement&amp;nbsp;&lt;/b&gt;may contain &lt;b&gt;mutliple terms&lt;/b&gt;, separated by &lt;b&gt;commas &lt;/b&gt;(the variables in initialization block have to be of same &lt;b&gt;type&lt;/b&gt;,&lt;span style="background-color: #fff2cc;"&gt; variables in the updateStatement &lt;b&gt;may not reference each other&lt;/b&gt;)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;for (;;) is correct, it's an infinite loop&lt;/li&gt;&lt;li&gt;the variable declared in the initialization of the loop is &lt;b&gt;scoped only inside the loop&lt;/b&gt;&lt;/li&gt;&lt;li&gt;LABEL: is an optional&amp;nbsp;&lt;b&gt;pointer to the head of a statement&lt;/b&gt;; does not have to uppercase; can be used after &lt;b&gt;break&lt;/b&gt;: break LABEL;or &lt;b&gt;continue&lt;/b&gt;:&amp;nbsp;continue LABEL;&lt;/li&gt;&lt;li&gt;&lt;b&gt;continue &lt;/b&gt;- finish execution only of current loop;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;there is no &lt;b&gt;continue &lt;/b&gt;or &lt;b&gt;break &lt;/b&gt;in if!&lt;/span&gt;&lt;/li&gt;&lt;li&gt;byte y = (int)short1 + short2 - will &lt;b&gt;not work&lt;/b&gt;, bracket missing!&lt;/li&gt;&lt;li&gt;in &lt;b&gt;do-while &lt;/b&gt;- watch out for &lt;b&gt;variable&amp;nbsp;scope&lt;/b&gt;!!&lt;/li&gt;&lt;li&gt;the == operator &lt;b&gt;will not compile &lt;/b&gt;if the compared objects are of different type!&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-7a35UhKEdUE/VvqtkrEvT4I/AAAAAAAACXY/64GYQci049USidfCys4sIz2WobClpHaqg/s1600/incompatibleEquals.png" /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;Chapter 3 Core Java APIs (69% correct on the test, 23/33 questions)&lt;/h4&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;API stands for &lt;i&gt;Application Programming Interface&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;String&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;System.out.println(1 + 2 + "c"); //outputs "3c" (order of operators)&lt;/li&gt;&lt;li&gt;&lt;b&gt;Strings are immutable &lt;/b&gt;(so also &lt;b&gt;final&lt;/b&gt;), so doing operations on them always returns a new String&lt;/li&gt;&lt;li&gt;str.&lt;b&gt;indexOf&lt;/b&gt;() - returns first index of occurence, or -1&lt;/li&gt;&lt;li&gt;str.&lt;b&gt;substring&lt;/b&gt;(inclusively, exclusively)&lt;/li&gt;&lt;li&gt;str.&lt;b&gt;startsWith&lt;/b&gt;() and str.&lt;b&gt;endsWith&lt;/b&gt;() is case sensitive&lt;/li&gt;&lt;li&gt;&lt;b&gt;String implements CharSequence&lt;/b&gt;&lt;/li&gt;&lt;li&gt;str.&lt;b&gt;replace&lt;/b&gt;(oldChar, newChar) or oldSequence, newSequence - replaces &lt;b&gt;all occurences&lt;/b&gt;!&lt;/li&gt;&lt;li&gt;StringBuilder=new &lt;b&gt;StringBuilder&lt;/b&gt;(10); // initial capacity, default 16&lt;/li&gt;&lt;li&gt;strBuilder.&lt;b&gt;charAt&lt;/b&gt;(), .&lt;b&gt;indexOf&lt;/b&gt;(), .&lt;b&gt;length&lt;/b&gt;(), .&lt;b&gt;substring&lt;/b&gt;(); substring returns a String&lt;/li&gt;&lt;li&gt;strBuilder.&lt;b&gt;insert&lt;/b&gt;(offset, string)&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;strBuilder.&lt;b&gt;delete&lt;/b&gt;(startInc, endExc), .&lt;b&gt;deleteAt&lt;/b&gt;()&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;strBuilder.&lt;b&gt;reverse&lt;/b&gt;()&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;StringBuffer &lt;/b&gt;is just an old, thread-safe, slow version of StringBuilder&lt;/li&gt;&lt;li&gt;System.out.println(stringBuilder); will actually convert it to String&lt;/li&gt;&lt;li&gt;watch out for stupid spaces in strings, like " bla" :S&lt;/li&gt;&lt;li&gt;concatenated literals from string pool is a new string and &lt;b&gt;will not be "==" equal &lt;/b&gt;to same string from string pool&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Array&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;An &lt;b&gt;array &lt;/b&gt;is an area of memory on the &lt;b&gt;heap &lt;/b&gt;with space for a designated number of elements&lt;/span&gt;; String is implemented as an array&lt;/li&gt;&lt;li&gt;int[] numbers = new int[3];&lt;/li&gt;&lt;li&gt;int[] numbers = new int[]{14,12,53};&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;int[] numbers = new int{14,12,53};&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;int [] numbers = new int[3];&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;int numbers[] = new int[3];&lt;/span&gt;&lt;/li&gt;&lt;li&gt;numbers is a &lt;b&gt;reference variable &lt;/b&gt;- it &lt;b&gt;points &lt;/b&gt;to the array object&lt;/li&gt;&lt;li&gt;int a[], b; //this is one int array and one int, and is correct!&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;[Ljava.lang.String;@160bc7c0 - &lt;b&gt;array &lt;/b&gt;of&lt;b&gt; reference type&amp;nbsp;&lt;/b&gt;java.lang.String and&amp;nbsp;160bc7c0&amp;nbsp;&lt;b&gt;hash code&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Arrays of Strings &lt;b&gt;does not allocate space for strings&lt;/b&gt;. Only allocates space for references to Strings.&lt;/li&gt;&lt;li&gt;Arrays will let you cast themselves and put inside it whatever matches the declared type - but gives no shit about runtime errors (ArrayStoreException is thrown on an attempt to store a an object that does not match the &lt;b&gt;initialized &lt;/b&gt;type)&lt;/li&gt;&lt;li&gt;java.util.Arrays.&lt;b&gt;sort&lt;/b&gt;(array)&lt;/li&gt;&lt;li&gt;java.util.Arrays.&lt;b&gt;binarySearch&lt;/b&gt;(array, what) - works only for &lt;b&gt;sorted array&lt;/b&gt;, for non sorted the result will be random; &lt;b&gt;if the element is not found&lt;/b&gt;, this method returns (-1*i)-1, where i is the index where a new element would have to be put to match&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;int[] vars4 [], space [][] -&lt;b&gt; this is one 2D and one 3D array&lt;/b&gt;!&lt;/span&gt;&lt;/li&gt;&lt;li&gt;int[][] differentSize = {{2},{4,6},{1,2,5,7}}&lt;/li&gt;&lt;ul&gt;&lt;li&gt;int[][] args = new int[4][]; args[0] = new int[5]; args[1] = new int[3];&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;char[]c - compiles (no space)&lt;/li&gt;&lt;li&gt;final int[][] java = new int[][]; - does not &lt;b&gt;compile! &lt;/b&gt;cannot have more dimensions before first one is specified (only the first one needs to be specified)!&lt;img border="0" src="https://1.bp.blogspot.com/-44e7d0jNrwo/Vvqw5guPBPI/AAAAAAAACXk/6xxbPMmw1QMtiA3mEaStrNS-JfN9B_KcA/s1600/arrays.png" style="text-align: center;" /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;ArrayList&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;new ArrayList(10); //&lt;b&gt;capacity&lt;/b&gt;&lt;/li&gt;&lt;li&gt;new ArrayList(&lt;b&gt;anotherList&lt;/b&gt;);&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;Object&amp;nbsp;&lt;/b&gt;arrayList.&lt;b&gt;remove&lt;/b&gt;(index);&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;boolean &lt;/b&gt;arrayList.&lt;b&gt;remove&lt;/b&gt;(object); //removes &lt;b&gt;first &lt;/b&gt;matching&lt;/span&gt;&lt;/li&gt;&lt;li&gt;arrayList.&lt;b&gt;removeIf&lt;/b&gt;(condition) - new! Java 8!&lt;/li&gt;&lt;li&gt;ReplaceObject &lt;b&gt;set&lt;/b&gt;(index, object)&lt;/li&gt;&lt;li&gt;.&lt;b&gt;isEmpty&lt;/b&gt;(), .&lt;b&gt;clear&lt;/b&gt;()&lt;/li&gt;&lt;li&gt;.&lt;b&gt;contains&lt;/b&gt;() - calls &lt;b&gt;equals on elements&lt;/b&gt;!&lt;/li&gt;&lt;li&gt;.&lt;b&gt;equals&lt;/b&gt;() - deep comparing&lt;/li&gt;&lt;li&gt;list.&lt;b&gt;toArray&lt;/b&gt;() converts not to ArrayList, but something that &lt;b&gt;does not let you remove&lt;/b&gt;() - it's a fixed size version of a list&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-up1TzhXy1r4/Vvqx82jfVUI/AAAAAAAACXs/5NzEiB3XLlYwbsMMYVzioUwmQOUzVXuFA/s1600/toArray.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="263" src="https://2.bp.blogspot.com/-up1TzhXy1r4/Vvqx82jfVUI/AAAAAAAACXs/5NzEiB3XLlYwbsMMYVzioUwmQOUzVXuFA/s640/toArray.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;Collections.&lt;b&gt;sort&lt;/b&gt;(list)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Wrappers for Primitives&lt;/b&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;parseInt&lt;/b&gt;() returns a &lt;b&gt;primitive&lt;/b&gt;, while &lt;b&gt;valueOf&lt;/b&gt;() returns a &lt;b&gt;wrapper class&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;autoboxing &lt;/b&gt;- since Java 5 primitives are &lt;b&gt;automatically &lt;/b&gt;converted to wrappers, if needed (except predicates)&lt;/li&gt;&lt;li&gt;listOfIntegers.&lt;b&gt;add&lt;/b&gt;(null) - is legal! but unboxing it into int will cause NullPointerException (as it's not an int), meaning this: &lt;b&gt;int h = listOfIntegers.get(0); &lt;/b&gt;btw adding &lt;b&gt;null &lt;/b&gt;is no longer called autoboxing&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-nHh4tDjbLtA/VvqzFwfGdQI/AAAAAAAACX4/yB-cDQ-49lUquDs-RothhnX-6ZmZAvEMA/s1600/autoboxing.png" /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;list.&lt;b&gt;remove&lt;/b&gt;(2) - will rather treat 2 as index, not object - as int is closer to int than Integer&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Dates and Times&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;completely different in Java 8, &lt;b&gt;old way is not on the exam &lt;/b&gt;(yuppi!!)&lt;/li&gt;&lt;li&gt;import java.time.*&lt;/li&gt;&lt;li&gt;time zones are &lt;b&gt;out of scope &lt;/b&gt;(yaaay!!)&lt;/li&gt;&lt;li&gt;&lt;b&gt;LocalDate &lt;/b&gt;- date without time and timezone, use e.g. for birthday&lt;/li&gt;&lt;ul&gt;&lt;li&gt;LocalDate.now();&lt;/li&gt;&lt;li&gt;the output &lt;b&gt;depends on the locale &lt;/b&gt;where you are, but&lt;b&gt; in exam US format is used&lt;/b&gt;: 2015-01-20&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;LocalDate.&lt;b&gt;of&lt;/b&gt;(2015, Month.JANUARY, 1), same as LocalDate.&lt;b&gt;of&lt;/b&gt;(2015, 1, 1)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;LocalTime &lt;/b&gt;- time without timezone and without date&lt;/li&gt;&lt;ul&gt;&lt;li&gt;US output: 12:45:16:245&lt;/li&gt;&lt;li&gt;LocalDateTime.&lt;b&gt;of&lt;/b&gt;(6, 15);&lt;/li&gt;&lt;li&gt;LocalDateTime.&lt;b&gt;of&lt;/b&gt;(6, 15, 30);&lt;/li&gt;&lt;li&gt;LocalDateTime.&lt;b&gt;of&lt;/b&gt;(6, 15, 30, 234); - last one is nanoseconds&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;LocalDateTime &lt;/b&gt;- both date and time but without timezone&lt;/li&gt;&lt;ul&gt;&lt;li&gt;US output: 2015-01-20T12:45:16:245&lt;/li&gt;&lt;li&gt;Java uses T to separate date from time when converting it to a String&lt;/li&gt;&lt;li&gt;LocalDateTime.&lt;b&gt;of&lt;/b&gt;(2015, Month.JANUARY, 16, 15, 30);&lt;/li&gt;&lt;li&gt;LocalDateTime.&lt;b&gt;of&lt;/b&gt;(date, time);&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Oracle recommends&lt;b&gt; avoiding time zones &lt;/b&gt;unless you really need them (yaay!)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;btw, ZonedDateTime is for timezones&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;new LocalDate(); - &lt;b&gt;does not compile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;DateTimeException &lt;/b&gt;if the numbers are invalid&lt;/li&gt;&lt;li&gt;in the past - Date class represented both date and time, always; moths started from 0; actually Calendar was newer way, but still it's old :P and long to use..&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Manipulating Date and Time&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;local&lt;b&gt;Date&lt;/b&gt;.&lt;b&gt;plusDays&lt;/b&gt;(2); .&lt;b&gt;plusWeeks&lt;/b&gt;(), ... - &lt;b&gt;immutable&lt;/b&gt;!&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" height="172" src="https://2.bp.blogspot.com/-9lUlQTb1wJM/Vvqz1TQ1d-I/AAAAAAAACX8/lOtGhtc1Bos504c6zBoW6eTBBpqSnoNog/s640/immutable.png" width="640" /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;local&lt;b&gt;Time&lt;/b&gt;.&lt;b&gt;minusHours&lt;/b&gt;(3);, ... - &lt;b&gt;notice, LocalDate does not operate on hours&lt;/b&gt;, and vice versa!&lt;/li&gt;&lt;li&gt;LocalDate is &lt;b&gt;immutable&lt;/b&gt;! - chain those methods&lt;/li&gt;&lt;li&gt;LocalDate.toEpochDay() - number of days since Jan 1 1970&lt;/li&gt;&lt;li&gt;LocalDateTime.toEpochTime() - number of seconds&lt;/li&gt;&lt;li&gt;LocalTime.toEpo... - does not exist!&lt;/li&gt;&lt;li&gt;&lt;b&gt;Period&lt;/b&gt;.&lt;b&gt;ofMonths&lt;/b&gt;(1); localDate.&lt;b&gt;plus&lt;/b&gt;(period); for LocalTime it throws UnsupportedTemporarTypeException&lt;/li&gt;&lt;li&gt;&lt;b&gt;Period&lt;/b&gt;.&lt;b&gt;of&lt;/b&gt;(1,0,7) - every year and 7 days&lt;/li&gt;&lt;li&gt;chaining does not take any effect, only last will take effect (compiler warns)&lt;/li&gt;&lt;li&gt;&lt;b&gt;Duration &lt;/b&gt;is for hours, minutes and seconds, but it's not on the exam&lt;/li&gt;&lt;li&gt;localDate.&lt;b&gt;getDayOfWeek&lt;/b&gt;(); //MONDAY&lt;/li&gt;&lt;li&gt;localDate.&lt;b&gt;getDayOfYear&lt;/b&gt;(); //30&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Formatting Date and Time&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;java.time.format.&lt;b&gt;DateTimeFormatter&lt;/b&gt;&lt;/li&gt;&lt;li&gt;localDate.&lt;b&gt;format&lt;/b&gt;(DateTimeFormatter.&lt;b&gt;ISO_LOCAL_DATE&lt;/b&gt;); //2020-02-20&lt;/li&gt;&lt;li&gt;DateTimeFormatter.&lt;b&gt;ISO_LOCAL_TIME &lt;/b&gt;//11:12:34&lt;/li&gt;&lt;li&gt;DateTimeFormatter.&lt;b&gt;ISO_LOCAL_DATE_TIME &lt;/b&gt;//2020-02-20T11:12:34&lt;/li&gt;&lt;li&gt;DateTimeFormatter.&lt;b&gt;ofLocalizedDate&lt;/b&gt;(FormatStyle.SHORT).&lt;b&gt;format&lt;/b&gt;(dateTime); // 1/20/20 - notice that also has to match, cannot have a time type for localDate (exception)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;date formatter &lt;/b&gt;can format &lt;b&gt;dateTime&lt;/b&gt;, but&lt;b&gt; dateTime formatter &lt;/b&gt;cannot format &lt;b&gt;date &lt;/b&gt;(exception)&lt;/li&gt;&lt;li&gt;in other words, formatter is only confused with missing data, it's super fine with too much data ;)&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;so can use date.&lt;b&gt;format&lt;/b&gt;(formatter) as well as formatter.&lt;b&gt;format&lt;/b&gt;(date)&lt;/li&gt;&lt;li&gt;FormatStyle.&lt;b&gt;SHORT&lt;/b&gt;: 1/20/20 11:12 AM&lt;/li&gt;&lt;li&gt;FormatStyle.&lt;b&gt;MEDIUM&lt;/b&gt;: Jan 20, 2020 11:12:34 AM&lt;/li&gt;&lt;li&gt;DateTimeFormatter.&lt;b&gt;ofPattern&lt;/b&gt;("MMMM dd, yyyy, hh:mm"); //January 20, 2020, 11:12 - but remember, also has to match with the formatted type!&lt;/li&gt;&lt;li&gt;in the past - SimpleDateFormat, same stuff&lt;/li&gt;&lt;li&gt;be careful, e.g. DateTimeFormatter.&lt;b&gt;ofLocalizedTime &lt;/b&gt;outputs only time, even though the formatter is for both dates and times&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Parsing Date and Time&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;LocalDate.&lt;b&gt;parse&lt;/b&gt;(string, formatter);&lt;/li&gt;&lt;li&gt;LocalDate.&lt;b&gt;parse&lt;/b&gt;(string); - uses default&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;Chapter 4 Methods And Encapsulation (48% correct, but very very fed up)&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;the difference between &lt;b&gt;default&lt;/b&gt; (i.e., when you don't specify any)&lt;b&gt;&amp;nbsp;&lt;/b&gt;and &lt;b&gt;protected &lt;/b&gt;access - default is only available for the classes in same package, knows nothing about inheritance&lt;/li&gt;&lt;li&gt;&lt;b&gt;optional specifiers&lt;/b&gt; are: static, abstract, synchronized (out of scope), native&amp;nbsp;(out of scope), strictfp (out of&amp;nbsp;scope), and they come&lt;b&gt; between &lt;/b&gt;the access modifier and the return type&lt;/li&gt;&lt;li&gt;&lt;b&gt;_ and $ are allowed &lt;/b&gt;in method name, cannot start with a number though&lt;/li&gt;&lt;li&gt;&lt;b&gt;a vararg must be the last parameter &lt;/b&gt;in the parameter list; so only 1 is allowed; if it's absent it means it is an array of length 0; except you have passed &lt;b&gt;null explicitly&lt;/b&gt; (works even for primitive types)&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-sDweNGNBAZE/VxOgJEd9gaI/AAAAAAAACaU/7g17kxtZ4Gossw7XC1fQsJiqKFAG7jdrQCLcB/s1600/varargs.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-sDweNGNBAZE/VxOgJEd9gaI/AAAAAAAACaU/7g17kxtZ4Gossw7XC1fQsJiqKFAG7jdrQCLcB/s1600/varargs.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;it's &lt;b&gt;not allowed to limit the visibility in subclass&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-y1IzFPU9_lU/VxO5tvsYvxI/AAAAAAAACbQ/91XLaHTv1usqpXMPDoRJKQJlX6EtQjI3QCLcB/s1600/visibility.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-y1IzFPU9_lU/VxO5tvsYvxI/AAAAAAAACbQ/91XLaHTv1usqpXMPDoRJKQJlX6EtQjI3QCLcB/s1600/visibility.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;if the base class has&amp;nbsp;&lt;b&gt;private methods&lt;/b&gt;, to its children they don't exist; &lt;b&gt;redeclaring them is not overriding&lt;/b&gt;&lt;/li&gt;&lt;li&gt;[my own conclusion] &lt;b&gt;protected does not mean &lt;/b&gt;that subclass can access protected members of an object belonging to its supertype; it means that it inherits the protected&amp;nbsp;members&amp;nbsp;of its parent class,&amp;nbsp;but &lt;b&gt;only in context of itself&lt;/b&gt;; it can access the&amp;nbsp;protected&amp;nbsp;members&amp;nbsp;of another object &lt;b&gt;only if it is in the same package&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-bcI3-afheI8/VxOrNmEnVvI/AAAAAAAACbA/K_ZjV6u9YFEsEOuvpadqoZveWdbx69_sACLcB/s1600/visibility3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img alt="" border="0" src="https://4.bp.blogspot.com/-bcI3-afheI8/VxOrNmEnVvI/AAAAAAAACbA/K_ZjV6u9YFEsEOuvpadqoZveWdbx69_sACLcB/s1600/visibility3.png" title="" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;span style="font-size: 12.8px;"&gt;bla() is protected in A, &lt;/span&gt;A and B are in different packages&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;static variables &lt;/b&gt;vs &lt;b&gt;static methods &lt;/b&gt;- a copy of &lt;b&gt;static variable &lt;/b&gt;is copied to each class, the code of the &lt;b&gt;static method &lt;/b&gt;not&lt;/li&gt;&lt;li&gt;&lt;b&gt;static methods &lt;/b&gt;are used e.g. in utility classes where they don't require object's state, or for sharing state among all instances, e.g. counter&lt;/li&gt;&lt;li&gt;&lt;b&gt;static methods &lt;/b&gt;can be accesses &lt;b&gt;even after a null has been assigned &lt;/b&gt;to the object reference! &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;k=null; &lt;/span&gt;and next &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;k.callStaticMethod()&lt;/span&gt; - works!&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-LG_jM6NjIjA/VxvgVjAu4jI/AAAAAAAACbs/DcUT94ENv34oIaL6ep_WpBa3G5v1WnrNgCLcB/s1600/nullstatic.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-LG_jM6NjIjA/VxvgVjAu4jI/AAAAAAAACbs/DcUT94ENv34oIaL6ep_WpBa3G5v1WnrNgCLcB/s1600/nullstatic.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;non-static method can call a static method&lt;/b&gt;, only vice versa is not allowed (watch out for tricky question)&lt;/li&gt;&lt;li&gt;a &lt;b&gt;constant &lt;/b&gt;= a &lt;b&gt;static final variable&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;final &lt;/b&gt;only means that that variable cannot be reassigned, but if it is a list for example, we can add elements (call methods)&lt;/li&gt;&lt;li&gt;&lt;b&gt;static initializer&lt;/b&gt;, is the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;static {}&lt;/span&gt; block, directly in the class; it &lt;b&gt;runs when the class is first used&lt;/b&gt;; and &lt;b&gt;here (and only here) the final variables can be reassigned! &lt;/b&gt;(but &lt;b&gt;not more than once&lt;/b&gt;)&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;span style="background-color: white;"&gt;&lt;b&gt;static import &lt;/b&gt;is declared&lt;/span&gt;&lt;b&gt;&lt;span style="background-color: white;"&gt;: &lt;/span&gt;&lt;span style="background-color: yellow;"&gt;import static&lt;/span&gt;&lt;/b&gt; &lt;span style="background-color: #fff2cc;"&gt;java.utils.Arrays.asList&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: white;"&gt;; in case of conflicts local have precedence; and if two imports collide there's compilation error&lt;/span&gt;&lt;/li&gt;&lt;li&gt;static import &lt;b&gt;does not import parents &lt;/b&gt;:)&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;Java &lt;b&gt;is a pass-by-value language&lt;/b&gt;, not by reference;&lt;/span&gt;&lt;span style="background-color: white;"&gt; &lt;/span&gt;it means that changing assignments inside a method has no effect outside the method&lt;/li&gt;&lt;li&gt;&lt;b&gt;access modifiers &lt;/b&gt;and &lt;b&gt;exception lists&amp;nbsp;&lt;/b&gt;are &lt;b&gt;irreleveant to method overloading&lt;/b&gt;; overloading will not compile when the compiler cannot figure out the difference between 2 methods on calling,&amp;nbsp;e.g.:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;does not compile &lt;/b&gt;when there's:&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;different return type&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;static and non static&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;varargs and array&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;compiles &lt;/b&gt;when there's&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;int and Integer &lt;/b&gt;- autoboxing is only done when is neccessary&lt;/li&gt;&lt;li&gt;&lt;b&gt;String &lt;/b&gt;and &lt;b&gt;Object&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;int &lt;/b&gt;and &lt;b&gt;long&lt;/b&gt;; even passing "123" to a method accepting long works&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;official &lt;b&gt;order of calling overloaded method&lt;/b&gt;:&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;exact match&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;larger primitive type&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;autoboxing&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;varargs&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;while trying to find an overload, &lt;b&gt;Java does max one conversion&lt;/b&gt;, later is compilation error! E.g. calling a method accepting Long with an int argument causes a compilation error!&lt;/li&gt;&lt;li&gt;in constructor, when you write: &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;this.name = name; &lt;/span&gt;it works because local variable has priority&lt;/li&gt;&lt;li&gt;&lt;b&gt;default constructors &lt;/b&gt;are actually &lt;b&gt;generated while compiling&lt;/b&gt; (when applicable); the *.class file has them&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;a manually declared constructor that looks like &lt;b&gt;default constructor &lt;/b&gt;is &lt;b&gt;not called&lt;/b&gt; "default constructor" anymore&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;b style="background-color: #fff2cc;"&gt;constructor chaining&lt;/b&gt;&lt;span style="background-color: white;"&gt; - is the technique of caling one constructor from another, adding 1 parameter each time&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: white;"&gt;order of initialization:&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;initialize superclass (&lt;/b&gt;if present)&lt;/li&gt;&lt;li&gt;&lt;b&gt;static vars &lt;/b&gt;and &lt;b&gt;static initializers &lt;/b&gt;in order they appear&lt;/li&gt;&lt;li&gt;&lt;b&gt;instance variables &lt;/b&gt;and &lt;b&gt;instance initializers &lt;/b&gt;in order they appear&lt;/li&gt;&lt;li&gt;&lt;b&gt;constructor&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;the fact that &lt;b&gt;getters for boolean should begin with "is" &lt;/b&gt;is the official JavaBeans rule for naming conventions; same goes for the rest of the name (always camel cased name of the variable, case sensitive!)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;for some reason &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;getNumWings(){return numberWings;}&lt;/span&gt; was correct..&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;encapsulation &lt;/b&gt;vs &lt;b&gt;immutability - &lt;/b&gt;both prevent &lt;b&gt;uncontrolled changes&lt;/b&gt;; easiest way to achieve immutability is to move everything from setters to constructor (if there are mutable fields with getters, you have to defensive copy them, too)&lt;/li&gt;&lt;li&gt;&lt;b&gt;lambda expression &lt;/b&gt;is like an &lt;b&gt;anonymous method&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;a labmda expression can use&lt;/b&gt;: instance and static variables, and method and local parameters as long as it doesn't change them&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;functional interface &lt;/b&gt;- has exactly 1 method&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;public interface Predicate&amp;lt;T&amp;gt;{boolean test(T t);} &lt;/span&gt;&lt;span style="background-color: #fff2cc; font-family: inherit;"&gt;(java.util.function.*)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ArrayList.removeIf(Predicate p)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;&lt;i&gt;&lt;b&gt;lenient &lt;/b&gt;-&amp;nbsp;permissive, merciful, or tolerant&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;&amp;nbsp;"&lt;b&gt;package private&lt;/b&gt;" access =&amp;nbsp;"&lt;b&gt;default&lt;/b&gt;" access !&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;methods can also be &lt;b&gt;final&lt;/b&gt;, don't forget this&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;&lt;b&gt;what happens with instance initializer of the class &lt;/b&gt;when &lt;/span&gt;&lt;span style="background-color: white; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;static void main()&lt;/span&gt;&lt;span style="background-color: white; font-family: inherit;"&gt; is called? nothing, they are not executed!&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;&lt;b&gt;static final &lt;/b&gt;variables must be set!&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;&lt;b&gt;short &lt;/b&gt;is bigger than &lt;b&gt;byte&lt;/b&gt; (8)!&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;it is &lt;b&gt;okay to have a method with the same name as the class name &lt;/b&gt;(and starting with a capital letter)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: white; font-family: inherit;"&gt;it's ok to refer to class variable in same class without the class name in front&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-lGrc-aO-2ZY/VxvjyzS1l8I/AAAAAAAACb4/UQzzR8UMadQAOe54OK_EnuiV7K5GcHUagCLcB/s1600/staticreference.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-lGrc-aO-2ZY/VxvjyzS1l8I/AAAAAAAACb4/UQzzR8UMadQAOe54OK_EnuiV7K5GcHUagCLcB/s1600/staticreference.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;Chapter 5 Class Design (45% correct)&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in top level classes only &lt;b&gt;public &lt;/b&gt;or &lt;b&gt;default &lt;/b&gt;access is allowed&lt;/li&gt;&lt;li&gt;&lt;b&gt;hiding static methods &lt;/b&gt;- when a static method is overridden, this is actually called &lt;b&gt;hiding&lt;/b&gt;, not overriding ;) ("&lt;b&gt;static&lt;/b&gt;"&lt;b&gt;&amp;nbsp;&lt;/b&gt;modifiers &lt;b&gt;must match&lt;/b&gt;!)&lt;/li&gt;&lt;li&gt;class/instance &lt;b&gt;variables are always hidden &lt;/b&gt;when extending&amp;nbsp;- &lt;b&gt;both &lt;/b&gt;instances exist in memory, within the child class object (and referring them &lt;b&gt;does not work &lt;/b&gt;like invoking methods&amp;nbsp;polymorphically)&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-IJim1zd-cIg/Vx6STvtYU2I/AAAAAAAACdQ/OTEQRaj6f8cEH-ueYvt_9drt_ElP59gagCLcB/s1600/hidingvars.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-IJim1zd-cIg/Vx6STvtYU2I/AAAAAAAACdQ/OTEQRaj6f8cEH-ueYvt_9drt_ElP59gagCLcB/s1600/hidingvars.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;private &lt;/b&gt;variables / static methods not being accessible in a subclass &lt;b&gt;is also called hiding&lt;/b&gt;! (so yes it happens always)&lt;/li&gt;&lt;li&gt;Java (still) implements &lt;b&gt;single &lt;/b&gt;inheritance (no inheriting from multiple classes), but &lt;b&gt;multiple level inheritance &lt;/b&gt;(arbitrarily many classes in inheritance hierarchy); as exception to the single inheritance, it allows &lt;b&gt;implementing multiple interfaces&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Java &lt;b&gt;compiler automatically inserts stuff &lt;/b&gt;like "extends java.lang.Object" or "super();" call in constructor&lt;/li&gt;&lt;li&gt;you can also access fields with &lt;b&gt;super&lt;/b&gt;, e.g. super.age&lt;/li&gt;&lt;li&gt;pay attention to the difference between &lt;b&gt;this &lt;/b&gt;and &lt;b&gt;this()&lt;/b&gt;, &lt;b&gt;super &lt;/b&gt;and &lt;b&gt;super()&lt;/b&gt;&lt;/li&gt;&lt;li&gt;you can &lt;b&gt;call super class' method &lt;/b&gt;by calling &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;SuperClassName.doSomething()&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;final &lt;/b&gt;methods cannot be &lt;b&gt;overridden &lt;/b&gt;or &lt;b&gt;hidden&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;exceptions &lt;/b&gt;in implementing classes can be more narrow or &lt;b&gt;missing(!)&lt;/b&gt;, but &lt;b&gt;not broader&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-FqwWc33syhA/Vx0M1ZkLjxI/AAAAAAAACcQ/i7Dhxxvty7UWlG3GZ0rrfHlr3THZ6HcRgCLcB/s1600/exceptions.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-FqwWc33syhA/Vx0M1ZkLjxI/AAAAAAAACcQ/i7Dhxxvty7UWlG3GZ0rrfHlr3THZ6HcRgCLcB/s1600/exceptions.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;covariant return type&lt;/b&gt; - in inheriting class the return type must be same or more narrow than in superclass' method&lt;/li&gt;&lt;li&gt;&lt;b&gt;abstract class and interface cannot be marked as final &lt;/b&gt;(of course, right..); same with &lt;b&gt;abstract &lt;/b&gt;method&lt;/li&gt;&lt;li&gt;an &lt;b&gt;abstract method cannot be private&lt;/b&gt;; same with &lt;b&gt;abstract class&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;interfaces &lt;/b&gt;are assumed to be &lt;b&gt;abstract&lt;/b&gt;, you can even specify them abstract:&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-yF2SDFMDPng/Vx6D7LsSPZI/AAAAAAAACco/MYUISr-Xb1QEHfVUgirJ1bKqAzwTsC3jACLcB/s1600/abstractInterface.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-yF2SDFMDPng/Vx6D7LsSPZI/AAAAAAAACco/MYUISr-Xb1QEHfVUgirJ1bKqAzwTsC3jACLcB/s1600/abstractInterface.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;interfaces &lt;/b&gt;are assumed to have only&amp;nbsp;&lt;b&gt;public &lt;/b&gt;or &lt;b&gt;default &lt;/b&gt;access&lt;/li&gt;&lt;li&gt;&lt;b&gt;interface&lt;/b&gt;'s variables are assumed to be &lt;b&gt;public&amp;nbsp;static final &lt;/b&gt;(so must be initialized, even if no &lt;b&gt;final &lt;/b&gt;is&amp;nbsp;explicitly written!)&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;b&gt;interface&lt;/b&gt;&lt;span style="font-weight: normal;"&gt;'s methods are assumed to be &lt;/span&gt;public &lt;strike&gt;abstract&lt;/strike&gt;&lt;/b&gt;&amp;nbsp;&lt;b&gt;&lt;u&gt;either abstract, static or default&lt;/u&gt; &lt;/b&gt;(since Java 8!)&lt;/li&gt;&lt;li&gt;on exam be careful with "&lt;i&gt;extending intefaces&lt;/i&gt;" and "&lt;i&gt;implementing abctract classes&lt;/i&gt;" (both wrong:P)&lt;/li&gt;&lt;li&gt;extending abstract classes and implementing (multiple) interfaces at the same time, what happens on &lt;b&gt;method clash&lt;/b&gt;:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;if &lt;b&gt;signatures match&lt;/b&gt;, no problem (!)&lt;/li&gt;&lt;li&gt;if not (and it's not an overload), &lt;b&gt;compilation error&lt;/b&gt;&amp;nbsp;:)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;unless, unless, &lt;b&gt;exactly one of them&lt;/b&gt; is marked as &lt;b&gt;default&lt;/b&gt; (Java 8)&lt;/li&gt;&lt;li&gt;okay, last chance :P also &lt;b&gt;more than one &lt;/b&gt;can be marked as default, but then all implementing classes must override at least&amp;nbsp;&lt;b&gt;all of them but one&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;default method &lt;/b&gt;- can be defined &lt;b&gt;only in interface &lt;/b&gt;and &lt;b&gt;has body&lt;/b&gt;; is &lt;b&gt;not &lt;/b&gt;assumed to be&lt;b&gt; abstract&lt;/b&gt;,&lt;b&gt; nor static&lt;/b&gt;,&lt;b&gt; nor final&lt;/b&gt;, always assumed to be&amp;nbsp;&lt;b&gt;public &lt;/b&gt;though&lt;/li&gt;&lt;ul&gt;&lt;li&gt;was introduced to keep &lt;b&gt;backward compatibility&lt;/b&gt; in Java 8&lt;/li&gt;&lt;li&gt;implementing classes can override but don't have to&lt;/li&gt;&lt;li&gt;they &lt;b&gt;require &lt;/b&gt;implementing class to be invoked (cannot invoke on the interface)&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-7FZK1PFjzCY/Vx6JrVidqlI/AAAAAAAACdA/NGhLxGYfSYg2Jl1HzUEkyBjdQKInYudkgCLcB/s1600/defaultmethod.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-7FZK1PFjzCY/Vx6JrVidqlI/AAAAAAAACdA/NGhLxGYfSYg2Jl1HzUEkyBjdQKInYudkgCLcB/s1600/defaultmethod.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li style="text-align: left;"&gt;&lt;b&gt;default method &lt;/b&gt;can be &lt;b&gt;redeclared &lt;/b&gt;as &lt;b&gt;abstract &lt;/b&gt;in extending interface/implementing abstract class!&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;static method of an interface &lt;/b&gt;- also new in Java 8&lt;/span&gt;&amp;nbsp;- just like a static method, but does&amp;nbsp;&lt;b&gt;not get inherited&lt;/b&gt;! must be declared with word "&lt;b&gt;static&lt;/b&gt;"; must be referred to using the&amp;nbsp;&lt;b&gt;interface name &lt;/b&gt;(even in implementing class)&lt;/li&gt;&lt;li style="text-align: left;"&gt;&lt;b&gt;virtual method &lt;/b&gt;- this is connected to plymorphism; &lt;span style="background-color: #fff2cc;"&gt;it's a method whose implementation is not determined until runtime&lt;/span&gt;; all non-final, non-static and non-private methods in Java are &lt;b&gt;virtual&lt;/b&gt;&lt;/li&gt;&lt;li style="text-align: left;"&gt;(understanding &lt;b&gt;polymorphism &lt;/b&gt;- of course, you need to know that if you create an object and assign it to reference of the type of its &lt;b&gt;superclass&lt;/b&gt;, and call a method on it, &lt;b&gt;still the subclass' method&lt;/b&gt; will be invoked)&lt;/li&gt;&lt;li style="text-align: left;"&gt;this, compiles (aaaarrrgh!):&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-sGcsymt5vC8/Vx6XTrsvmLI/AAAAAAAACdg/dEWcJ0_U6tMiU_kpu-g-TeD7_SYw7sEJwCLcB/s1600/spaces.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-sGcsymt5vC8/Vx6XTrsvmLI/AAAAAAAACdg/dEWcJ0_U6tMiU_kpu-g-TeD7_SYw7sEJwCLcB/s1600/spaces.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;pay attention to &lt;b&gt;missing default constructors&lt;/b&gt; when others are present!&lt;/li&gt;&lt;li&gt;look, a sentence: "&lt;i&gt;a class implementing an interface must implement all its methods&lt;/i&gt;" is &lt;b&gt;false&lt;/b&gt;, since the implementing class could be &lt;b&gt;abstract &lt;/b&gt;(fa-ce-palm)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;getting even better: "&lt;i&gt;a concrete &lt;b&gt;sub&lt;/b&gt;class must implement all the methods defined in inherited interface&lt;/i&gt;", also &lt;b&gt;false&lt;/b&gt;, since it could have been a 2nd level inheritance, and maybe some class in the middle has already implemented some of the methods (ah, seriously?!)&lt;/li&gt;&lt;li&gt;conclustion - &lt;b&gt;read each answer separately&lt;/b&gt;, don't keep the context from previous sentences you've just read.. ah, such bastards!&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;i&gt;"inherit an interface"&lt;/i&gt;, &lt;i&gt;"override a method of an interface"&amp;nbsp;&lt;/i&gt;- those seem to be &lt;b&gt;correct &lt;/b&gt;expressions..&lt;/li&gt;&lt;li&gt;&lt;b&gt;method hiding &lt;/b&gt;can be veery tricky:&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-T97ph1qnON8/Vx_djIraEiI/AAAAAAAACdw/KYWtVMY_Zy4jtyhxSE9i6Nj7yVDL-zJdgCLcB/s1600/methodhiding.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-T97ph1qnON8/Vx_djIraEiI/AAAAAAAACdw/KYWtVMY_Zy4jtyhxSE9i6Nj7yVDL-zJdgCLcB/s1600/methodhiding.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;ul&gt;&lt;li&gt;actually now that I think about it, it's pretty logical, as Bird reference has no chance of knowing that Pelican has declared some method, as there is no link between the two fly() methods (as the Bird one is private)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Chapter 6 Exceptions (80% correct, 16/20)&lt;/h4&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;Errors &lt;/b&gt;- they are the other subclass of &lt;b&gt;Throwable&lt;/b&gt;, and are meant to express something that went &lt;b&gt;very wrong&lt;/b&gt;; &lt;b&gt;JVM &lt;/b&gt;throws them; you're &lt;b&gt;not supposed &lt;/b&gt;to catch them, as anyway you won't be able to fix them;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;RuntimeExceptions you may catch&lt;/li&gt;&lt;li&gt;you &lt;b&gt;cannot omit braces &lt;/b&gt;with &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;try-catch&lt;/span&gt;, like you can with &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;if &lt;/span&gt;and with &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;when&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;catch &lt;/b&gt;and &lt;b&gt;finally &lt;/b&gt;blocks have to be &lt;b&gt;in the right order&lt;/b&gt;; &lt;b&gt;at least one &lt;/b&gt;must be present&lt;/li&gt;&lt;li&gt;finally runs &lt;b&gt;always&lt;/b&gt;, &lt;b&gt;except &lt;/b&gt;when &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;System.exit(int code)&lt;/span&gt;&amp;nbsp;is called!&lt;/li&gt;&lt;li&gt;catching a subtype of exception that was caught above &lt;b&gt;does not compile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;at most one catch block runs (first one matching) - remember about it when you read the code, it's easy to forget!&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;exception thrown from inside finally block masks the exception thrown in the catch block! &lt;/b&gt;the previous exception is as if it was not thrown at all&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;RuntimeException examples:&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;ArithmeticException&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;ArrayIndexOutOfBoundsException&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;ClassCastException&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;IllegalArgumentException&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;NullPointerException &lt;/b&gt;(extends IllegalArgumentException)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;NumberFormatException&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;checked exception examples:&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;IOException&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;FileNotFoundException &lt;/b&gt;(extends IOException)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;error examples:&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;ExceptionInitializerError &lt;/b&gt;- when static initializer block in a class throws an exception&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;StackOverflowError&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="background-color: #fff2cc;"&gt;&lt;b&gt;NoClassDefFoundError&lt;/b&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;overriding/implementing method&lt;b&gt; can declare less checked exceptions&lt;/b&gt;, but not more; in case of runtime exceptions anything is compiling&lt;/li&gt;&lt;li&gt;System.out.println(e); has same effect as&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; System.out.println(e.getClass().getName()+": "+e.getMessage());&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-51_K26pPQE8/V0bnCvpqsOI/AAAAAAAACeU/MYxSCGROJKAnGVElf91G_YVVZ6kGJ49lgCLcB/s1600/exceptionConstrs.png" /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;ul&gt;&lt;ul&gt;&lt;li style="text-align: left;"&gt;all of these exceptions have default constructor, yaay!&lt;/li&gt;&lt;/ul&gt;&lt;li style="text-align: left;"&gt;&lt;b&gt;Errors are allowed to be handled or declared &lt;/b&gt;- this sentence is true; yes, they should not be, but they are allowed to!&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/2617148401622069827/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2016/03/preparation-for-java-8-oca-1z0-808-exam.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2617148401622069827'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2617148401622069827'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2016/03/preparation-for-java-8-oca-1z0-808-exam.html' title='Preparation for Java 8 OCA 1Z0 808 exam'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://1.bp.blogspot.com/-MvbdBFZac_8/Vva6untWECI/AAAAAAAACWY/K1q-kn9QhZcYyqCkrfWeikVrWUSMgUKoQ/s72-c/notinitialized.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-4366111369724355584</id><published>2016-01-23T13:47:00.001+01:00</published><updated>2016-01-24T16:15:53.920+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Presentation'/><title type='text'>Presentation skills training with BJ Bartlett</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Here is about some topic different form the usual ones.&lt;br /&gt;&lt;br /&gt;Presentation skills training. A very tough for me, because as a developer I am naturally far from such topics as giving convincing presentations to top executives about company goals or new business possibilities. And my skills of self presentation and appearing confident are at level zero. It was even a leadership training in the area of giving presentations - something I would never sign up by myself.&lt;br /&gt;&lt;br /&gt;Nevertheless, it was useful. The main thing I got from there is that whether a presentation I give feels successful (I feel I have managed to explain something to people, they seem interested and later give me good feedback) or it feels like a total failure (I just feel like collapsing / starting to cry / leaving the room, and people look at me like "wtf") is &lt;b&gt;not a matter of luck&lt;/b&gt;. It is also &lt;b&gt;not a matter of my knowledge&lt;/b&gt;, though there is some minimum amount of it required. It is a matter of having the &lt;b&gt;right attitude&lt;/b&gt;. And I think that on this training I managed to somehow conceptualize this attitude in my head, so that I can actually remember it, be able to asses my current state, and maybe even controll it.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;When giving a presentation to executives&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Execute agreements &lt;/b&gt;- if you only present some cool topic, people will say "cool", leave and forget about it. Ask questions, give "Takeaway", ask for concrete commitment at the end.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Executives like data&lt;/b&gt;, they want to know what the business value is, but you should not overload them; be careful with facts, as they are binding; better say "truths", i.e. things that imply from those facts; don't focus on results, focus on their value;&lt;/li&gt;&lt;li&gt;&lt;b&gt;When asked a question &lt;/b&gt;be careful not to look away when thinking of the answer; if you really need to think longer say before "Excuse me, I need to think a bit about it", otherwise you will give impression that you are not competent; Short answers are perfectly fine.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;During the presentation&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Stay organised&lt;/li&gt;&lt;li&gt;Don't try to give an answer to a question you don't know an answer to; better say "I don't know"&lt;/li&gt;&lt;li&gt;Include an opening, a link from the current situation of the audience to your topic; tell a story; say "Good morning" and pause - people will have a moment to get used to you;&lt;/li&gt;&lt;li&gt;Include linking phrases between different topics&lt;/li&gt;&lt;li&gt;Use pauses - before or after something important; don't be afraid of silence&lt;/li&gt;&lt;li&gt;Align your body with the direction where you are looking; speak to concrete people, make a step forward in their direction;&lt;/li&gt;&lt;li&gt;Have your attention out to the listener&lt;/li&gt;&lt;li&gt;Include a summary at the end; you may also call it a recap, revisit, recommendations, agreements&lt;/li&gt;&lt;li&gt;Include a conclusion - think of what is the most important message you want the people to take from your presentation; optionally you can also have "Next steps" part&lt;/li&gt;&lt;li&gt;Don't speak and show simultaneously, first walk, align, then speak&lt;/li&gt;&lt;li&gt;Newer apologize, don't use expressions like "I hope", "I guess", "I try"&lt;/li&gt;&lt;li&gt;Agenta should be top level, no details&lt;/li&gt;&lt;li&gt;Stay in the present moment; if you feel you are slipping out of it stop, take a break, drink water&lt;/li&gt;&lt;li&gt;Use this advice in everyday life, where possible&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;h3&gt;Command presence&amp;nbsp;&lt;/h3&gt;&lt;div&gt;How to show intention, which will result in respect from the audience&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;comfort &lt;/b&gt;- being at easy with the situation - both with a negative and and a positive one; you need to have full attention on the audience; when you lose control (e.g. people start discussing), you need to take it back&lt;/li&gt;&lt;li&gt;&lt;b&gt;confidence &lt;/b&gt;- believe in yourself and in your belief system - never let anyone disturb your belief system, ever!; this is about not feeling sorry but also not being arrogant;&lt;/li&gt;&lt;li&gt;&lt;b&gt;control &lt;/b&gt;- keep control of the situation; e.g. she was a consultant visiting a client, and client started a meeting saying "I hate consultancy", and what she answered was "me too"&lt;/li&gt;&lt;li&gt;&lt;b&gt;certainty &lt;/b&gt;- know what you know and know what you don't know&lt;/li&gt;&lt;li&gt;&lt;b&gt;conviction&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;consideration &lt;/b&gt;- caring about the audience&lt;/li&gt;&lt;li&gt;&lt;b&gt;credibility &lt;/b&gt;- we build on trust&lt;/li&gt;&lt;li&gt;&lt;b&gt;character &lt;/b&gt;- be yourself, keep good morals, be honest, don't be distracted by politics&lt;/li&gt;&lt;li&gt;&lt;b&gt;voice &lt;/b&gt;- use modulation, use pacing, use pausing, use emphasising&lt;/li&gt;&lt;li&gt;&lt;b&gt;risk&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;It is the speaker's responsibility to shorten the communication distance line - the beween the speaker and the audience.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you keep your attention out, if you give your energy to the audience, as the effect they will return it back. As soon as you drop your intention, the audience will immediately dicsonnect.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Organisational Flow Chart&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;1. Opening&lt;/div&gt;&lt;div&gt;2. Introduction&lt;/div&gt;&lt;div&gt;3. Agenda (top level), max 3 topics&lt;/div&gt;&lt;div&gt;4. Topic by topic&lt;/div&gt;&lt;div&gt;5. Summary of each topic (after all topics have been presented)&lt;/div&gt;&lt;div&gt;6. Conclusion&lt;/div&gt;&lt;div&gt;7. (Next steps)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Remember that everyone processes information differently. Your task is not to give it as you would like to receive it, but in a way that will be easy for everyone. E.g. people who have children know the phenomenon that you start speaking to each child in a different way.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Apple is a good place to work, Microsoft is difficult, Oracle is tough;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Don't just transfer the data, share the data.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The amount of data on your slides is inversely proportional to your perceived credibility.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Pareto principle&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;20% of our capability results in 80% of the results&lt;/li&gt;&lt;li&gt;the remaining 80% of our capability results in 20% of the results&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;The 80% capability can be the details, organisational stuff, administrative stuff.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Focus on the 20% capability; ask yourself "what is really the reason they asked this question?"; think of how much value will this provide.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Microsoft did not apply that advice and now they have a lot of outdated ways of doing things; they did not take into account that world is changing and didn't ask themselves "are we still providing value?". Apple was always doing better except recently they are not lucky with their iPhones. But so now they have to adjust. SAP is in the transition phase.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Levels of communication&lt;/h3&gt;Read &lt;b&gt;bottom-top&lt;/b&gt;:&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Everyone likes to work with each other&lt;/li&gt;&lt;li&gt;Everyone likes the agreement&lt;/li&gt;&lt;li&gt;Reach on an agreement&lt;/li&gt;&lt;li&gt;Two way of information exchange&lt;br /&gt;&lt;i&gt;--------------- after that line don't stay too long --------&lt;/i&gt;&lt;/li&gt;&lt;li&gt;One way of information exchange&lt;br /&gt;&lt;i&gt;--------------- after that line it is hopeless ---------------&lt;/i&gt;&lt;/li&gt;&lt;li&gt;Two way of&amp;nbsp;information exchange but without being understood&lt;/li&gt;&lt;li&gt;One way of information exchange but without being understood&lt;/li&gt;&lt;li&gt;No communication&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;You can start from point 4, and then gradually, with baby steps, work your way towards the top. When the communication happens like on level 5 and more, then the company will not survive.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Types of context&lt;/h3&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Champion context &lt;/b&gt;- for example brainstorming session; people have freedom of ideas; you task is to frame those ideas, and abort the ones that do not show good prognosis (according to the people), if there was no results achieved schedule another meeting, do not leave meeting without agreeing on another or having concrete action items. Better choose less people than more, pick them carefully; if you need to talk because of your ego, keep your mouth shut;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Classic simple &lt;/b&gt;- one person speak, others listen; there is no feedback, it's relatively easy, don't get stuck there as it feels convenient for you; another name for that is macromanagement, so delegating all your work to someone else&lt;/li&gt;&lt;li&gt;&lt;b&gt;Complicated context &lt;/b&gt;- when you are surrounded by both stakeholders and experts; your task is to bring them together; give recommendations to both, but keep the choices open; stay neutral and objective;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Complex context &lt;/b&gt;- you give away the context and let it grow; let the customers evolve it;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Chaos context &lt;/b&gt;- you are part of this chaos so you cannot control it; solution is to get a small team who can observe the chaos, as in chaos a possibility will emerge;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Leadership presentation&lt;/h3&gt;&lt;div&gt;Every event or situation has a purpose (why?) and results, impact. Remember to communicate the impact. There are two sides of every presentation:&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Emotional side &lt;/b&gt;- influence feelings, motivation, opinons, attitudes, habits, resistance, prejudice&lt;/li&gt;&lt;li&gt;&lt;b&gt;Functional side &lt;/b&gt;- improvement, actions, direction, strategy, goals, focus, implmenetation, executions, process, procedures&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;You need to know where to start with each person.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Some further advice after exercises&lt;/h3&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;I thought to myself to think that "it's not about me, I am just a tool"&lt;/li&gt;&lt;li&gt;Remember to square off - keep your body directed to the listener&lt;/li&gt;&lt;li&gt;Say 1-3 ideas per person, i.e. looking at this person&lt;/li&gt;&lt;li&gt;I should have less slides and less content there&lt;/li&gt;&lt;li&gt;Focus out to the audience&lt;/li&gt;&lt;li&gt;When you start presenting a slide, make sure you are not standing in front of it, so that ppl see it&lt;/li&gt;&lt;li&gt;Don't point at your laptop&lt;/li&gt;&lt;li&gt;Interact with the slides too&lt;/li&gt;&lt;li&gt;Don't be afraid to say at the end "In my opinion..", "I suggest.."&lt;/li&gt;&lt;li&gt;Practice Introduction and Conclusion the most&lt;/li&gt;&lt;li&gt;Don't put Conclusion and Q&amp;amp;A on the agenda slide&lt;/li&gt;&lt;li&gt;"&lt;i&gt;When I'm balancing out I try to be.. charming&lt;/i&gt;"&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Types of employees&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;(TODO, I lost the sheet of paper)&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Warrior&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;br /&gt;&lt;/li&gt;&lt;li&gt;when out of control, bring your&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Visionary&lt;/li&gt;&lt;ul&gt;&lt;li&gt;big picture&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Mentor&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Magus&lt;/li&gt;&lt;ul&gt;&lt;li&gt;focused on details&lt;/li&gt;&lt;li&gt;perfectionist&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/4366111369724355584/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2016/01/presentation-skills-training-with-bj.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/4366111369724355584'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/4366111369724355584'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2016/01/presentation-skills-training-with-bj.html' title='Presentation skills training with BJ Bartlett'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-536251194048906736</id><published>2016-01-15T11:29:00.000+01:00</published><updated>2016-03-05T18:15:00.846+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Good Interview Questions</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;What is the difference between &lt;b&gt;mock &lt;/b&gt;and &lt;b&gt;stub&lt;/b&gt;?&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/536251194048906736/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2016/01/faiq-frequently-asked-interview.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/536251194048906736'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/536251194048906736'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2016/01/faiq-frequently-asked-interview.html' title='Good Interview Questions'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-6637473164435863327</id><published>2016-01-13T21:50:00.001+01:00</published><updated>2016-05-27T10:44:44.317+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><title type='text'>"Clean Code" Robert C. Martin</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;span style="font-family: inherit;"&gt;These are the notes I took while reading the book &lt;a href="https://books.google.de/books/about/Clean_Code.html?id=dwSfGQAACAAJ"&gt;"Clean Code: A Handbook of Agile Software Craftsmanship" (Robert C. Martin)&lt;/a&gt;, that are supposed to summarize the main concepts presented in the book.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;The book has a mission to "improve the state of software craftmanship". A lot of reasoning and moralizing at the beginning, I'll skip that (still it is really worth reading!) :) What I liked the most:&lt;/span&gt;&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: white; line-height: 18.2px;"&gt;We want to use the popular paperback&lt;/span&gt;&lt;span style="background-color: white; line-height: 18.2px;"&gt;&amp;nbsp;model whereby the author is responsible for making himself clear and not the academic model where it is the scholar's job to dig the meaning out of the paper.&lt;/span&gt;&lt;/span&gt;&lt;/i&gt;&lt;/blockquote&gt;Just gonna mention that all the advice comes not from guesses but experience (as the author&amp;nbsp;claims).&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Dictionary&lt;/h3&gt;&lt;div style="text-align: left;"&gt;Because I hate getting stuck on abbreviations:&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;OCP&lt;/b&gt; - Open-Closed Principle - &lt;i&gt;Classes should be open for extension but closed for modification.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;SRP &lt;/b&gt;- Single Responsibility Principle -&amp;nbsp;&lt;i&gt;A class or module should have one, and only one, reason to change.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;DIP -&lt;/b&gt;&amp;nbsp;Dependency Inversion Principle - &lt;i&gt;C&lt;/i&gt;&lt;i&gt;lasses should depend upon abstractions, not on concrete details.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;[note that I skipped the first chapter, so the numbering of chapters is shifted by -1]&lt;br /&gt;&lt;h3&gt;1. Meaningful Names&lt;/h3&gt;&lt;div&gt;&lt;b&gt;Variable name&lt;/b&gt;&amp;nbsp;should say &lt;b&gt;what is being measured &lt;/b&gt;and the &lt;b&gt;unit of measurement&lt;/b&gt;, e.g. &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[int elapsedTimeInDays]&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;instead of &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp;[int i]&lt;/span&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It is always useful to add the &lt;b&gt;context &lt;/b&gt;to the variable names, e.g.&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [gameBoard] &lt;/span&gt;instead of &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[theList]&lt;/span&gt;. Also the whole class is a context to their variables/methods.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It is sometimes a good idea to extract even one-line-if-condition to a &lt;b&gt;separate method&lt;/b&gt;, as one can give this method a more descriptive&amp;nbsp;&lt;b&gt;name&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It is important to keep in mind the &lt;b&gt;keywords &lt;/b&gt;specific to different areas of IT, and &lt;b&gt;avoid &lt;/b&gt;using them when we mean them in a different &lt;b&gt;context&lt;/b&gt;. E.g. do not call &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[accountList]&lt;/span&gt; something which is not a list.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Do not use names that differ only &lt;b&gt;sligthly&lt;/b&gt;, for example&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [XYZControllerForEfficientHandlingOfStrings] &lt;/span&gt;and&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [XYZControllerForEfficientStorageOfStrings]&lt;/span&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Do not use lowercase L together with uppercase O, as this will look like number "10". Just &lt;b&gt;don't be confusing &lt;/b&gt;when you don't have to.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Avoid &lt;/b&gt;using &lt;b&gt;noise words&lt;/b&gt;, like &lt;i&gt;a&lt;/i&gt;, &lt;i&gt;an&lt;/i&gt;, &lt;i&gt;the&lt;/i&gt;, &lt;i&gt;info&lt;/i&gt;, &lt;i&gt;data&lt;/i&gt;,... to "make up" a new, non-conflicting name. For example would you be able to guess the difference between&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [ProductInfo] &lt;/span&gt;and&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [ProductData]&lt;/span&gt;?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Make your names &lt;b&gt;pronouncable,&lt;/b&gt; so that you can later discuss the code without sounding like an idiot.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Make your variable names be &lt;b&gt;easy to find via a text search &lt;/b&gt;- makes your life easier.&lt;/div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;Better add &lt;b&gt;suffixes &lt;/b&gt;to interface &lt;b&gt;implementations&lt;/b&gt; than &lt;b&gt;prefixes &lt;/b&gt;to the &lt;b&gt;interface &lt;/b&gt;name. No one needs to know that e.g.&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [ShapeFactory] &lt;/span&gt;is an interface, it's less ugly to name its implementation&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [ShapeFactoryImpl]&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Class names &lt;/b&gt;should have a &lt;b&gt;noun &lt;/b&gt;in the name.&lt;br /&gt;&lt;br /&gt;It is better to have &lt;b&gt;factory methods &lt;/b&gt;and private constructors, than a big amount of overloaded constructors - because the factory methods can have descriptive&amp;nbsp;&lt;b&gt;names&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Don't try to be funny &lt;/b&gt;when choosing names (someone may not understand).&lt;br /&gt;&lt;br /&gt;Use &lt;b&gt;consistent lexicon&lt;/b&gt;, e.g. &lt;i&gt;get&lt;/i&gt;, &lt;i&gt;fetch&lt;/i&gt;, &lt;i&gt;retrieve&lt;/i&gt; - &lt;b&gt;decide on one word &lt;/b&gt;to use per project, not per developer. Or same with &lt;i&gt;manager &lt;/i&gt;vs &lt;i&gt;controller vs driver&lt;/i&gt;.&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;[BUT] be aware to use one word &lt;b&gt;only when semantics &lt;/b&gt;are same - for example &lt;i&gt;adding&lt;/i&gt; two strings together is not same as &lt;i&gt;adding &lt;/i&gt;an element to a list. Then you have to use a different name.&lt;/blockquote&gt;&lt;br /&gt;&lt;b&gt;Problem domain &lt;/b&gt;(e.g. customer, account)&amp;nbsp;vs &lt;b&gt;solution domain&lt;/b&gt; (e.g. visitor, queue) terms - first try to use solution domain, then problem domain. The more code has to do with the solution domain problems, the more solution domain vocabulary it should use, and vice versa. It is important to &lt;b&gt;know the difference&lt;/b&gt;.&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;b&gt;Prefixing everything with same prefix &lt;/b&gt;may not be a good idea - as it makes it harder to use code completion. Why to work against your tools? &lt;b&gt;Add no more context to the name than neccessary&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Don't be afraid of &lt;b&gt;renaming&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;2. Functions&lt;/h3&gt;Should be &lt;b&gt;smaller than small&lt;/b&gt;. Best 3-4 &lt;b&gt;lines&lt;/b&gt;. Max 1-2 &lt;b&gt;indent levels&lt;/b&gt; (e.g. "if").&lt;br /&gt;&lt;br /&gt;Each function should do only&amp;nbsp;&lt;b&gt;one thing&lt;/b&gt;. "One thing" is when you cannot split it to steps anymore.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Mixing levels of abstraction&lt;/b&gt; within one function is always confusing, e.g.&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [getHtml()] &lt;/span&gt;next to&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [.append("\n")]&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;The code should be read like a top-down narrative. Place the extracted function &lt;b&gt;right below &lt;/b&gt;the function that is calling it.&lt;br /&gt;&lt;br /&gt;Sometimes it's worth to use &lt;b&gt;polymorphism rather than a switch&lt;/b&gt;. Using switch often breaks the SRP (more than one reason to change) and OCP (must change whenver new types are added), and sometimes even causes &lt;b&gt;duplicating &lt;/b&gt;the same switch costructions in several functions. Instead create classes for each &lt;b&gt;switch &lt;/b&gt;case, and bury the switch itself deep in an &lt;b&gt;Abstract Factory&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Max number of &lt;b&gt;function input arguments &lt;/b&gt;is 2-3, best 0. They increase &lt;b&gt;testing complexity&lt;/b&gt;. Make the function harder to understand.&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;Using 2 arguments is only justified for example in situations like&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [new Point(0,0)]&lt;/span&gt;, because a point has 2 &lt;b&gt;ordered &lt;/b&gt;coordinates. If there is no &lt;b&gt;natural cohesion or ordering &lt;/b&gt;between arguments they should not be both input arguments of a function. E.g. the&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [.assertEquals(expected, actual)]&lt;/span&gt; is confusing, isn't it. And&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[.assertEquals(message, expected, actual)]&amp;nbsp;&lt;/span&gt;is even more confusing - how many times you had to check the signature first?&amp;nbsp;&lt;/blockquote&gt;Often if a function takes many arguments it's a sign that they should be&amp;nbsp;&lt;b&gt;wrapped into a class on their own&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Anything that forces you to &lt;b&gt;look up a function signature&lt;/b&gt; is a &lt;b&gt;cognitive break &lt;/b&gt;and should be avoided.&lt;br /&gt;&lt;br /&gt;Avoid using &lt;b&gt;flag arguments&lt;/b&gt;. Boolean passed into a fuction means the fuction does &lt;b&gt;more than one thing&lt;/b&gt;! Should be split into two functions then.&lt;br /&gt;&lt;br /&gt;Have no &lt;b&gt;side effects in &lt;/b&gt;a function&amp;nbsp;- they are evil. They may introduce &lt;b&gt;temporal coupling&lt;/b&gt; (temporal - related to time), e.g. by hiddenly calling&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [initialize()]&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;Try not to use &lt;b&gt;input arguments as output&lt;/b&gt;. Better use&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [report.addFooter()] &lt;/span&gt;than&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [.addFooter(report)] &lt;/span&gt;&lt;span style="font-family: inherit;"&gt;- that is more OO style.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;Apply &lt;b&gt;Command Query Separation &lt;/b&gt;- a function either &lt;b&gt;does something &lt;/b&gt;or &lt;b&gt;answers a question&lt;/b&gt;, not both. E.g.&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[boolean setName(name)]&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&amp;nbsp;is bad, as it requires guessing what the returned value means. This should be separated into two functions.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;It's a good practice to &lt;b&gt;extract the bodies of try-catch blocks into separate methods &lt;/b&gt;- to separate the &lt;b&gt;logic &lt;/b&gt;from &lt;b&gt;error handling&lt;/b&gt;. Error handling is already a &lt;b&gt;one thing&lt;/b&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;Start with writing any fuction and then &lt;b&gt;refactor&lt;/b&gt; it, long. It's not the goal to have them neat and nice from the start.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;3. Comments&lt;/h3&gt;&lt;div&gt;&lt;i&gt;Don't comment on bad code - rewrite it.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Comments are evil. &lt;i&gt;The goal of comments is to compensate for our failure or to help express ourselves better. &lt;/i&gt;They are always sign of &lt;b&gt;failure&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Comments &lt;b&gt;get outdated &lt;/b&gt;as there is no good way of maintaining them. People move the code but forget the comment. People change the code but forget the comment, or no longer remember what it was supposed to mean.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;They are reasonable only sometimes (express rationale behind choosing a certain approach, or to stress out some important detail in the implementation), but in general try to &lt;b&gt;minimize &lt;/b&gt;using them.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Of course it's different with Javadocs, &lt;b&gt;Javadocs are useful&lt;/b&gt;, but keep them &lt;b&gt;accurate&lt;/b&gt;. &lt;b&gt;Misleading&lt;/b&gt; comment is worse than no comment.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;If you write a comment, write&amp;nbsp;&lt;b&gt;about what is just next to it, not about the whole system around&lt;/b&gt;. Only about what the function has control over. Otherwise it will soon become outdated, and therefore misleading.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;No point in writing sth like&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[/* Returns the name. */ getName()]&lt;/span&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Using &lt;b&gt;HTML &lt;/b&gt;in comments makes them &lt;b&gt;harder to be read in IDE &lt;/b&gt;- so where they are read the most.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;4. Formatting&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Code formatting &lt;/b&gt;is important because it is part of &lt;b&gt;communication&lt;/b&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It also makes the reader trust the code more.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Vertical size &lt;/b&gt;of a file should be typically &lt;b&gt;200 lines&lt;/b&gt;, with upper limit of 500 (but this is just a rough number, based on a number of open source projects; the author phrases it way more dyplomatically :P).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Newspaper metaphor &lt;/b&gt;- code should read like a newspaper article. First the title, then the introduction, only later the details. Name should be simple but explanatory. The article should be short enough to make it attractive to read.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It's a good idea to put a&amp;nbsp;&lt;b&gt;blank line&amp;nbsp;&lt;/b&gt;between groups of lines that represent single thought. And lines referring to single concept should be kept &lt;b&gt;dense&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Keep &lt;b&gt;related pieces close to each other &lt;/b&gt;- e.g. functions one after another, in one file. That's why &lt;b&gt;protected &lt;/b&gt;variables should be avoided.&lt;/div&gt;&lt;br /&gt;Declare &lt;b&gt;local variables on the top &lt;/b&gt;of each function (except when it's just a loop counter, or sth similar).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Instance variables and constants &lt;/b&gt;shoud also be &lt;b&gt;at the top of &lt;/b&gt;the class, even if a constant is used only in one place later - as at the top it is more &lt;b&gt;visible&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Keep &lt;b&gt;lines short&lt;/b&gt;, less than 80-120 characters. Even if your screen can fit more.&lt;br /&gt;&lt;br /&gt;Surround "=" assignments with &lt;b&gt;whitespaces&lt;/b&gt;, to &lt;b&gt;accentuate &lt;/b&gt;them.&lt;br /&gt;&lt;br /&gt;[some other obvious whitespace usages and antiusages]&lt;br /&gt;&lt;br /&gt;Keep &lt;b&gt;indentation&lt;/b&gt;. Even for one line "if"s, one line "while"s - expand them into multiline and add indent. Dont do&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [while();]&lt;/span&gt;, in one line (notice the semicolon), this is evil.&lt;br /&gt;&lt;br /&gt;Each developer should follow &lt;b&gt;common team rules&lt;/b&gt;, even if some of them don't like some of them.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;5. Objects and Data Structures&lt;/h3&gt;&lt;b&gt;Don't automatically add getters and setters &lt;/b&gt;to each private variable. Why would we have private variables at all then?&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;For example a Point - can be defined by&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [x,y] &lt;/span&gt;(carthesian coordinates) or by&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; [r,theta] &lt;/span&gt;(polar coordinates). If we don't add separate setters for &lt;i&gt;x, y, r, t,&lt;/i&gt; but rather a setter for &lt;i&gt;x, y&lt;/i&gt; and another setter for &lt;i&gt;r, t&lt;/i&gt; - we &lt;b&gt;enforce an access policy&lt;/b&gt;. And even despite having separate getters for each of &lt;i&gt;x, y, r, t,&lt;/i&gt;&amp;nbsp;we still&amp;nbsp;&lt;b&gt;do not expose the internal implementation&lt;/b&gt;.&lt;/blockquote&gt;&lt;b&gt;Getters and setters &lt;/b&gt;are part of the &lt;b&gt;interface &lt;/b&gt;using which the object communicates with the world. Think it through.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Object vs data structure&lt;/b&gt; - data structure only &lt;b&gt;exposes it's data&lt;/b&gt;, and object &lt;b&gt;exposes functions &lt;/b&gt;that operate on its data. &lt;b&gt;Do not mix them &lt;/b&gt;in one class! Do not create &lt;b&gt;hybrids&lt;/b&gt;.&lt;br /&gt;&lt;b&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;OO code &lt;/b&gt;makes it easier to &lt;b&gt;add new classes&amp;nbsp;&lt;/b&gt;&amp;nbsp;(add new objects), and &lt;b&gt;procedural code &lt;/b&gt;makes it easier to &lt;b&gt;add new functions&lt;/b&gt; (add new behaviour). &lt;b&gt;Always choose the style appropriate &lt;/b&gt;to the task at hand. Everything &lt;b&gt;does not have to be an object&lt;/b&gt;.&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;An example of a procedural code is the following: we have a class &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[Geometry]&lt;/span&gt; and different &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[Shape]&lt;/span&gt; subclasses. In Geometry class there is a number of methods that operate on a Shape, in each there is switch to check which subclass of Shape are we dealing with. If we add a new shape type, we need to make changes in every method in Geometry class. If we add a new operation type, we need to only add the new function to Geometry class.&amp;nbsp;&lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt;Instead, we could have each subclass of &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[Shape]&lt;/span&gt; have their own set of those methods - that would be exactly the OO style.&lt;/blockquote&gt;&lt;br /&gt;&lt;b&gt;The Law of Demeter -&amp;nbsp;&lt;/b&gt;a module &lt;b&gt;should not&amp;nbsp;know about the innards &lt;/b&gt;of the objects it manipulates. A function can call operations on elements of an object &lt;b&gt;where it is declared&lt;/b&gt;, but not on the objects &lt;b&gt;returned &lt;/b&gt;by those operations.&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;That is why the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ctxt.getOptions().getScratchDir().getAbsolutePath()]&lt;/span&gt; is a candidate of breaking that law. [BUT] &lt;b&gt;not &lt;/b&gt;if the subsequent classes are &lt;b&gt;data structures &lt;/b&gt;not &lt;b&gt;objects&lt;/b&gt;.&lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt;And, if they are objects, there should not be "getSth" functions on them, but "doSth" functions. If we need to get sth, let's think about what we need it for, and move that logic into that class, under a "doSth" function.&lt;/blockquote&gt;&lt;b&gt;Active Records&amp;nbsp;&lt;/b&gt;are DTOs with extra methods like &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[save()]&lt;/span&gt; and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[find()]&lt;/span&gt;, e.g. for using with database. Treat them as &lt;b&gt;data structures &lt;/b&gt;and don't add more logic.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;6. Error Handling&lt;/h3&gt;&lt;div&gt;Write &lt;i&gt;try-catch-finally&lt;/i&gt; blocks &lt;b&gt;first &lt;/b&gt;- they define the &lt;b&gt;scope&lt;/b&gt;, "transaction".&lt;br /&gt;&lt;br /&gt;Keep &lt;b&gt;error handling separate &lt;/b&gt;from the business logic.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Unchecked exceptions are now fine&lt;/b&gt;. In the past they were bad practice, now they are not. It's neccessity. Encouraging checked exceptions in Java was a &lt;b&gt;mistake&lt;/b&gt;, as they violate OCP principle. Only use them if you write a critical library and need to force the user to catch an exception.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Classifying &lt;/b&gt;yor exceptions - should be done according to &lt;b&gt;how they will be caught&lt;/b&gt;. Use different classes for your exceptions only if there are times &lt;b&gt;you want catch one exception and let go the other&lt;/b&gt;.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;Special case &lt;/b&gt;pattern (by Fowler) - when you feel like you want to steer your logic using &lt;b&gt;exceptions &lt;/b&gt;- return a &lt;b&gt;special&lt;/b&gt;, "exceptional" object instead of throwing an exception, and let the further code treat it as if is was a valid response - without knowing that it is a special case object. Sometimes this pays off.&lt;br /&gt;&lt;br /&gt;Don't return &lt;b&gt;null&lt;/b&gt;. This forces you to write a lot of null checks, and of course one day you will forget one.&lt;br /&gt;&lt;br /&gt;Don't pass &lt;b&gt;null (&lt;/b&gt;like &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[calculator.xProjection(null, new Point(12, 13));]&lt;/span&gt;).&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;7. Boundaries&lt;/h3&gt;Sometimes it's a good idea to &lt;b&gt;encapsulate&lt;/b&gt; &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[Map&amp;lt;String, Integer&amp;gt;]&lt;/span&gt; into own object, so that the user does not see the generics. Don't pass &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Map&lt;/span&gt;s or other &lt;b&gt;boundary interfaces &lt;/b&gt;(i.e. coming from 3rd party general use library)&lt;b&gt;&amp;nbsp;&lt;/b&gt;around your system. They should not be part of your public API.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Learning tests&lt;/b&gt; - if you learn a 3rd party library, write tests that reflect your understanding. Will be helpful for others to understand and will immediately &lt;b&gt;detect backward incompatibility&lt;/b&gt; when updating to newer version.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Boundary tests&lt;/b&gt; - similat to the above, but focus &lt;b&gt;only on the parts used by our software&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;When you want to &lt;b&gt;integrate &lt;/b&gt;sth that is &lt;b&gt;not yet implemented &lt;/b&gt;- feel free to write the &lt;b&gt;interface &lt;/b&gt;yourself, and later just &lt;b&gt;add an adapter&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;What happens at &lt;b&gt;boundaries &lt;/b&gt;is &lt;b&gt;change&lt;/b&gt;. &lt;b&gt;Minimize &lt;/b&gt;the number of &lt;b&gt;touch points &lt;/b&gt;with 3rd party libraries.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;8. Unit Tests&lt;/h3&gt;[Some well known rules about TDD]&lt;br /&gt;&lt;br /&gt;Use &lt;b&gt;same quality standards &lt;/b&gt;for tests as for production code! Otherwise maintenance will become pain in the head. No "&lt;i&gt;quick and dirty&lt;/i&gt;" tests! &lt;b&gt;Dirty tests are worse than no tests&lt;/b&gt;. Below an illustration of a real life story:&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-sPTePip1-4Y/VpfEAGRrCwI/AAAAAAAACVE/f634aJu_RYk/s1600/dirty%2Btests.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="226" src="https://1.bp.blogspot.com/-sPTePip1-4Y/VpfEAGRrCwI/AAAAAAAACVE/f634aJu_RYk/s320/dirty%2Btests.png" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;[my own visualisation of the story from the book]&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Tests keep the production code &lt;b&gt;flexible&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Readability &lt;/b&gt;in tests is even &lt;b&gt;more important &lt;/b&gt;than it is in production code. So refactor, remove code duplication, choose descriptive names. Make it clear where the "setup", "run" and "assert" part is. &lt;b&gt;Design the tests for reading&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Even write a set of &lt;b&gt;utility methods &lt;/b&gt;only for your tests, that will use &lt;b&gt;domain language&lt;/b&gt;, and provide a &lt;b&gt;testing API&lt;/b&gt; to your system.&lt;br /&gt;&lt;br /&gt;Keep on &lt;b&gt;refactoring tests&lt;/b&gt;, just like you do with the production code.&lt;br /&gt;&lt;br /&gt;Test &lt;b&gt;one concept per test&lt;/b&gt;. A test should have &lt;b&gt;only one reason &lt;/b&gt;to fail.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Tests &lt;/b&gt;should be &lt;b&gt;F.I.R.S.T.&lt;/b&gt; - &lt;b&gt;fast&lt;/b&gt;, &lt;b&gt;independent &lt;/b&gt;from each other, &lt;b&gt;repeatable &lt;/b&gt;(e.g. independent from the network), &lt;b&gt;self validating &lt;/b&gt;(either pass or fail, no manual steps in between), &lt;b&gt;timely&lt;/b&gt; (written on time, not after production code is done).&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;9. Classes&lt;/h3&gt;If a &lt;b&gt;test &lt;/b&gt;needs it, it's fine to change a method &lt;b&gt;from private to protected&lt;/b&gt;, if no other solution.&lt;br /&gt;&lt;br /&gt;A class should be &lt;b&gt;smaller than small&lt;/b&gt;. It should have &lt;b&gt;only one &lt;/b&gt;responsibility.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;Single Responsibility Principle&amp;nbsp;&lt;/b&gt;(SRP) states that a class or module should have&amp;nbsp;&lt;b&gt;one, and only one, reason to change&lt;/b&gt;.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Responsibility&lt;/b&gt; = reason to change.&lt;br /&gt;&lt;br /&gt;If you have &lt;b&gt;problem with finding concise (unambigious) name &lt;/b&gt;for the class, it is likely it has &lt;b&gt;too many responsibilities&lt;/b&gt;. Especially names including &lt;i&gt;Manager&lt;/i&gt;, &lt;i&gt;Processor&lt;/i&gt;, or &lt;i&gt;Super&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Making things work &lt;/b&gt;and &lt;b&gt;keeping code clean &lt;/b&gt;are two different activities that cannot be done simultaneously. So after you are done with the first,&amp;nbsp;&lt;b&gt;don't forget the latter&lt;/b&gt;!&lt;br /&gt;&lt;br /&gt;Don't be afraid of having &lt;b&gt;many small classes&lt;/b&gt;. The complexity comes from number of &lt;b&gt;moving parts&lt;/b&gt; not number of classes. You will not change program &lt;b&gt;complexity &lt;/b&gt;by dividing it into many classes, but you will increase the ease with which someone else can &lt;b&gt;learn &lt;/b&gt;it, and find the piece that is relevant to them at the moment. It's about &lt;b&gt;organising &lt;/b&gt;the complexity.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Cohesion of a function&lt;/b&gt; is proportional to the &lt;b&gt;number of instance variables&amp;nbsp;&lt;/b&gt;it modifies. The number of&amp;nbsp;&lt;b&gt;instance variables&amp;nbsp;&lt;/b&gt;of a class should be&amp;nbsp;&lt;b&gt;small &lt;/b&gt;and &lt;b&gt;cohesion high&lt;/b&gt;. And now listen to that:&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;Often when you want to &lt;b&gt;minimize number of function arguments &lt;/b&gt;and create &lt;b&gt;small functions&lt;/b&gt;, the number of &lt;b&gt;instance variables grow&lt;/b&gt;, and often also at the same time &lt;b&gt;cohesion decreases&lt;/b&gt;. This is often the &lt;b&gt;sign &lt;/b&gt;that &lt;b&gt;another class &lt;/b&gt;tries to &lt;b&gt;get out of the bigger class&lt;/b&gt;. Split them!&lt;/blockquote&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;10. Systems&lt;/h3&gt;&lt;div&gt;&lt;b&gt;Separate &lt;/b&gt;system &lt;b&gt;startup code &lt;/b&gt;from &lt;b&gt;the rest of the code &lt;/b&gt;(initialization, etc.). Even avoid such &lt;b&gt;lazy initialization&lt;/b&gt; (it introduces&amp;nbsp;&lt;b&gt;coupling&lt;/b&gt;):&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[public Service getService() {&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;if (service == null)&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;service = new MyServiceImpl(...);&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;return service;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}]&lt;/span&gt;&lt;/blockquote&gt;Keeping &lt;b&gt;modularity &lt;/b&gt;is &lt;b&gt;more important &lt;/b&gt;than &lt;b&gt;convenience&lt;/b&gt;! As a solution you can: move all initialization logic to &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[main]&lt;/span&gt;, use &lt;b&gt;Abstract&amp;nbsp;Factories,&lt;/b&gt;&amp;nbsp;or use &lt;b&gt;dependency injection &lt;/b&gt;(Spring).&lt;br /&gt;&lt;br /&gt;Right &lt;b&gt;separation of concerns &lt;/b&gt;- allows us to build systems &lt;b&gt;incrementally&lt;/b&gt;, we don't have to get it all right from the start. EJB1 and EJB2 is an example of &lt;b&gt;bad separation of concerns &lt;/b&gt;(everything coupled to the container).&lt;/div&gt;&lt;br /&gt;&lt;b&gt;Aspects &lt;/b&gt;and &lt;b&gt;proxies &lt;/b&gt;are an attempt used for separating &lt;b&gt;cross cutting concerns&lt;/b&gt;, &lt;b&gt;proxies &lt;/b&gt;have some &lt;b&gt;drawbacks &lt;/b&gt;though (though Spring makes them &lt;b&gt;transparent enough &lt;/b&gt;to be acceptable). Aspect like architecture enables it to be &lt;b&gt;test-driven&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Always &lt;b&gt;postpone &lt;/b&gt;architectural decisions to the &lt;b&gt;last possible moment&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Don't &lt;b&gt;blindly &lt;/b&gt;follow emerging standards or hypes.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;11. Emergence&lt;/h3&gt;&lt;div&gt;&lt;b&gt;Emergent design&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Rules of &lt;b&gt;good design &lt;/b&gt;(by Kent Beck):&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Runs &lt;b&gt;all tests &lt;/b&gt;(i.e. passes them)&lt;/li&gt;&lt;li&gt;Contains &lt;b&gt;no duplication&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Expresses the &lt;b&gt;intent &lt;/b&gt;of the programmer&lt;/li&gt;&lt;li&gt;&lt;b&gt;Minimizes &lt;/b&gt;the number of classes and methods&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h3&gt;12. Concurrency&lt;/h3&gt;&lt;div&gt;Concurrency is a &lt;b&gt;decoupling strategy&lt;/b&gt;: it helps us decouple &lt;b&gt;what &lt;/b&gt;gets done from &lt;b&gt;when &lt;/b&gt;it gets done.&lt;br /&gt;&lt;br /&gt;Concurrency does &lt;b&gt;not always &lt;/b&gt;improve &lt;b&gt;performance&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Concurrency requires&amp;nbsp;fundamental &lt;b&gt;change in design strategy&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Corrent &lt;/b&gt;concurrency is &lt;b&gt;complex &lt;/b&gt;even for &lt;b&gt;simple &lt;/b&gt;problems. &lt;b&gt;Bugs &lt;/b&gt;are often &lt;b&gt;not repeatable&lt;/b&gt;, therefore often incorrectly ignored.&lt;br /&gt;&lt;br /&gt;Keep your concurrency code &lt;b&gt;separate &lt;/b&gt;from other code.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Limit &lt;/b&gt;the places where a variable is accessed concurrently to &lt;b&gt;minimum&lt;/b&gt;. Eventually you will forget to synchronize the access in one place.&lt;/div&gt;&lt;br /&gt;If you can introduce &lt;b&gt;immutable &lt;/b&gt;objects &lt;b&gt;instead of synchronizing&lt;/b&gt;, do so. It's &lt;b&gt;worth &lt;/b&gt;the garbage collection overhead.&lt;br /&gt;&lt;br /&gt;Try to &lt;b&gt;partition &lt;/b&gt;your data in such a way that it can be used by &lt;b&gt;independent &lt;/b&gt;threads.&lt;br /&gt;&lt;br /&gt;Use &amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[java.util.concurrent.*]&lt;/span&gt; &lt;b&gt;collections &lt;/b&gt;instead of regular ones. &lt;b&gt;In particular&lt;/b&gt;, you should use &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ConcurrentHashMap]&lt;/span&gt; instead of &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[HashMap]&lt;/span&gt; &lt;b&gt;always&lt;/b&gt;, as it is more performant in general.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Become familiar &lt;/b&gt;with &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[java.util.concurrent.*]&lt;/span&gt;, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[java.util.concurrent.atomic.*]&lt;/span&gt;, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[java.util.concurrent.locks.*]&lt;/span&gt;, e.g. &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[ReentrantLock]&lt;/span&gt; - can be acquired in one method and released in another, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[Semaphore]&lt;/span&gt; - lock with a count, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[CountDownLatch]&lt;/span&gt; - releases all threads after receiving a number of events.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Become familiar &lt;/b&gt;with concurrent &lt;b&gt;execution models&lt;/b&gt;:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;producer-consumer &lt;/b&gt;- and a queue between, as a &lt;i&gt;bound resource &lt;/i&gt;(limited capacity). They have to signal each other, and wait for the signal from another before doing anything.&lt;/li&gt;&lt;li&gt;&lt;b&gt;readers-writers &lt;/b&gt;- where readers read more often than writers write. Writers could wait for all readers to finish before they write, but they will &lt;i&gt;starve &lt;/i&gt;in case of continuous readers. A balance needs to be found.&lt;/li&gt;&lt;li&gt;&lt;b&gt;dining philosophers &lt;/b&gt;- in other words processes competing for resources.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Most concurrency problems are &lt;b&gt;combination &lt;/b&gt;of the three above. &lt;b&gt;Learn &lt;/b&gt;the three above and their &lt;b&gt;solutions&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Keep number of&amp;nbsp;&lt;b&gt;synchronized &lt;/b&gt;sections &lt;b&gt;low, &lt;/b&gt;but also keep those sections &lt;b&gt;as&amp;nbsp;small as possible&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Writing correct &lt;b&gt;shut-down &lt;/b&gt;is &lt;b&gt;harder than you think&lt;/b&gt;. Plan enough &lt;b&gt;time &lt;/b&gt;for that.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Testing concurrent code &lt;/b&gt;does not assure its &lt;b&gt;correctness&lt;/b&gt;. But it can &lt;b&gt;minimize its incorrectness&lt;/b&gt;. Write your tests very varied, with different parameters, try to cover extreme cases. &lt;b&gt;Never &lt;/b&gt;ignore a situation when a test failed just once. Remember that the &lt;b&gt;number of possibilities &lt;/b&gt;of concurrent execution of &lt;b&gt;trivally simple &lt;/b&gt;code is &lt;b&gt;huge&lt;/b&gt;. Chase every bug.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Make sure your code works &lt;b&gt;outside of threads &lt;/b&gt;first.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Make your &lt;b&gt;threaded code pluggable &lt;/b&gt;and &lt;b&gt;tunable&lt;/b&gt;, so that you can test it &lt;b&gt;independently&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Test your threaded code with &lt;b&gt;more threads than processors&lt;/b&gt;. Things happen when the &lt;b&gt;system switches between &lt;/b&gt;the tasks.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Test your code on &lt;b&gt;different platforms&lt;/b&gt; (they have different task switching strategies).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Add &lt;b&gt;random &lt;/b&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;b&gt;[&lt;/b&gt;Object.wait()]&lt;/span&gt;, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[Object.sleep()]&lt;/span&gt;, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[Object.yield()]&lt;/span&gt; and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[Object.priority()]&lt;/span&gt; in your code, to &lt;b&gt;increase possibility of failure&lt;/b&gt;. You can automate it by writting an utility class doing that, and then adding an aspect randomly enabling it or disabling at any method call. There is an example library doing that: https://www.research.ibm.com/haifa/projects/verification/contest/.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Avoid calling &lt;b&gt;one locked section from another&lt;/b&gt;.&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;13. Successive Refinement&lt;/h3&gt;&lt;div&gt;There is a long use case presented. To sum it up: code may be quite nice and clean initially, but once we add new functionality it can become a monster. Always &lt;b&gt;refactor &lt;/b&gt;and &lt;b&gt;clean up&lt;/b&gt;. But &lt;b&gt;not before &lt;/b&gt;you have &lt;b&gt;tests&lt;/b&gt;. Use &lt;b&gt;TDD while refactoring&lt;/b&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;i&gt;Programmers who satisfy themselves with merely working code are behaving unprofessionally.&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;14. JUnit Internals&lt;/h3&gt;[Another use case]&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;15. Refactoring &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;SerialDate&lt;/span&gt;&lt;/h3&gt;[Another use case]&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;16.&amp;nbsp;Smells and Heuristics&lt;/h3&gt;&lt;div&gt;[Set of numbered checks with explanations. I write only the new things.]&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;Comments&lt;/b&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;inappriopriate information&lt;/b&gt; - when the information should rather be &lt;b&gt;somewhere else &lt;/b&gt;(issue tracking system, source control)&lt;/li&gt;&lt;li&gt;&lt;b&gt;obsolete &lt;/b&gt;comment - outdated&lt;/li&gt;&lt;li&gt;&lt;b&gt;redundant &lt;/b&gt;comment - as it is clear from the code&lt;/li&gt;&lt;li&gt;&lt;b&gt;poorly written &lt;/b&gt;comment&lt;/li&gt;&lt;li&gt;&lt;b&gt;commented out code&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;General&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;multiple languages &lt;/b&gt;in one source file&lt;/li&gt;&lt;li&gt;&lt;b&gt;corner cases &lt;/b&gt;not handled (and tests missing)&lt;/li&gt;&lt;li&gt;code at &lt;b&gt;wrong level of abstraction &lt;/b&gt;(e.g. &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[pop()]&lt;/span&gt;, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[push()]&lt;/span&gt;, and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[percentFull()]&lt;/span&gt; in one &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[Stack]&lt;/span&gt; class)&lt;/li&gt;&lt;li&gt;&lt;b&gt;base classes &lt;/b&gt;depending on their &lt;b&gt;derivatives&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;too many functions &lt;/b&gt;in an &lt;b&gt;interface&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;feature envy &lt;/b&gt;- a function tries to read or modify variables of another class than its &lt;b&gt;owner &lt;/b&gt;(though sometimes it may be neccessary)&lt;/li&gt;&lt;li&gt;function with a &lt;b&gt;boolean &lt;/b&gt;input (should be &lt;b&gt;2 functions &lt;/b&gt;instead)&lt;/li&gt;&lt;li&gt;&lt;b&gt;misplaced responsibility &lt;/b&gt;- code should be where the reader &lt;b&gt;expects it to be, &lt;/b&gt;not where it is &lt;b&gt;convenient &lt;/b&gt;for us&lt;/li&gt;&lt;li&gt;&lt;b&gt;inappropriate static&lt;/b&gt; - if we make a function &lt;b&gt;static &lt;/b&gt;it means we do not expect that it is ever polymorphic; e.g. &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[HourlyPaidCalculator.calculatePay(employee, overtimeRate)]&lt;/span&gt; is not really clean&lt;/li&gt;&lt;li&gt;use &lt;b&gt;intermediate variables &lt;/b&gt;- because they can have &lt;b&gt;descriptive names&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;understand &lt;/b&gt;an algorithm &lt;b&gt;before implementing it&lt;/b&gt;; don't rely on &lt;b&gt;try-error &lt;/b&gt;method; don't assume that a function works because it passes all the tests if you don't &lt;b&gt;understand &lt;/b&gt;it; if you have problems understanding it - &lt;b&gt;refactor it &lt;/b&gt;to become more obvious&lt;/li&gt;&lt;li&gt;make &lt;b&gt;logical dependencies physical&lt;/b&gt; (e.g. placing a constant in one place with a value that needs to match another value somewhere else is not a good idea)&lt;/li&gt;&lt;li&gt;make &lt;b&gt;temporal coupling &lt;/b&gt;visible&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Java&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;[nothing new]&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Names&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;choose names &lt;b&gt;appropriate to current level of abstraction&lt;/b&gt; (i.e. general enough to cover all cases), e.g. &lt;i&gt;connectionLocator &lt;/i&gt;instead of &lt;i&gt;phoneNumber&lt;/i&gt;&lt;/li&gt;&lt;li&gt;the&amp;nbsp;&lt;b&gt;length&amp;nbsp;of a&amp;nbsp;variable&amp;nbsp;name &lt;/b&gt;should be prortional to the &lt;b&gt;scope &lt;/b&gt;of the&amp;nbsp;variable - for example loop counter is usually one character long and it's better than a loger name&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Tests&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;use &lt;b&gt;test coverage &lt;/b&gt;tool&lt;/li&gt;&lt;li&gt;don't skip &lt;b&gt;trivial &lt;/b&gt;tests&lt;/li&gt;&lt;li&gt;test &lt;b&gt;corner cases&lt;/b&gt;&lt;/li&gt;&lt;li&gt;test exhaustively &lt;b&gt;around found bugs &lt;/b&gt;- they often hang out in &lt;b&gt;groups&lt;/b&gt; :P&lt;/li&gt;&lt;li&gt;keep your tests &lt;b&gt;fast &lt;/b&gt;(so that you want to run them)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;17. Appendix A: Concurrency II&lt;/h3&gt;&lt;div&gt;[I'll just write some selected stuff]&lt;br /&gt;&lt;br /&gt;It's a common &lt;b&gt;misconception &lt;/b&gt;that &lt;b&gt;increment operation&lt;/b&gt; ++ is &lt;b&gt;atomic&lt;/b&gt;. &lt;b&gt;Assigment &lt;/b&gt;is usually also not. Something like 8 steps can be involved in single assignment on the level of &lt;b&gt;byte code&lt;/b&gt;, hence so many possible paths of execution in a multithreaded environment.&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;That's why &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[&lt;b&gt;AtomicInteger&lt;/b&gt;]&lt;/span&gt;, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[&lt;b&gt;AtomicReference&lt;/b&gt;]&lt;/span&gt; and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[&lt;b&gt;AtomicBoolean&lt;/b&gt;]&lt;/span&gt; are there since Java 5. They are &lt;b&gt;not slower &lt;/b&gt;(because of special CAS feature of modern processors, which basically means that instead of locking, it just retries until it succeeds).&lt;/blockquote&gt;&lt;b&gt;Nonthread-safe &lt;/b&gt;classes:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;SimpleDateFormat&lt;/li&gt;&lt;li&gt;Database Connections&lt;/li&gt;&lt;li&gt;Containers in java.util.*&lt;/li&gt;&lt;li&gt;Servlets&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Example of something &lt;b&gt;not being thread safe &lt;/b&gt;even though each method &lt;b&gt;separately &lt;/b&gt;is; assume that&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[hasNext()]&lt;/span&gt;&amp;nbsp;and&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[next()]&lt;/span&gt;&amp;nbsp;are both &lt;b&gt;synchronized&lt;/b&gt;:&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[if (myThreadSafeIterator.hasNext()){&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;process(myThreadSafeIterator.next());&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;}]&lt;/span&gt;&lt;/blockquote&gt;- between &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[hasNext()]&lt;/span&gt; and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[next()]&lt;/span&gt;&amp;nbsp;there is a &lt;b&gt;break&lt;/b&gt;, and if this code is executed in &amp;gt;1 thread, the threads can interleave exactly here, and cause one thread to go beyond the iterator.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Solutions&lt;/b&gt;:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;wrap the whole code block into another &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[synchronized(myThreadSafeIterator)]&lt;/span&gt; block (extract the call to "process" beyond it, to keep it as short as possible). This is&amp;nbsp;&lt;b&gt;client-based locking&lt;/b&gt;. Not very reliable solution (someone may forget to add this).&lt;/li&gt;&lt;li&gt;change the design of iterator, by merging both methods into one, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[getNextOrNull()]&lt;/span&gt;. This is &lt;b&gt;server-side locking&lt;/b&gt;. Trivial isn't it. If you cannot change the server side code, e.g. because it is a 3rd party library, &lt;b&gt;add an adapter&lt;/b&gt;&amp;nbsp;...or use another library :P&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Book recommendation: &lt;i&gt;Doug Lea "Concurrent Programming in Java: Design Principles and Patterns"&lt;/i&gt;.&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;18.&amp;nbsp;Appendix B: org.jfree.date.SerialDate&lt;/h3&gt;[Just full source code for the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;SerialDate&lt;/span&gt;&lt;span style="font-family: inherit;"&gt; &lt;/span&gt;use case]&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/6637473164435863327/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2016/01/clean-code-robert-c-martin-notes.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/6637473164435863327'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/6637473164435863327'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2016/01/clean-code-robert-c-martin-notes.html' title='&quot;Clean Code&quot; Robert C. Martin'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://1.bp.blogspot.com/-sPTePip1-4Y/VpfEAGRrCwI/AAAAAAAACVE/f634aJu_RYk/s72-c/dirty%2Btests.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-1069023866261926173</id><published>2015-01-13T15:44:00.000+01:00</published><updated>2016-05-27T11:20:17.799+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Enterprise Integration with Spring Certification</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;These are my notes I took before taking the &lt;b&gt;Enterprise Integration with Spring Certification &lt;/b&gt;exam.&lt;br /&gt;&lt;br /&gt;I passed the exam. At the second attempt, after actually taking those notes. The fist attempt was after 1-2 weeks of preparation and it was unnecessarily rushed (I knew it's too early, if you think it's too early it's probably too early), The most difficult thing in preparation for this exam was keeping all those different new things separate in my head and not mixing them up. As soon as I knew where I am in the imaginary table of contents, everything was clear. What helped in organising the knowledge was reading &lt;a href="http://learningmonik.blogspot.de/2015/01/spring-integration-in-action.html" target="_blank"&gt;this book&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;There is some overlap of this exam with the first Spring Core exam. There is also some stuff that logically would belong to Spring Integration but is actually not part of the exam - the amount of material is simply too big to squeeze everything. That is why it is essential to read the official study guide and study according to it. Or to my notes below (which follow the guide) :P &lt;br /&gt;&lt;h3 style="font-weight: bolder; margin: 0.83em 0px; padding: 0px; position: relative;"&gt;&lt;span style="font-family: inherit; font-size: 21px; line-height: 1.5; white-space: pre-wrap;"&gt;Remoting&lt;/span&gt;&lt;/h3&gt;&lt;div style="background-color: white; color: #333333; margin: 0px; outline: none; padding: 0px;"&gt;&lt;ol style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The concepts involved with Spring Remoting on both server- and client-side &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Exporters on server side, bind a service to registry, or expose an endpoint; no code change to the service&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;ProxyFactoryBeans on client side, which handle the communication and convert &lt;/span&gt;&lt;span style="background-color: transparent; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;exceptions&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;; you inject the instance of service which in in fact a dynamic proxy (polymorphism)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The benefits of Spring Remoting over traditional remoting technologies &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Hide ‘plumbing’ code&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;Support multiple protocols in a &lt;/span&gt;&lt;span style="background-color: transparent; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;consistent&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt; way (normally it’s violation of concerns, business logic mixed with remoting infrastructure)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Configure and expose services declaratively (configuration-based approach)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The remoting protocols supported by Spring &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;RMI&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;uses RMI registry, Java serialisation&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;HttpInvoker&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;HTTP based (POST), Java serialisation&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;Hessian / Burlap&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;HTTP based, binary/txt XML serialisation&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Stateless EJB (not mentioned in the training)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 55.5pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="84"&gt;&lt;/col&gt;&lt;col width="423"&gt;&lt;/col&gt;&lt;col width="419"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;Server side&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;Client side&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;RMI&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean class="&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;RmiServiceExporter&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:service-name value="myServiceNameInRegistry"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:service-interface value="...TheService"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:service ref="myService"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:registry-port="1099"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id, class="&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;RmiProxyFactoryBean&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:service-interface value="myService"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:service-url value="rmi://foo:1099/myServiceName&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;InRegistry"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;Http&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;Invoker&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean &lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;name="/transfer" &lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;class="&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;HttpInvokerServiceExporter&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:service-interface value="...TheService"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:service ref="myService"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;+ DispatcherServlet or HttpRequestHandlerServlet with name ”&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;transfer&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;”&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id, class="&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;HttpInvokerProxyFactoryBean&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:service-interface value="myService"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:service-url value="rmi://foo:8080/services/transfer"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 27px;"&gt;&lt;td style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;Hessian / Burlap&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(217, 217, 217); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;same as above, replace “HttpInvoker” with “Hessian” / “Burlap”&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ol start="4" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="4" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;How Spring Remoting-based RMI is less invasive than plain RMI &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Spring HTTP Invoker: how client and server interact with each other &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div style="margin: 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;;"&gt;&lt;span style="font-size: 15px; white-space: pre-wrap;"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: inherit; font-size: 21px; line-height: 1.15; white-space: pre-wrap;"&gt;Web Services&lt;/span&gt;&lt;br /&gt;&lt;ol start="4" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;How do Web Services compare to Remoting and Messaging&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;information exchange protocol and format is HTTP and XML (or JSON) =&amp;gt; no firewalls in between&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;two ways of using the HTTP to transfer XML&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: circle; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;SOAP/POX and WSDL/XSD - &amp;nbsp;contract-first, they use only POST and/or GET method for all the operations&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: circle; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;REST&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;“loose coupling – we define document-oriented contract between service consumers and providers&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;interoperability – XML payload (is understood by all major platforms like Java. NET, C++, Ruby, PHP, Perl,...)”&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The approach to building web services that Spring-WS supports &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;is contract-first approach (start with XSD / WSDL)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;POX / SOAP + WSDL&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;WebServiceClient - support for creating e.g. SOAP message&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 107.25pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="154"&gt;&lt;/col&gt;&lt;col width="268"&gt;&lt;/col&gt;&lt;col width="462"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 27px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;SOAP / POX (Spring WS)&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 27px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;web.xml&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;si-ws-gateway&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;MessageDispatcherServlet&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;init-param&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;param-value&amp;gt;si-ws-config.xml&amp;lt;/param-value&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;/init-param&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;si-ws-gateway&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;url-pattern&amp;gt;/quoteservice&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;* also add contextConfigLocation as context-param and ContextLoaderListener for app context&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;web infrastr. config&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean class="....UriEndpointMapping"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;p:name="defaultEndpoint" ref="&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;ws-inbound-gateway&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;app config&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;context:component-scan base-package=”transfers.ws”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;ws:annotation-driven/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;Endpoint implementation&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;@Endpoint&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;public class TransferServiceEndpoint {&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;...&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;@PayloadRoot(localPart=”transferRequest”, namespace=”&lt;/span&gt;&lt;a href="http://mybank.com/schemas/tr" style="color: #009eb8; display: inline; outline: none; text-decoration: none; transition: color 0.3s;"&gt;&lt;span style="color: #1155cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;http://mybank.com/schemas/tr&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;”&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;public @ResponsePayload TransferResponse newTransfer(@RequestPayload TransferRequest request){&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;}&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="color: #333333; vertical-align: baseline; white-space: pre-wrap;"&gt;@PayloadRoot &lt;/span&gt;&lt;span style="color: #333333; vertical-align: baseline; white-space: pre-wrap;"&gt;defines the resource path, &lt;/span&gt;&lt;span style="color: #333333; vertical-align: baseline; white-space: pre-wrap;"&gt;@ResponsePayload &lt;/span&gt;&lt;span style="color: #333333; vertical-align: baseline; white-space: pre-wrap;"&gt;and &lt;/span&gt;&lt;span style="color: #333333; vertical-align: baseline; white-space: pre-wrap;"&gt;@RequestPayload &lt;/span&gt;&lt;span style="color: #333333; vertical-align: baseline; white-space: pre-wrap;"&gt;are for XML mapping&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 108pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="903"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;int-ws:inbound-gateway id="ws-inbound-gateway"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;request-channel="ws-requests"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;extract-payload="false"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[marshaller/unmarshaller=”jaxb2”]/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The Object-to-XML frameworks supported by Spring-OXM (or Spring 3.0) &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;JAXB1/2, Castor, XMLBeans, JiBX&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;XStream (not mentioned in training)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;also XPath argument binding&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 108pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="883"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 92px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;oxm:jaxb2-marshaller &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;id=”marshaller” &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;contextPath=”reward.ws.types:someotherpackage”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;, or just simply&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;ws:annotation-driven/&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;lt;!-- registers all infrastructure beans needed for annotation-based endpoints, like JAXB2 (un)marshalling--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="4" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="4" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;The strategies supported to map requests to endpoints (?) &lt;/span&gt;&lt;span style="background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;(&lt;/span&gt;&lt;a href="http://docs.spring.io/spring-ws/site/reference/html/server.html#server-endpoint-mapping" style="color: #009eb8; display: inline; outline: none; text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;link&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;@PayloadRoot - on method level, requires &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;namespace&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;+&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;localPart&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt; values, which build the URL qualifier; needs the &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;PayloadRootAnnotationMethodEndpointMapping&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt; registered;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;SOAP Action Header - based on the &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;To &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;and &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;Action &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;SOAP headers, @SoapAction: on method level “&lt;/span&gt;&lt;span style="background-color: transparent; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;Whenever a message comes in which has this SOAPAction header, the method will be invoked&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;.”&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 108.75pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="903"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;SOAP-ENV::Header&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;wsa:To S:mustUnderstand="true"&amp;gt;http://example/com/fabrikam&amp;lt;/wsa:To&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;wsa:Action&amp;gt;http://example.com/fabrikam/mail/Delete&amp;lt;/wsa:Action&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/SOAP-ENV:Header&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: inherit;"&gt;WS-Addressing, or AnnotationActionEndpointMapping, also AddressingEndpointInterceptor - annotate the handling methods with the&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;@Action("http://samples/RequestOrder")&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt; annotation&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 110.25pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="901"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;@Action("http://samples/RequestOrder")&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;public Order getOrder(OrderRequest orderRequest) {&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;return orderService.getOrder(orderRequest.getId());&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;XPath - &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;@Namespace(prefix = "s", uri="http://samples")&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt; annotation on class/method level, and&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt; &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;@XPathParam("/s:orderRequest/@id") int orderId &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;in the method - the attribute will be given the value which is the evaluation of the XPath expression&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 108pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="904"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;@PayloadRoot(localPart = "orderRequest", namespace = "http://samples")&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;@Namespace(prefix = "s", uri="http://samples")&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;public Order getOrder(@XPathParam("/s:orderRequest/@id") int orderId) {&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;Order order = orderService.getOrder(orderId);&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;// create Source from order and return it&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Message Payload - e.g. @RequestPayload Element inside the method&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Of these strategies, how does @PayloadRoot work exactly? &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;it’s written above, but: &lt;/span&gt;&lt;span style="background-color: transparent; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;“&lt;/span&gt;&lt;span style="font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;The PayloadRootAnnotationMethodEndpointMapping uses the @PayloadRoot annotation, with the localPart and namespace elements, to mark methods with a particular qualified name. Whenever a message comes in which has this qualified name for the payload root element, the method will be invoked.“&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The functionality offered by the WebServiceTemplate &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;does the SOAP stupid stuff, and also POX&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;works with marshallers / unmarshallers (set the “marshaller” and “unmarshaller” propperty)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;convenience methods&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;callbacks&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;error handling (annotate method with &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;@SoapFault(faultCode=FaultCode.CLIENT)&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;SoapFaultMessageResolver &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;is default)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 108pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="883"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean class=”...WebServiceTemplate”&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”defaultUri” value=”&lt;/span&gt;&lt;a href="http://mybank.com/transfer%E2%80%9D/" style="color: #009eb8; display: inline; outline: none; text-decoration: none; transition: color 0.3s;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;http://mybank.com/transfer”&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”marshaller” ref=”marshallerAndUnmarshaller”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”unmarshaller” ref=”marshallerAndUnmarshaller”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”faultMessageResolver” ref=”myCustomFaultMessageResolver”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id=”marshallerAndUnmarshaller” class=”...CastorMarshaller”&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”mappingLocation” value=”classpath:castor-mapping.xml”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;template.marshallSendAndReceive(new TransferRequest(“S123”));&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;template.sendSourceAndReceiveToResult(source, result);&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;full definition, e.g.:&lt;/span&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: 'Courier New'; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;doSendAndReceive(MessageContext messageContext, WebServiceConnection connection, WebServiceMessageCallback requestCallback, WebServiceMessageExtractor&amp;lt;T&amp;gt; responseExtractor) &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;the template by default uses Java's &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;HttpUrlConnectionMessageSender&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;, if you wanna apache client, override "messageSender" with &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;HttpComponentsMessageSender&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;it’s also possible to use &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;JmsMessageSender&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;The underlying WS-Security implementations supported by Spring-WS (&lt;/span&gt;&lt;a href="http://docs.spring.io/spring-ws/docs/2.2.0.RELEASE/reference/htmlsingle/#security" style="color: #009eb8; display: inline; outline: none; text-decoration: none; transition: color 0.3s;"&gt;&lt;span style="background-color: transparent; color: #1155cc; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;link&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;are implemented as interceptors&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;XwsSecurityInterceptor &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;(requires Sun JVM and SAAJ) - requires security policy XML configuration file&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;Wss4jSecurityInterceptor &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;(also supports non-Sun JVMs and Axiom)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;support for Spring Security and JAAS keystores (JAAS goes with wss)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;also client-side interceptors, which are injected in the WebServiceTemplate&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;supports: authentication, digital signatures, encryption and decryption&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;exception handling: &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;WsSecuritySecurementException &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;(just logs), &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;WsSecurityValidationException &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;(translated to SOAP Fault)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 108pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="883"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;ws:interceptors&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;bean class=”blabla.SoapEnvelopeLoggingInterceptor”&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/ws:interceptors&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;or&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;ws:interceptors&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;ws:payloadRoot localPart=”MyRequest” namespaceUri=”htpp://blabla.com/namespace”&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;bean class=”blabla.SoapEnvelopeLoggingInterceptor”&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;/ws:payloadRoot&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/ws:interceptors&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;client-side:&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean class=”org...WebServiceTemplate”&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”interceptors”&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;bean class=”blablabalInterceptor”&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ol start="8" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="8" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;How key stores are supported by Spring-WS for use with WS-Security (?)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: inherit;"&gt;in Java, the keystores are of type&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;java.security.KeyStore&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt; and they store:&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;private keys&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;symmetric keys&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;trusted certificates&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Spring provides &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;KeyStoreFactoryBean&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; &lt;/span&gt;&lt;span style="font-family: inherit;"&gt;and &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;KeyStoreCallbackHandler&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 106.5pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="905"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(204, 204, 204); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id="keyStore" class="org.springframework.ws.soap.security.support.KeyStoreFactoryBean"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name="password" value="password"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name="location" value="classpath:org/springframework/ws/soap/security/xwss/test-keystore.jks"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id="keyStoreHandler" class="org.springframework.ws.soap.security.xwss.callback.KeyStoreCallbackHandler"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name="keyStore" ref="keyStore"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name="privateKeyPassword" value="changeit"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id="wsSecurityInterceptor"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;class="org.springframework.ws.soap.security.xwss.XwsSecurityInterceptor"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name="policyConfiguration" value="classpath:securityPolicy.xml"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name="callbackHandlers"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;ref bean="keyStoreHandler"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;ref bean="...&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/list&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: inherit; font-size: 21px; line-height: 1.5; white-space: pre-wrap;"&gt;RESTful services with Spring-MVC &lt;/span&gt;&lt;br /&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The main REST principles&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;(makes HTTP not only transport protocol, but also application protocol)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;H &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;Hypermedia (links)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;U &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;Uniform Interface (nouns for resources, verbs for operations: GET, POST, PUT, DELETE, HEAD, OPTIONS)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;S &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;Stateless Conversation =&amp;gt; scalable&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;I &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;Identifiable Resources&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;R &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;Resource Representations (multiple representations for resource, which is abstract; Accept header in req, Content-Type in res)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 73.5pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="97"&gt;&lt;/col&gt;&lt;col width="169"&gt;&lt;/col&gt;&lt;col width="146"&gt;&lt;/col&gt;&lt;col width="296"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: right;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;Method&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;Safe (no side effects)&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;Indepotent&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;Comments&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: right;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;GET&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;y&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;y&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Is cacheable (ETag) or Last-Modified, 304&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: right;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;HEAD&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;y&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;y&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: right;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;POST&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;n&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;n&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Location header in response&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: right;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;PUT&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;n&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;y&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Create OR update&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: right;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;DELETE&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;n&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px; text-align: center;"&gt;y&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="2" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="2" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: Arial; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;REST support in Spring-MVC &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 73.5pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="149"&gt;&lt;/col&gt;&lt;col width="318"&gt;&lt;/col&gt;&lt;col width="462"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 27px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;SOAP / POX (Spring WS)&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 27px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;web.xml&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;servlet-name&amp;gt;http-ws-gateway&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;HttpRequestHandlerServlet&lt;/span&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;lt;init-param&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;param-value&amp;gt;http-ws-gateway.xml&amp;lt;/param-value&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;servlet-name&amp;gt;http-ws-gateway&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;url-pattern&amp;gt;/httpquote&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;web infrastr. config&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;int-http:inbound-gateway &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;id="http-inbound-gateway"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;request-channel="http-request"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;reply-channel="http-response"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;extract-reply-payload="false"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;view-name="about"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;reply-key, reply-timeout,message-converters, &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;supported-methods, convert-exceptions, &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;request-payload-type, error-code, errors-key,&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;header-mapper, name/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="color: #333333; font-family: Arial; font-size: 13px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;name - e.g. "/subscribe", so that it allows it to be used with DispatcherServlet&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="color: #333333; font-family: Arial; font-size: 13px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;view-name - is the Spring MVC view name&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="color: #333333; font-family: Arial; font-size: 13px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;you can also use inbound-message-adapter if you don't need two way communication, it uses MessageTemplate&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;app config&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;N/A&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;Endpoint implementation&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td colspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;@Controller&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;@RequestMapping(“/rewards”)&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;public class Blabla{&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;@RequestMapping(value=”/{number}”, method=GET)&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;public String Reward blabla(@RequestBody someObject / Model model, @PathVariable(“number”) String number){&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;// ...&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;// return view name&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;}&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;@RequestMapping(method=POST)&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;@ResponseStatus(HttpStatus.CREATED)&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;public @ResponseBody Reward blabla(@RequestBody someObject, HttpServletResponse res){&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;// ...&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;res.addHeader(“Location”, getMeUrl(order.getId()));&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;// return the object, will be mapped because of @ResponseBody, by converter based on Accept header&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;}&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 13px; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;you can also add e.g. &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;@ResponseStatus(value=HttpStatus.CONFLICT)&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; &lt;/span&gt;&lt;span style="font-family: inherit;"&gt;on your Exception class, to have the exception mapped&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;alternatively to the above, in your controller you can add an empty void method annotated with &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@ExceptionHandler(value=YourException.class)&lt;/span&gt;&lt;span style="font-family: inherit;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;and &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;@ResponseStatus(value=HttpStatus.NOT_FOUND)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 55.5pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="973"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(153, 153, 153); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;int-http:outbound-gateway&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;url="http://blblah"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;request-channel="requests"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;http-method="GET"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;expected-response-type="java.lang.String"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;int-http:uri-variable &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name="location" &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;expression="payload"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/int:http:outbound-gateway&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="color: #333333; font-family: Arial; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 6pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;you can use outbound-channel-adapter if you don't need two way communication, it uses RestTemplate;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="color: #333333; font-family: Arial; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="vertical-align: baseline; white-space: pre-wrap;"&gt;in the case above it's better to override the error handler, as the default one treats only 4** and 5** responses as errors&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Spring-MVC is an alternative to JAX-RS, not an implementation &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;got it ;)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The @RequestMapping annotation, including URI template support &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The @RequestBody and @ResponseBody annotations &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The functionality offered by the RestTemplate&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;for client side&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;has default &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;HttpMessageConverters &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;(same like on server), supports URI templates&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;e.g. &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;Jaxb2RootElementHttpMessageConverter&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: inherit;"&gt;, register it with&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;mvc:annotation-driven/&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt; !&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;it can also use external configuration, e.g. Apache Commons HTTP Client (set the “&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;requestFactory&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;” property to &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;CommonsCliemtHttpRequestFactory&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;HttpEntity &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;represents request or response (payload + headers)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 75pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="947"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;T&amp;gt; T &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;getForObject&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;(URIurl, Class&amp;lt;T&amp;gt;responseType) throws RestClientException; ← &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;returns the object from GET&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;T&amp;gt; T getForObject(Stringurl, Class&amp;lt;T&amp;gt;responseType, Object... uriVariables)throwsRestClientException;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;T&amp;gt; T getForObject(Stringurl, Class&amp;lt;T&amp;gt;responseType, Map&amp;lt;String, ?&amp;gt;uriVariables)throwsRestClientException;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;T&amp;gt; ResponseEntity&amp;lt;T&amp;gt; &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;getForEntity&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;(URI url, Class&amp;lt;T&amp;gt; responseType)&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;throws RestClientException; ← &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-style: italic; vertical-align: baseline; white-space: pre-wrap;"&gt;returns the whole response from GET (with headers)&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;void &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;put&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;(String url, Object request, Object...uriVariables) throws RestClientException;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;void &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;delete&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;(String url, Map&amp;lt;String, ?&amp;gt;uriVariables) throws RestClientException;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;T&amp;gt; T &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;postForObject&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;(String url,Object request,Class&amp;lt;T&amp;gt; responseType, Object… uriVariables) throws RestClientException;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;T&amp;gt; ResponseEntity &amp;lt;T&amp;gt; &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;postForEntity&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;(String url, Object request, Class&amp;lt;T&amp;gt; resType, Object...uriVariables) &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;throws RestClientException;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px 0pt 36pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;* URI url=response.getHeaders().getLocation(); ← to get location of the new resource!&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;T&amp;gt; T &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;execute&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;()&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;T&amp;gt; ResponseEntity &amp;lt;T&amp;gt; &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;exchange&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;(String url, HttpMethod method, HttpEntity&amp;lt;?&amp;gt; reqEntity, Class&amp;lt;T&amp;gt; resType, Object... uriVariables) &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;throws RestClientException;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: inherit; font-size: 21px; line-height: 1.5; white-space: pre-wrap;"&gt;JMS with Spring&lt;/span&gt;&lt;br /&gt;&lt;ol start="4" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Where can Spring-JMS applications obtain their JMS resources from &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;either create manually (standalone), or obtain from JNDI:&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 72pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="125"&gt;&lt;/col&gt;&lt;col width="825"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 28px;"&gt;&lt;td rowspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Destination&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id=”orderQueue” class=”org.apache.activemq...ActiveMQQueue”&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;constructor-arg value=”queue.orders”/&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;jee:jndi-lookup id=”orderQueue” jndi-name=”jms/OrderQueue”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td rowspan="2" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;ConnectionFactory&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id=”cf” class=”org.apache.activemq.ActiveMQConnectionFactory”&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”brokerURL” value=”tc[://localhost:61616”/&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br class="kix-line-break" /&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;jee:jndi lookup id=”cf” jndi-name=”jms/ConnectionFactory”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Connection&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;connectionFactory.createConnection();&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Session&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;created from the &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Connection&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;JMS Message&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;td rowspan="3" style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;created from &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Session&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;session.createProducer(destination);&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;MessageProducer&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style="height: 28px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;MessageConsumer&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="2" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="2" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The functionality offered by Spring's JMS message listener container, including the use of a MessageListenerAdapter through the 'method' attribute in the &amp;lt;jms:listener/&amp;gt; element&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;MessageListener an interface for asynchronous reception of messages; one method: &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;void onMessage(Message)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;implement MessageListener, or &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;SessionAwareMessageListener &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;(extends MessageListener)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;requires a listener container - in the past EJB container, now&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;SimpleMessageListenerContainer &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;- fixed number of sessions&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;DefaultMessageListenerContainer &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;- adds transactional capability&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 70.5pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="953"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(204, 204, 204); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;jms:listener-container connection-factory=”cf”&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;jms:listener destination=”queue.orders” &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ref=”myListener&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; color: #b7b7b7; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;method=”order”&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; color: #b7b7b7; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;response-destination=”queue.confirmation&lt;/span&gt;&lt;span style="background-color: transparent; color: #cccccc; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;”&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/jms:listener-container&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The functionality offered by the JmsTemplate&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;converts exceptions to unchecked&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;convenience methods&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;needs reference to &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;ConnectionFactory&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;, optionally set defaultDestination property&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;use &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;CachingConnectionFactory &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: inherit;"&gt;wrapper around the &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ActiveMQConnectionFactory&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;, as JmsTemplate aggresively opens and closes and reopens JMS resources&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;uses&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;MessageConverter &lt;/span&gt;&lt;span style="font-family: inherit;"&gt;(default &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;SimpleMessageConverter&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt; - handles String, Serializable, Map, byte[]) - from/to Message&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;DestinationResolver &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;(&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;default &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;DynamicDestinationResolver, JndiDestinationResolver)&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;- from String to Destination&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 69.75pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="954"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;void convertAndSend([String/Destination d,] Object m)&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;void convertAndSend(Object m, MessagePostProcessor mpp)&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; → to do stuff to the message after it has been converted&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;void send(MessageCreator mc) &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;→ is used inside convertAndSend()&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Object execute(ProducerCallback&amp;lt;T&amp;gt; action)&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Object execute(SessionCallback&amp;lt;T&amp;gt; action)&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Message receive([String/Destination d,])&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Object receiveAndConvert(destination)&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: inherit; font-size: 21px; line-height: 1.5; white-space: pre-wrap;"&gt;Transactions&lt;/span&gt;&lt;br /&gt;&lt;ol start="5" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Local JMS Transactions with Spring&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;acknowledge mode - not transactions &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;connection.createSession(transacted=false, acknowledgeMode)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;AUTO_ACKNOWLEDGE (default) =&amp;gt; calling .receive() or onMessage() = removing message from the queue&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;CLIENT_ACKNOWLEDGE =&amp;gt; client must call message.acknowledge(), and this one call will remove all messages since last time! (which are bound to the same session). And client can also call session.recover() to have redelivery of those messages (can be duplicates)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;DUPS_OK_ACKNOWLEDGE =&amp;gt; like auto but lazily, once every few times&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: inherit;"&gt;transacted session -&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;connection.createSession(transacted=true, null)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;starts local JMS when no managed JMS or JTA transaction is in progress; will be synchronised with existing local transaction&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;transaction starts, when message is received&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;if a message fails, it will be put back on the queue&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;How to enable local JMS transactions with Spring's message listener container&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 69.75pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="954"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;jms:listener-container acknowledge=”&lt;/span&gt;&lt;span style="background-color: transparent; color: #b7b7b7; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;auto|client|dups_ok|&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;transacted”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;or&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;jms:listener-container transaction-manager=”tm”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;connection.createSession(transacted=true, acknowledgeMode);&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;session.commit();&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;session.rollback();&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;If and if so, how is a local JMS transaction made available to the JmsTemplate&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 72pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="951"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean class=”..JmsTemplate&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; color: #b7b7b7; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name=”sessionAcknowledgeMode” value=”...”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name=”sessionTransacted” value=”true”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;jmsTemplate will automatically use same session (&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;ConnectionFactoryUtils.doGetTransactionalSession()&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;), so the above settings are ignored in case the session was created within an active transaction already&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;How does Spring attempt to synchronize a local JMS transaction and a local database transaction (?)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Commit database before JMS (can end up with duplicates), and at the end&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Put commits close together&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;only as last resort use XA&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The functionality offered by the JmsTransactionManager (?)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;JmsTransactionManager&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; &lt;/span&gt;&lt;span style="font-family: inherit;"&gt;or &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;DataSourceTransactionManager &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;are both implementations of &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;PlatformTransactionManager&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;“Performs local resource transactions, binding a JMS Connection/Session pair from the specified &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;ConnectionFactory &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;to the thread&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;JmsTemplate &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;auto-detects an attached thread and participates automatically with Session&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: inherit;"&gt;The &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;JmsTransationManager &lt;/span&gt;&lt;span style="font-family: inherit;"&gt;allows a &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;CachingConnectionFactory &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;that uses a single connection for all JMS access (performance gains). All Sessions belong to the same connection”&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;What guarantees does JTA provide that local transactions do not provide&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;once-and-once-only delivery&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;ACID with multiple resources&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;How to switch from local to global JTA transactions&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 70.5pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="953"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;jms:listener-container transaction-manager=”transactionManager” ../&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;you also may have to reconfigure some resources like Hibernate&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Where can you obtain a JTA transaction manager from&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;within J2EE server:&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 110.25pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="900"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(204, 204, 204); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;tx:jta-transaction-manager/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;jee:jndi-lookup id=”dataSource” jndi-name=”java:comp/env/jdbc/myDS”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;jee:jndi-lookup id=”connectionFactory” jndi-name=”java:comp/env/jdbc/myConnFac”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;standalone definition:&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 106.5pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="905"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(204, 204, 204); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id=”transactionManager” class=”org….JtaTransactionManager”&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”transactionManager” ref=”jtaTxMgr”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”userTransaction” ref=”userTx”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: Arial; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;this class is provided by Spring, but it only integrates with external JTA TX manager (e.g. Atomikos was used in course)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: Arial; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;the externally provided transactionManager and userTransaction resources have to be of type “XA aware”&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div style="margin: 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;;"&gt;&lt;span style="font-size: 15px; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;trebuchet ms&amp;quot;; font-size: 21px; line-height: 1.5; white-space: pre-wrap;"&gt;Batch processing with Spring Batch&lt;/span&gt;&lt;span style="font-family: &amp;quot;trebuchet ms&amp;quot;; font-size: 21px; line-height: 1.5; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: Arial; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;Main concepts (Job, Step, Job Instance, Job Execution, Step Execution, etc.) &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: Arial; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;easy, see also &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1Bk3cR5GoH-yMURSaZH47FSBawiAaY68BFsYiOlPzTms/edit#" style="color: #009eb8; display: inline; outline: none; text-decoration: none; transition: color 0.3s;"&gt;&lt;span style="background-color: transparent; color: #1155cc; font-family: &amp;quot;arial&amp;quot;; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;here&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: Arial; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;job execution has status, but job instance (job+parameters) also has a status, the “overall status”&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 108pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="903"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;job id="resendUnprocessedDinings"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;step id="processConfirmationsStep" next="sendUnprocessedDiningsStep"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;tasklet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;chunk reader="confirmationReader" &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writer="confirmationUpdater"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;commit-interval="${chunk.size}"&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reader-transactional-queue="true"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/tasklet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;/step&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/job&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="2" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="2" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The interfaces typically used to implement a chunk-oriented Step&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Step for one chunk goes like this:&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: inherit;"&gt;ItemReader, &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ItemReader&amp;lt;Dining&amp;gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;,&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt; public Dining read(){}&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ItemProcessor &lt;/span&gt;&lt;span style="font-family: inherit;"&gt;(optional), &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;ItemProcessor&amp;lt;XMLDining, Dining&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;, &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;public Dining process(XMLDining bla){}&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ItemWriter&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;, &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;ItemWriter&amp;lt;Dining&amp;gt;&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;,&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt; public write(List&amp;lt;? extends Dining&amp;gt; dinings){}&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 102.75pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="910"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(204, 204, 204); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id="itemReader" class="....&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;FlatFileItemReader&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;" scope="step"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name="resource" value="file://#{jobParameters['filena']}"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name="lineMapper"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;bean class="....DefaultLineMapper"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name="lineTokenizer"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;bean class="....DelimitedLineTokenizer"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name="names" value="source,dest,amount,date"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;property name="fieldSetMapper" ref=”myMapper”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id="itemWriter" class="....&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; font-weight: bold; vertical-align: baseline; white-space: pre-wrap;"&gt;FlatFileItemWriter&lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;" scope="step"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;lt;property name=”fieldSetCreator” ref=”customCreator”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;...&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="3" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;How and where state can be stored&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;in &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;JobRepository&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;it can use database or in &amp;nbsp;memory map&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: disc; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;persists &amp;nbsp;jobs’ metadata and intermediate state of execution (=job instance and job execution)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 107.25pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="904"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;batch:job-repository id=”jobRepository”/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px 0pt 108pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;arial&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;, or&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 108pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="903"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;batch:job-repository &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;data-source="dataSource" &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id="jobRepository" &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;transaction-manager="transactionManager" &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;table-prefix="BATCH_"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;ul style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: Arial; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;JobLauncher creates JobExecution entity in the JobRepository, next it executes the job, and returns the result&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: Arial; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px 0pt; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;JobLauncher is already wrapped in &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; vertical-align: baseline; white-space: pre-wrap;"&gt;CommandLineJobRunner&lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;, if you wanna use it&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-family: Arial; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.15; margin: 10pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; vertical-align: baseline; white-space: pre-wrap;"&gt;jobLauncher.run(job, parameters)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 110.25pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="900"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;bean id="jobLauncher" class="....SimpleJobLauncher"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;lt;property name="jobRepository" ref="jobRepository"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="4" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="4" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;What are job parameters and how are they used&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;they identify the job instance, same instance cannot be run twice thats why add there some counter&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;in case same job instance is attempted to be re-launched you will get &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;JobInstanceAlreadyCompletedException&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;you create it programmatically using builder: &amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 105.75pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="906"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;JobParametersBuilder jpb = new JobParametersBuilder();&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;jpb.addString('filena', 'payment.xml');&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.33636; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="color: #333333; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;JobExecution execution = jobLauncher.run(job, jpb.toJobParameters());&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol start="5" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol start="5" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;What is a FieldSetMapper and what is it used for&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;FieldSetMapper&amp;lt;T&amp;gt; → T mapFieldSet(FieldSet fs)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;used by e.g. LineMapper (e.g. &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;DefaultLineMapper&lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;), which is used by &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;FlatFileItemReader&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 71.25pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="952"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Date date = fs.readDate(0,"dd/MM/yyyy");&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;Long number = fs.readLong(1);&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;String value = fs.readString("city");&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;String[] values = fs.getValues();&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div dir="ltr" style="margin: 0px 0px 0px 71.25pt; outline: none; padding: 0px;"&gt;&lt;table style="border-collapse: collapse; border: none;"&gt;&lt;colgroup&gt;&lt;col width="952"&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr style="height: 0px;"&gt;&lt;td style="border: 1px solid rgb(183, 183, 183); padding: 7px; vertical-align: top;"&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;public class MyMapper implements FieldSetMapper&amp;lt;Payment&amp;gt;{&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;@Override&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;public Payment mapFieldSet(FieldSet fieldSet) &lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throws BindException {&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;... = fieldSet.readString("source");&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;... = fieldSet.readBigDecimal("amount");&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;... = fieldSet.readDate("date");&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt; &amp;nbsp;}&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot;; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div style="margin: 0px; outline: none; padding: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style="font-family: inherit; font-size: 21px; line-height: 1.5; white-space: pre-wrap;"&gt;Spring Integration&lt;/span&gt;&lt;br /&gt;&lt;ol start="7" style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;ol style="margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Main concepts (Messages, Channels, Endpoint types)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;please, refer to &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1kAMz6QZD-iFhiJKCZcijb5c7mdp2VdmuX0ylA-yGZtc/edit#heading=h.41jqjf4k4rq6" style="color: #009eb8; display: inline; outline: none; text-decoration: none; transition: color 0.3s;"&gt;&lt;span style="background-color: transparent; color: #1155cc; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;this&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;, and &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1g6xTuuZZaZ-r2kNxbwCYLIC6kjVeW_x3UvLnpfLQnac/edit#" style="color: #009eb8; display: inline; outline: none; text-decoration: none; transition: color 0.3s;"&gt;&lt;span style="background-color: transparent; color: #1155cc; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;this&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Pay special attention to the various Endpoint types and how they're used!&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;refer even more carefully the above&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;How to programmatically create new Messages &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;MessageBuilder &lt;/span&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;of course&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;each message is created with unique ID&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Also &lt;/span&gt;&lt;span style="background-color: transparent; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; vertical-align: baseline; white-space: pre-wrap;"&gt;MessagingTemplate &lt;/span&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;is worth mentioning, which is a programmatic endpoint for sending the messages created by MessageBuilder (e.g. for testing)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Using chains and bridges&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;see a.&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;Synchronous vs. asynchronous message passing: the different Channel types and how each of them should be used&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;see a.&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The corresponding effects on things like transactions and security&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;see a.&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; font-weight: bold; list-style-type: lower-alpha; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="background-color: transparent; font-family: inherit; vertical-align: baseline; white-space: pre-wrap;"&gt;The need for active polling and how to configure that &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style="list-style: disc; margin: 0pt 0px; outline: none; padding: 0px 0px 0px 2em;"&gt;&lt;li dir="ltr" style="background-color: transparent; font-size: 15px; list-style-type: square; margin: 0px; outline: none; padding: 0px; vertical-align: baseline;"&gt;&lt;div dir="ltr" style="line-height: 1.5; margin: 0pt 0px; outline: none; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;see &lt;/span&gt;&lt;a href="https://docs.google.com/document/d/1kAMz6QZD-iFhiJKCZcijb5c7mdp2VdmuX0ylA-yGZtc/edit#heading=h.xl5a2aw6wmob" style="color: #009eb8; display: inline; outline: none; text-decoration: none;"&gt;&lt;span style="background-color: transparent; color: #1155cc; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;this&lt;/span&gt;&lt;/a&gt;&lt;span style="background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"&gt;, and &lt;/span&gt;&lt;span style="background-color: transparent; color: #1155cc; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;a href="https://docs.google.com/document/d/1kAMz6QZD-iFhiJKCZcijb5c7mdp2VdmuX0ylA-yGZtc/edit#heading=h.yik4lvhdqsdb" style="color: #009eb8; display: inline; outline: none; text-decoration: none;"&gt;this&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/1069023866261926173/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2015/01/enterprise-integration-with-spring.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1069023866261926173'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1069023866261926173'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2015/01/enterprise-integration-with-spring.html' title='Enterprise Integration with Spring Certification'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-1611880993513646485</id><published>2015-01-12T23:06:00.000+01:00</published><updated>2016-05-27T10:55:12.823+02:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>"Spring Integration in Action" Mark Fisher, Jonas Partner, Marius Bogoevici and Iwein Fuld</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;These are the notes I took from the Manning's &lt;a href="https://www.manning.com/books/spring-integration-in-action"&gt;"Spring Integration in Action" book (Mark Fisher, Jonas Partner, Marius Bogoevici, and Iwein Fuld)&lt;/a&gt;, before taking the Spring Integration exam.&lt;br /&gt;&lt;br /&gt;I found the book to be a nice guide to some of the topics, before actually starting to read the Java documentation.&lt;br /&gt;&lt;br /&gt;More notes about preparation for the exam itself are &lt;a href="http://learningmonik.blogspot.de/2015/01/enterprise-integration-with-spring.html" target="_blank"&gt;here&lt;/a&gt;.&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;&lt;a href="https://www.blogger.com/null" name="1background"&gt;&lt;/a&gt;1. Background&lt;/h2&gt;&lt;h3 style="text-align: left;"&gt;1.1. Enterprise Intergration Patterns - introduction&lt;/h3&gt;&lt;div&gt;EIP are made of three base patterns:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Message&lt;/li&gt;&lt;li&gt;Message Channel&lt;/li&gt;&lt;li&gt;Message Endpoint&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Message&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;Message consists of:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;header - data relevant only to the messaging system&lt;/li&gt;&lt;li&gt;payload - data to be processed&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Message types:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;command message - tells the receiver to do sth&lt;/li&gt;&lt;li&gt;event message - notifies that sth has happened&lt;/li&gt;&lt;li&gt;document message - transfers data&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The message is a representation of the contract between the sender and the receiver.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Message Channel&lt;/h4&gt;&lt;div&gt;Manages how (e.g. async or sync) and where the message is delivered, but does not interact with its content. It also decouples the sender from receiver. There are two types of channels:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;point-to-point - one message is received by exactly one receiver (but not neccessarily always the same)&lt;/li&gt;&lt;li&gt;publish-subscribe - one message received by multiple subscribers (zero or more)&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Message Endpoints&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;They actually do sth with the message.&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Channel Adapter - connects an application to the messaging system. The message flow is &lt;b&gt;uni-directional&lt;/b&gt;.&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |\ &amp;nbsp;&amp;nbsp; &amp;nbsp; _____&lt;br /&gt;APP --&amp;gt; || --&amp;gt; |_____| --&amp;gt; ...&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |/&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Messaging Gateway - used for bi-directional messaging, e.g. where we want to di asynchronous stuff behind the curtain, and the caller is aware only of sync invocation.&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sync _____ &amp;nbsp;async&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; --&amp;gt; |\ --&amp;gt; |_____| --&amp;gt; ...&lt;br /&gt;APP &amp;nbsp; &amp;nbsp; || sync _____ &amp;nbsp;async&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;-- |/ &amp;lt;-- |_____| &amp;lt;-- ...&lt;/span&gt;&lt;br /&gt;&lt;i&gt;(inbound gateway)&lt;/i&gt;&lt;/li&gt;&lt;li&gt;Service Activator - invokes a service based on the message and sends back the result. It's like &lt;i&gt;outbound gateway&lt;/i&gt; but with certain purpose and within same Spring Context.&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;_____ &amp;nbsp; &amp;nbsp; &amp;nbsp; ___&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;... --&amp;gt; |_____| --&amp;gt; | o | --&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;_____ &amp;nbsp; &amp;nbsp; &amp;nbsp;| &amp;nbsp; | &amp;nbsp; &amp;nbsp; SERVICE&lt;br /&gt;... &amp;lt;-- |_____| &amp;lt;-- | o | &amp;lt;--&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; '---'&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Router - everyone knows, but two points to note: it does not change the message and it is aware of other channels&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ,-----,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; | / *-| --&amp;gt; ...&lt;br /&gt;... --&amp;gt; |* &amp;nbsp;*-| --&amp;gt; ...&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |___*-| --&amp;gt; ...&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Splitter - splits the message&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ,---------,&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace;" /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; | &amp;nbsp; &amp;nbsp; &amp;nbsp; []|&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace;" /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;... --&amp;gt; |[] --&amp;gt; []| --&amp;gt; ...&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace;" /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; | &amp;nbsp; &amp;nbsp; &amp;nbsp; []|&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; '---------'&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;Aggregator - waits for group of correlated messages and merges them when the group is complete (needs to know correlation id of each message and group size)&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ,---------,&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace;" /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |[] &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace;" /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;... --&amp;gt; |[] --&amp;gt; []| --&amp;gt; ...&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace;" /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |[] &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; '---------'&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;1.2 Event-driven architecture&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;SEDA - Stacked Event-Driven Architecture, i.e. when the events are not only exchanged but also buffered, e.g. in a queue; this can be good idea in case of fluctuating load on the system; it's up to you to choose between EDA and SEDA style;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;(S)EDA helps reducing all kind of coupling, that's why Spring Integration builds around it. But what is &lt;b&gt;coupling&lt;/b&gt;? There are two types of coupling, type-level coupling (the one connected with dependency injection, that everyone knows), but also system-level coupling, like e.g. temporal coupling (an external service which is not available freezes all the system).&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;1.3. Integration styles&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Actually Spring focuses on number 4, but also supports the other ones.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;File based - no transactions, no message medatada, no atomicity; though sometimes can be used&lt;/li&gt;&lt;li&gt;Shared database - atomic operations, data consistency, domain model specified =&amp;gt; extra coupling&lt;br /&gt;- staging tables, for transferring data in steps&lt;br /&gt;- sharing data&lt;/li&gt;&lt;li&gt;Remote procedure calls - tries to hide the fact that different services are running on different systems; has to serialize objects (XML, Java), network is not always reliable, there is nothing in the middle to take care of assuring delivery&lt;/li&gt;&lt;li&gt;Message based integration - small data packets are exchanged frequently between endpoints via channels, in async manner&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;&lt;a href="https://www.blogger.com/null" name="2messaging"&gt;&lt;/a&gt;2. Messaging in Spring Integration&lt;/h2&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;2.1. Message&lt;/h3&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;metadata is in message's &lt;b&gt;headers&lt;/b&gt;&lt;/li&gt;&lt;li&gt;the message is immutable! use MessageBuilder&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;2.2. Channels&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The main interface goes like this:&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;MessageChannel&amp;gt;&lt;br /&gt;send (m)&lt;br /&gt;send (m, timeout)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It's extended with interfaces of &lt;b&gt;two types&lt;/b&gt;:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;SubscribableChannel&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;subscribe (messageHandler)&lt;br /&gt;unsubscribe (messageHandler)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;PollableChannel&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;receive ()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;receive (timeout)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;The default configuration in sync message transmission and subscribable channels (don't confuse with pub-sub channel). You should adjust it to your needs. For example in the book they have a workflow which finishes with sending an email, which can be done async, as email does not have to be immediately sent. Making it async is just changing the channel type from direct to queue.&lt;/span&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Bridge&lt;/span&gt;&lt;/h4&gt;&lt;span style="font-family: inherit;"&gt;With the email example we also want to have more consumers, so we change the channel which puts stuff in the queue to publish-subscribe-channel, and add a &lt;b&gt;bridge &lt;/b&gt;right after it and before the queue. This is done so that the pub-sub channel can handover the messages to another thread in the bridge, which guarantees the pub-sub channel does not run out of threads from its thread pool. (I don't get why the threads would get exhausted but ok)&lt;/span&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Priority queue&lt;/span&gt;&lt;/h4&gt;It's easy to change a channel into a priority queue by adding "priority-queue" XML tag inside. It has a reference to PriorityComparator.&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Channel collabolators&lt;/h4&gt;They are MessageDispatchers and ChannelInterceptors, which says nothing now, but I promise it's the last additional piece of information on component types.&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Message Dispatcher&lt;/h4&gt;Is a thing which decides what happens once a message arrives at a channel which was a subscribable channel. &lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;MessageDispatcher&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;bool addHandler (messageHandler)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;bool removeHandler (messaheHandler)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;bool dispatch (m)&lt;/span&gt;&lt;br /&gt;It can either do the "competing consumers" thing or broadcasting. And correspondigly, we have UnicastingDispatcher and BroadcastingDispatcher. If we choose competing consumers we have to define competition rules by adding reference to a LoadBalancingStrategy.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;LoadBalancingStrategy&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Iterator&amp;lt;MessageHandler&amp;gt; getHandlerIterator(m, List&amp;lt;handlers&amp;gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;The available implementation choice is one: RoundRobinLoadBalancingStrategy.&amp;nbsp;&lt;span style="font-family: inherit;"&gt;Yes, in round robin the message is not really important in the method, but if you wanna implement crazy rules, with this interface you can (though they say you typicaly shouldn't).&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;They didn't show XML definition. I think normally it's done under the hood so you don't touch this. It's just to know how things work internally.&lt;/span&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Channel Interceptor&lt;/span&gt;&lt;/h4&gt;&lt;span style="font-family: inherit;"&gt;Seems like extra piece of functionality. You can intercept or filter messages.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;ChannelInterceptor&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;m preSend (m, channel)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;postSend (m, channel, wasSent)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;bool preReceive (channel)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;m postReceive (m, channel)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;The "receive" methods are available only for pollable channels. In general, return null instead of message to break the processing. In "preReceive" return false to break the processing, this is called before the message is eve read, that's why it does not deal with the message.&lt;br /&gt;&lt;br /&gt;We add interceptors like this:&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;channel ..&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;interceptors&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;beans:ref="...&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;There are Spring examples of interceptors.&lt;/span&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;i&gt;WireTap&lt;/i&gt; - non invasively copies the message to another processing path (async); it is also possible to define it globally but they didn't show how;&lt;/li&gt;&lt;li&gt;&lt;i&gt;MessageSelectingInterceptor &lt;/i&gt;that uses a MessageSelector (bool accept(m)), e.g. PayloadTypeSelector, which allows to implement a Datatype Channel EI pattern; (don't confuse with MessageFilter which does exactly same but as a message endpoint)&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;2.3 Message Endpoints&lt;/h3&gt;&lt;div&gt;Each message endpoint is an implementation of MessageHandler(.handleMessage(m)), wrapped in an adapter, which connects the endpoint to the channel. Depending of what kind of channel it is, the adapter will have to add appropriate capabilities:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;if channel is subscribable, the endpoint will be invoked by channel's TaskExecutor - not much to do&lt;/li&gt;&lt;li&gt;if channel is pollable, it needs to be polled by the endpoint&lt;/li&gt;&lt;li&gt;if channel is bidirectional, ie expects a reply, then the endpoint should provide it of course&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Below is a nice table from the book, which gives the overview of all the options:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&lt;b&gt;Endpoint &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Polling/ &amp;nbsp; &amp;nbsp; &amp;nbsp;Inbound/ &amp;nbsp; Direction &amp;nbsp;Internal/&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Event driven &amp;nbsp;Outbound &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;External&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;inbound-channel-adapter &amp;nbsp; poll &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;in &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; uni &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;int&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;outbound-channel-adapter &amp;nbsp;both &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;out &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;uni &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;int&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;gateway &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; event &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; in &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bi &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;service-activator &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; both &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;out &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;bi &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; int&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;http:outbound-gateway &amp;nbsp; &amp;nbsp; both &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;out &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;bi &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ext&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;amqp:inb-channel-adapter &amp;nbsp;event &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; in &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; uni &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ext&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;inbound/outbound - from perspective of Spring Integration application&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;internal/external - with respect to application context&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Polling vs not polling&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Remember that:&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;polling endpoint = &lt;b&gt;asychronous &lt;/b&gt;message hand-off (as you don't know when the messahe arrives so you have to poll in time intervals)&lt;/li&gt;&lt;li&gt;event-driven endpoint = &lt;b&gt;synchronous &lt;/b&gt;message hand-off&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;For example a web collaboration tool (like Google Docs) should use async hand-off with polling, so that sending an event never blocks the typing (as seeing my own typing is more important than seeing the changes of others).&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;polling endpoint - polls for new messages periodically, and manages thread(s) which do(es) that; Spring automatically wraps any passive endpoint connected to a PollableChannel into a polling endpoint;&lt;/li&gt;&lt;li&gt;event-driven endpoint - used in most cases, such endpoint does not take responsibility for thread management; if the subscribable channel sending to this endpoint does not want to wait for message hand-off it can still use a thread pool, but then the trasaction boundary will be broken&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;* gateway is always performing sync communication; if you need an async gateway, combine two async channel adapters;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;* REPLY_CHANNEL header is used to know who to return the message to, in case of bidirectional communication;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Transaction boundaries&lt;/h4&gt;&lt;div&gt;Always when there is an async hand-off (queue, task executor, aggregator), the transaction boundaries and security context continuity are broken.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;* Don't try to workaround by putting transaction context in message header, this limitation is there for a reason of promoting good design (but you can use this trick with security context).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Transactions usually start at the poller (if it was cinfugured with transaction manager), when it pools from:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;a message source - if the message source is transactional, it participates in same transaction&lt;/li&gt;&lt;li&gt;a queue channel&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The transaction lasts until the message is sent to a something that does not maintain same thread.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Under the hood&lt;/h4&gt;&lt;div&gt;All these things you don't have to know as Spring will choose the right endpoint adapters configuration automatically. It has an AbstractConsumerEndpointParser, which parses te XML definition and puts factories (ConsumerEndpointFactoryBean) in place of endpoints, and those factories will know on runtime what kind of adapter is needed for an endpoint. We have PollingConsumer and EventDrivenConsumer adapters.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We also have a Lifecycle object that has upgraded version called SmartLifecycle, which automatically starts the endpoints by calling "subscribe" on the channel, or schedules a poller task. The Lifecycle is bound to Spring Application Context.&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;&lt;a href="https://www.blogger.com/null" name="3building"&gt;&lt;/a&gt;3. Building Messaging Systems&lt;/h2&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;3.1. Separation of concerns&lt;/h3&gt;&lt;div&gt;Is important. AOP did that, IoC did, so Spring Integration also strives to do it: sepration of business logic from integration concerns. Shortly what they point out:&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Transformers&lt;/h4&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;when you design your business domain don't keep the intergration in mind, it should be independent; a dto should not have a "toXml()" method, rather add an appropriate transformer in your configuration later;&lt;/li&gt;&lt;li&gt;later you can even build transformers that will call other services to build the message, that's exactly fine;&lt;/li&gt;&lt;li&gt;a such transformer you'd annotate with @MessageEndpoint, which is also a stereotype for @Component;&lt;/li&gt;&lt;li&gt;testing of a workflow is done by @Autowiring the channels and sending a message using MessageBuilder;&lt;/li&gt;&lt;li&gt;normally for every endpoint one of the two is required: output-channel, or reply_to header on the message; if none is set, exception is thrown;&lt;/li&gt;&lt;li&gt;&amp;lt;mail:header-enricher&amp;gt;&amp;lt;mail:to expression="payload?.emailAddress"/&amp;gt;..&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Service Activators&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;if the output-channel is not defined, then the service activator will use the message's reply_to header's value to send the reply;&lt;/li&gt;&lt;li&gt;so switching between chained services and request-reply model is a matter of adding/removing the output-channel from XML&lt;/li&gt;&lt;li&gt;you can provide&amp;nbsp;output-channel="nullChannel" to ignore the response&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Interceptors that publish messages&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;@Publisher(channel="targetChannel") - method will additionally publish result to that channel; it's an interceptor;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Messaging Gateways&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;if we wanna publish to multiple, we use a gateway; we set the default-request-channel to the one from which the messages will be picked up, and passed to transformer, and next to pub-sub channel; that's just the example configuration;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Chaining endpoints&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;we can do &amp;lt;chain&amp;gt; .... &amp;lt;/chain&amp;gt; and put the endpoints inside in proper order, without specifying the channels at all;&lt;/li&gt;&lt;li&gt;the channels will be sync&lt;/li&gt;&lt;li&gt;all the channels but the last must return output (returning null is fine)&lt;/li&gt;&lt;li&gt;last channel must have an output-channel or replyChannel header defined&lt;/li&gt;&lt;li&gt;a router can only be last&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;3.2. Routing and filtering&lt;/h3&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Filter&lt;/h4&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;filter id="cancellationFilter"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; input-channel="input"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ref="cancellationsFilterBean"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; method="accept"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; discard-channel="rejected"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; output-channel="validated"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; throw-exception-on-rejection="true"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; expression="payload?.reservationCode matches 'GOLD[A-Z0-9]{6}'"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;cancellationsFilterBean-&amp;gt;accept(m|payload)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;if both "discard channel" and "throw exception" are set, the message will also be sent to the discard channel;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Router&lt;/h4&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;router method="routePaymentSettlement"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; input-channel="payments"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; expression="payload.creditCardType"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; channel-resolver="creditCardChannelResolver"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;beans:bean class="....PaymentSettlementRouter"/&lt;/span&gt;&lt;span style="color: #cccccc; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/router&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;PaymentSettlementRouter&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; -&amp;gt;String|String[]routePaymentSettlement(m|payload|@Header...)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;if router's method returns null, the message won't be processed anymore&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;if it returns list of strings, the message will be sent to all these channels&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;all routers are content-based routers&lt;/span&gt;&lt;/li&gt;&lt;li&gt;if the resolver is specified, it maps the result name to the real channel name&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Payload-type router&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;routing based on payload type:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;payload-type-router input-channel="payments"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;mapping type="....CreditCardPayment"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;channel="credit"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;mapping type="....Invoice"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;channel="invoices"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; ...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/payload-type-router&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h4&gt;Header value router&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;routing based on a specific header's value:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;header-value-router input-channel="payments"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;header-name="PAYMENT_INFO"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;often used with a &lt;b&gt;header enricher&lt;/b&gt;:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;header-enricher input-channel="payments"&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output-channel="enriched-payments"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;header name="&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;PAYMENT_INFO&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ref="enricher"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;method="determineProcessingDestination"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/header-enricher&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h4&gt;Recipient list router&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;sends message to multiple channels:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;recipient-list-router input-channel="notifications"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;recipient channel="sms"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;recipient channel="email"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;recipient channel="phone"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;recipient-list-router&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;3.3 Splitting and aggregating&lt;/h3&gt;&lt;div&gt;Aggregator and resequencer are &lt;b&gt;stateful &lt;/b&gt;endpoints. And both aggregator and splitter modify the message (numbers of it).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;chain id="splitRecipesIntoIngrdients"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;input-channel="recipes"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output-channel="ingredients"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;header-enricher&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;header name="recipe" expression="payload"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;/header-enricher&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;splitter &lt;span style="color: #999999;"&gt;expression="payload.ingredients"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;beans:bean class="....MySplitter"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;/splitter&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Splitter will automatically set &lt;i&gt;group size, sequence number&lt;/i&gt; and &lt;i&gt;correlation id &lt;/i&gt;on split messages, but you don't have to use them in your aggregation logic. In our example above we passed the whole message into the header as we will use it as the correlation key.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;aggregator id="kitchen"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; input-channel="products"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; output-channel="meals"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ref="cook"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; method="prepareMeal"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; correlation-strategy="cook"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; correlation-strategy-method="getCorrelationKey"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; release-strategy="cook"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; release-strategy-method="canCookMeal"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Evey arriving message from same group the aggregator will internally append to a MessageGroupStore.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Meal prepareMeal(List&amp;lt;m&amp;gt;)&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&amp;nbsp;- returns an aggregated message based on contents of the message group&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Object getCorrelationKey(m)&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&amp;nbsp;- returns an identifier of this group&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;bool canCookMeal(List&amp;lt;m&amp;gt;)&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;&amp;nbsp;- returns true if the group is complete&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The aggregator internally also uses a CorrelatingMessageHandler. It holds references to Correlation- and ReleaseStrategy, as well as to MessageGroupProcessor, which is processing the released group.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The same&amp;nbsp;CorrelatingMessageHandler&amp;nbsp;is also used by the resequencer endpoint. Resequencer buffers incoming messages, waits and tries to assure that the messages are in right order, but since this can be tricky, it can do partial releases, which can be based e.g. on a timeout (releasePartialSequences flag). You can also customize the comparator used to determine the order.&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Scatter-gather algorithm&lt;/h4&gt;&lt;div&gt;Is about copying same message to many processors, each is specialised in sth else, and then aggregating the results.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;4. Integrating Existing Systems&lt;/h2&gt;&lt;a href="https://www.blogger.com/null" name="4integrating"&gt;&lt;/a&gt; &lt;br /&gt;&lt;h3 style="text-align: left;"&gt;4.1. XML&lt;/h3&gt;&lt;div&gt;Sometimes it is worth avoiding conversion from and to XML, if both input and output are in XML, and the processing is relatively simple. It's better to use XPath or XSLT directly in such case. Or even, like in the example in the book, if we have to devide an object into a number of small parts and send it as separated XMLs, it may be a better idea to first convert it into XML and split/transform only the XML file.&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Marshalling and unmarshalling&lt;/h4&gt;&lt;div&gt;It's conversion between XML and Object. In Spring it's called OXM (it's just an aggregator of existing solutions).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To marshall, annotate class with:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@javax.xml.bind.annotation.XmlRootElement(name = "rootTagName")&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;and annotate fields with:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@XmlElement&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;If you have a non-standard java types inside your class, you have to add on the field level:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;@XmlJavaTypeAdapter(YourAdapter.class)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;But Spring XOM has a ready marshaller for this, which you configure like this:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;bean id="myMarshaller" class="....Jaxb2Marshaller"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;lt;p:name="classesToBeBound" value="....ClassToMarshall"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;Spring Integration Support for XML&lt;/h4&gt;After you configured Spring XOM marshaller and unmarshaller, you can add an endpoint:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;si-xml:marshalling-transformer&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;input-channel="input"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output-channel="xmlOut"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;marshaller="myMarshaller"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;span style="color: #666666;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;result-transformer="resultToDocumentTransformer"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;You need the result transformer, as the marshaller returns an object of type Result, which you can further convert to String or Document, or whatever. There are two ready result transformers in Spring Integration, ResultToDocumentTransformer and&amp;nbsp;&lt;/span&gt;ResultToStringTransformer.&lt;br /&gt;&lt;br /&gt;In case you wanted to so an XSLT transformation, use:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;si-xml:xslt-transformer&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; input-channel="inputXml"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; output-channel="transformedXml"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; xsl-resource="classpath:/xsl/blablah.xsl"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;You also may wanna split XML using XPath, you can do it usingXPath splitter:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;si-xml:xpath-splitter create-documents="true"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;input-channel, output-channel/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;si-xml:xpath-expression&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;expression="parentNodeName"&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #666666; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ns-prefix="hb"&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #666666; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ns-uri="http://www.example.com/blablah"&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #666666; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;namespace-map="namespaceMap"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/si-xml:xpath&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: #666666; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;util:map id="namespaceMap"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #666666; font-size: x-small;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;entry key="hb" value="&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;http://www.example.com/blablah&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #666666; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;...&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #666666; font-size: x-small;"&gt;&amp;lt;/util:map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;if create-documents is set to true, each part will be wrapped in a separate XML document, otherwise it will be just raw content&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;You can also route messages based on XPath expression:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;si-xml:xpath-router id="myRouter"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;input-channel="splitXml"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;evaluate-as-string="true"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;si-xml:xpath-expression expression="local-name(/*)"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size: x-small;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;si-xml:mapping value="carQuote"&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;channel="carQuoChannel"/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;si-xml:mapping value="...&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;lt;/si-xml:xpath-router&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Or validate them:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;si-xml:validating-filter id, input-channel, output-channel&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;discard-channel="invalidReqs"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;schema-location="classpath:xsd/fligthQuote.xsd"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Spring Integration supports DOM, but not SAX parser, as streaming would introduce problems when combined with messaging. So big XML support is not there.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;4.2. JMS&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;general abstraction over MOM (Message Oriented Middleware)&lt;/li&gt;&lt;li&gt;Spring Integration is doing well already without JMS, but it's worth to be able to connect to existing JMS system; or to have some persistent storage in an independent queue, or between different JVMs, or to actually have transactions, or implicit load balancing&lt;/li&gt;&lt;li&gt;ActiveMQ is an opensource implementation of JMS&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;JMS terminology&lt;/h4&gt;&lt;div&gt;JMS message has a lot in common with Spring Integration message. JMS body = Spring payload and JMS properties =&amp;nbsp;Spring&amp;nbsp;headers. Additionally, JMS destination =&amp;nbsp;Spring&amp;nbsp;channel, and point-to-point channel is called Queue, and pub-sub is called Topic.&lt;/div&gt;&lt;h4&gt;JMS refresh&lt;/h4&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;JmsTemplate&lt;br /&gt;&lt;br /&gt;jmsTemplate = new JmsTemplate(connectionFactory);&lt;br /&gt;jmsTemplate.setDefaultDestination(new ActiveMQQueue("siisa.queue"));&lt;br /&gt;jmsTemplate.convertAndSend("Helloo");&lt;br /&gt;String res = jmsTemplate.receiveAndConvert();&lt;br /&gt;&lt;br /&gt;If transaction is active and was already opened by some process, this executes in same transaction. Transaction is bound to JMS session.&lt;br /&gt;&lt;br /&gt;The conversion is done by default by SimpleMessageConverter, which maps the Java type to the MessageType (TextMessage, MapMessage, BytesMessage, ObjectMessage, etc), but it can be customized. It can even be replaced by Spring XOM MarshallingMessageConverter, to have to conversion from and to XML.&lt;br /&gt;&lt;br /&gt;JmsTemplate is sync.&lt;/li&gt;&lt;li&gt;MessageListener&lt;br /&gt;&lt;br /&gt;This is async. And provides transaction handling which would be tricky with async.&lt;br /&gt;&lt;br /&gt;You'd actually implement&amp;nbsp;MessageListenerAdapter, as it's eliminating some boilerplate code. And even better, define it in XML config:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;jms:listener-container&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;&amp;lt;jms:listener &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;destination="myQueue" &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ref="aPojo" &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;method="someMethod"/&lt;br /&gt;&amp;lt;/jms:listener-container&amp;gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Spring Integration &amp;amp; JMS - one way communication&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;For sending to JMS use an outbound channel adapter:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;lt;int-jms:outbound-channel-adapter channel="toJms"&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; destination-name=""samples.queue"&lt;br /&gt;&lt;span style="color: #666666;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; destination=fromSi"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #666666;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pub-sub-domain="true"&lt;/span&gt;/&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #666666;"&gt;&amp;lt;jee:jndi-lookup id="fromSi" jndi-name="jms/queue.fromSi"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;the responsibilities are handled inernally by JmsTemplate&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;set pub-sub-domain to true if the destination is a topic&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;specify either destination or destination-name&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;For receiving use an inbound channel adapter (sync polling):&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;int-jms:inbound-channel-adapter&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; id="pollingJmsAdapter"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; channel="jmsMessage"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; destination-name="myQueue"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;span style="color: #666666;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pub-sub-domain="true"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;int-poller fixed-delay="3000" max-messages-per-poll="1"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;/int-jms:inbound-channel-adapter&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;connection-factory should be set if its name is different than "connectionFactory"&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;To do it asynchronously, use:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;int-jms:message-driven-channel-adapter&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; id, channel, destination-name/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;h4&gt;&lt;span style="font-family: inherit;"&gt;Spring Integration &amp;amp; JMS - two ways communication&lt;/span&gt;&lt;/h4&gt;&lt;span style="font-family: inherit;"&gt;If you need bi-directional communication, use a gateway:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;int-jms:outbound-gateway&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; request-channel="toJms"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; reply-channel="jmsReplies"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; request-destniation-name="examples.queue"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #666666;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; request-pub-sub-domain="true"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;use request-pub-sub-domain if you use JMS topic&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;notice that reply-destination-name is not required; the gateway will add a &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;JMSReplyTo&lt;/span&gt;&lt;span style="font-family: inherit;"&gt; property to each message as property, and set it to a temporary queue which it creates for you&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;int-jms:inbound-gateway id&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; request-channel="fromJms"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; request-destniation-name="examples.queue"&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default-reply-destination="examples.replies"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default-reply-queue-name="examples.replies"&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default-reply-topic-name="examples.replies"&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; request-pub-sub-domain="true"&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #f6b26b; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; concurrent-consumers="5"&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #f6b26b; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; max-concurrent-consumers="25"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #f6b26b;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; idle-task-execution-limit="3"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;if JMS has set the JMSReplyTo, it takes precedence over the default-reply-destination&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;reply-channel is not required; if it is not set, the gateway will create implicit channel and set it as the "replyChannel" header on the message&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;connection-factory should be set if its name is different than "connectionFactory"&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;the last three attrs are for concurrency settings&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h4&gt;&lt;span style="font-family: inherit;"&gt;Spring Integration &amp;amp; JMS - "tunnelling"&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;If two Spring Integration apps want to communicate via JMS, we can reduce some complexity by passing whole Spring message as the JMS message body, instead of converting payload to body and headers to properties and back. In such case add to your both gateways: &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;extract-request-payload="false"&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;. It's also a good idea to set the &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;message-converter &lt;/span&gt;&lt;span style="font-family: inherit;"&gt;property, so that you don't use Java Serialisation but e.g. XML. You can use e.g. the Spring's MarshallingMessageConverter.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;But in general, this approach is not recommended - :^)&lt;/span&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Transactions with JMS Integration&lt;/span&gt;&lt;/h4&gt;&lt;div&gt;No matter how you do it, you will either have lost messages or duplicates.&lt;br /&gt;&lt;br /&gt;The JMS Session object can be created by JMS connection with two exclusive flags: transacted(bool) and acknowledgeMode(AUTO_ACKNOWLEDGE, CLIENT_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE). DUPS_OK will also call aknowledge() automatically but lazily. I skip the details as it was in Spring Core already.&lt;br /&gt;&lt;br /&gt;MessageListener has a property "acknowledge", which can take one of 4 values: auto (default), client, dups-ok and transacted. In XML you set it on &amp;lt;jms:listener-container ..&amp;gt;.&lt;br /&gt;&lt;br /&gt;Transactions are in general managed by PlatformTransactionManager (JmsTransactionManager or DataSourceTransactionManager). &amp;nbsp;If you want to include a database operation into same transaction, you do not neccessarily have to switch to the complex XA transactions. Often it is possible to just order your calls properly, e.g. in same method receive JMS message and call the database at the end. The tradeoff is that very rarely you may still end up with duplicates, but it's sometimes easier to compensate that than introduce global transactions.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;4.3. Email&lt;/h3&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Sending Email&lt;/h4&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;mail:outbound-channel-adapter&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; channel="outboundMail"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; host="${host}"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; username="${username}"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; password="${password}"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; java-mail-properties="properties"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;supported payload types: String, byte array (for attachments), MailMessage, MimeMessage&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;the from and to, and even email subject, are in message headers; we should fill them in using &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mail:header-enricher&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;internally it uses JavaMail API, more specifically the Spring JavaMailSender which builds on top of it&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;JavaMailSender introduced also MailMessage, next to the low level MimeMessage&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;the java-mail-properties are for setting extra properties specific to JavaMail, like &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mail.store.protocol=imap&lt;/span&gt;&lt;span style="font-family: inherit;"&gt; (it will be important)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Receiving Email - polling&lt;/span&gt;&lt;/h4&gt;&lt;div&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;mail:inbound-channel-adapter&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; id="mailAdapter"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; store-uri="imaps://..."&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; java-mail-properties="properties"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; channel="emails"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; should-delete-messages="true"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; should-mark-messages-as-read="true"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;poller max-messages-per-poll="1" fixed-rate="5000"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;/mail:inbound-channel-adapter&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;POP3 is designed for downloading; therefore it will work only with polling; there is no session, so messages can be downloaded multiple times, that's why we have the option to delete them on read; should-mark-messages-as-read will be ignored here&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;IMAP is designed for keeping emails on server; the mailbox maintains state, so duplicates are not a risk; you can use it also with event driven reception.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;SMTP is also supported&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h4&gt;&lt;span style="font-family: inherit;"&gt;Receiving Email - event driven&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;It's not that beautiful as this works max for 30 minutes of client being idle because of a timeout.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;mail:imap-idle-channel-adapter&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; id="mailAdapter"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; store-uri="imaps://..."&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; java-mail-properties="properties"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; channel="emails"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; should-delete-messages="false"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; should-mark-messages-as-read="true"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; auto-startup="true"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;poller max-messages-per-poll="1" fixed-rate="5000"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;mail:imap-idle-channel&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;-adapter&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;the differences are the name and auto-startup property&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;You may find this handy:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;mail:mail-to-string-transformer/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;it will also copy the headers. You can also implement a custom AbstractMailMessageTransformer, but the headers will be copied as well (the abstract method returns MessageBuilder).&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;4.4. Filesystem Integration&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;The advantages are that they are fairly simple, disk space is big enough, and data is persisted. Disadvantages: slow, no ACID, and pain in the ass with locking. Still it's simple so should be used when possible (simple!=easy:P).&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;there's &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;file: &lt;/span&gt;namespace in Spring context, use it&lt;/li&gt;&lt;li&gt;remember that Java's File is not a psychical file; and that onlt the path of the file is immutable, the rest is read from filesystem, on request&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Spring Integration provides abstraction over all the stupid new BufferedReader(new FileReader(new ...)). This is already cool.&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Writing the file&lt;/h4&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;file:outbound-channel-adapter&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; channel="outgoingChanges"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; directory="#{config.diary.store}"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; auto-create-directory="true"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; filename-generator="nameGenerator"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; detele-source-file="false"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;message payload can be of type String, File or byte[]&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;delete-source-file - if payload type is File, it tells whether delete that file&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;filename-generator should be clever enough; if it generates non-unique names it's the programmer's faul&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;t&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;writing file is first performed to another temp file with special extension, and only at the end the file is renamed (moved)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;there's also analogical &lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;file:outbound-gateway/&amp;gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Reading the file&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;file:inbound-channel-adapter&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; channel="incomingChanges"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; directory="#{config.diary.store}"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; filter="myFilter"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; scanner="myScanner"&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; comparator="myComparator"&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; filename-pattern="..."&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; filename-regex="..."&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;poller /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;file:inbound-channel-adapter&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;by overriding the filter, you override the default F&lt;/span&gt;ileListFilters, which are by default set in such a way to match with the outbound-channel and not pick up temporary files&lt;/li&gt;&lt;li&gt;by overriding scanner you also override the filter, as the scanner uses the filter (defines how to scan e.g. subdirectories)&lt;/li&gt;&lt;li&gt;comparator says in which order to read files&lt;/li&gt;&lt;li&gt;filename-pattern and regex should not be used together with the custom filter&lt;/li&gt;&lt;li&gt;by default, in the default filter, Spring remembers all the read files not to read them twice&lt;/li&gt;&lt;li&gt;the reader maintains an internal queue, which it populated on calling .receive() by listing the directory content; the queue is prioritized by using the comparator, if present&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;For preventing reading unfinished files you can also use locking mechanism, but don't use it if you can. If you use Spring's moving file strategy you don't need locking.&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Transformers&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;FileToByteArrayTransformer (&amp;lt;file:file-to-bytes-transformer/&amp;gt;)&lt;/li&gt;&lt;li&gt;FileToStringTransformer&amp;nbsp;(&amp;lt;file:file-to-string-transformer/&amp;gt;)&lt;/li&gt;&lt;li&gt;they both have "delete-files" property for deleting file on consumption&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;4.5. Web Services Integration&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The good side is that the information exchange protocol and format is clear: HTTP and XML (or JSON). And no firewalls in between.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Well, ok maybe not everything is exactly clear, namely how to use HTTP to transfer XML: some argue on SOAP and WSDL, others do not give a shit about those technologies anymore and use REST. Spring does give a shit about both approaches.&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;POX and SOAP Web Services&lt;/h4&gt;&lt;div&gt;POX means not fox, but Plain Old Xml. It is still not same as REST, as the main difference of those services to REST that they use only POST and/or GET method for all the operations. In other words, they don't put semantics to the HTTP method. Another characeristic is that they are "contract-first" Web Services, and are described by WSDL.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Spring WS already gives support (webServiceClient) for creating e.g. SOAP message, which would be otherwise crazy to do manually (envelope, body, this stuff).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Spring Integration builds on top of Spring WS, and lets create endpoints which behave like WS, or are able to consume WS. Minimal configuration for receiving requests is as follows:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;u&gt;web.xml:&lt;/u&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;lt;servlet-name&amp;gt;&lt;b&gt;si-ws-gateway&lt;/b&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;lt;servlet-class&amp;gt;....MessageDispatcherServlet&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;init-param&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;param-value&amp;gt;si-ws-gateway-config.xml&amp;lt;/param-value&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;lt;servlet-name&amp;gt;&lt;b&gt;si-ws-gateway&lt;/b&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;lt;url-pattern&amp;gt;/quoteservice&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;si-ws-gateway-config.xml&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;:&lt;/span&gt;&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;bean class="....UriEndpointMapping"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;lt;property name="defaultEndpoint" ref="&lt;b&gt;ws-inbound-gateway&lt;/b&gt;"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;int-ws:inbound-gateway id="&lt;b&gt;ws-inbound-gateway&lt;/b&gt;"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; request-channel="ws-requests"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; extract-payload="false"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;If you need to make requests, do it like this:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;int-ws:outbound-gateway&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;uri="http://blblah"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;request-channel="requests"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;reply-channel="responses"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;HTTP Web Services (meaning REST)&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;They are also the ones that Spring MVC exposes.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;u&gt;web.xml:&lt;/u&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;lt;servlet-name&amp;gt;&lt;b&gt;http-ws-gateway&lt;/b&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;lt;servlet-class&amp;gt;....HttpRequestHandlerServlet&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;init-param&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;param-value&amp;gt;http-ws-gateway.xml&amp;lt;/param-value&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;lt;servlet-name&amp;gt;&lt;b&gt;http-ws-gateway&lt;/b&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;lt;url-pattern&amp;gt;/httpquote&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;http-ws-gateway.xml&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;:&lt;/span&gt;&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;int-http:inbound-gateway&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; id="http-inbound-gateway"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; request-channel="http-request"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; reply-channel="http-response"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; extract-reply-payload="false"&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; view-name="about"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; reply-key, reply-timeout,&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;message-converters,&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; supported-methods, convert-exceptions,&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #999999; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; request-payload-type, error-code, errors-key,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;span style="color: #999999;"&gt;&amp;nbsp; header-mapper, name&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;name - e.g. "/subscribe", so that it allows it to be used with DispatcherServlet&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;view-name - is the Spring MVC view name&lt;/span&gt;&lt;/li&gt;&lt;li&gt;you can also use inbound-message-adapter if you don't need two way communication, it uses MessageTemplate&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;If you need to make requests, do it like this:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;int-http:outbound-gateway&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; url="http://blblah"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; request-channel="requests"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; http-method="GET"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; expected-response-type="java.lang.String"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;int-http:uri-variable&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; name="location"&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; expression="payload"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/int:http:outbound-gateway&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;you can use outbound-channel-adapter if you don't need two way communication, it uses RestTemplate;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;in the case above it's better to override the error handler, as the default one treats only 4** and 5** responses as errors&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;4.6. XMPP and Twitter&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;XMPP (Extensible Messaging and Presence Protocol) is protocol especially for chatting. It can send messages (both directions same time) and presence notifications. Orginal server implemeentation is called Jabber.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And Twitter has an exposed API.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So Spring Integration is providing endpoints for these as well. The namespaces are &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;int-xmpp &lt;/span&gt;and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;int-twitter&lt;/span&gt;, respectively. I will not go into details. But some things I learned by the way:&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;annotating a method with @Publisher("channelName"), and enabling &amp;lt;int:annotation-config/&amp;gt; will make the return value of that method be additionally published on that channel&lt;/li&gt;&lt;li&gt;it's possible to set the global publishing channel, by setting:&lt;br /&gt;&amp;lt;int:annotation-config default-publisher-channel="channelName"/&amp;gt;&lt;/li&gt;&lt;li&gt;an alternative to the above is defining an &amp;lt;int:gateway/&amp;gt; with service-interface set to our custom interface, and such bean will be created automagically and we can autowire it, and call our method.. cool.. and in this method we can even add @Header(XmppHeaders.TO) String username input parameter; but there are also xmpp header enrichers fir that;&lt;/li&gt;&lt;li&gt;there's sth like xmppConnection bean&lt;/li&gt;&lt;li&gt;the Twitter API needs authentication, and it is done by configuring the twitterTemplate bean&lt;/li&gt;&lt;/ul&gt;&lt;h2 style="text-align: left;"&gt;5. Advanced Topics&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;(means the ones he could not find a way to group under common name:P)&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;5.1. Monitoring&lt;/h3&gt;&lt;h4 style="text-align: left;"&gt;Message history&lt;/h4&gt;&lt;div&gt;If you add to your spring config this:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;int:message-history/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;then every message will have a header called "history" with entries for each endpoint it visited, each entry contains endpoint name, type and timestamp. Neat!&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Wire tap&lt;/h4&gt;Can be used to record e.g. endpoint statistics. It was described above how to use it, it's an interceptor. Remember about transaction boundaries, e.g. if you use this after wire tap:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;channel ...&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;dispatcher task-executor="someExecutor"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;then bye bye transaction.&lt;/span&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;JMX&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;I skip now, many adapters&lt;/span&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Control Bus&lt;/span&gt;&lt;/h4&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;I skip now, it's for sending a command message which managed endpoints&lt;/span&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;5.2. Scheduling and concurrency&lt;/span&gt;&lt;/h3&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Pollers&lt;/span&gt;&lt;/h4&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Used for receiving messages transmitted asynchronously, as well as publishing messages, in time intervals. You can define a general poller definition and then only override what you need, e.g.:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;poller id="defaultPoller" fixed-delay="500" default="true"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;file:inbound-channel-adapter id, ...&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;poller fixed-rate="10000"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/file:inbound-channel-adapter&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;fixed-delay and fixed-rate are different ways to specify the polling interval; rate happens every x miliseconds, and delay assures that there is a gap of x seconds between each two polls;&lt;/li&gt;&lt;li&gt;the example above will use "rate" in the end&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;You can also define the poller with cron expression:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;poller cron="0 0 0 * * *"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;which stands for:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;sec, min, hour, dayofthe-month, month, dayofthe-week (, year)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;other options:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;poller fixed-rate="10000"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; max-messages-per-pool="2"&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; receive-timeout="2000"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;max messages per pool - how many messages will be processed at one poll operation&lt;/li&gt;&lt;li&gt;receive timeout - if nothing is there for that amount of time, give up; watch out, also: if you aleady started give up;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;You can use poller for publishing e.g. by including it inside an inbound-channel-adapter. No one calls the adapter, but poller does.&lt;/div&gt;&lt;/div&gt;&lt;h4&gt;Task Executors&lt;/h4&gt;&lt;div&gt;By deafult everything is done in single thread. To change that, either change a channel to a queue channel, or add a task executor:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;channel ...&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;dispatcher task-executor="someExecutor"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;Executor will introduce less lag, but is also more simple than queue (no prioritization, persistence, blah).&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;task:executor id="someExecutor"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;pool-size="2-5"&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;queue-capacity="100"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;pool-size - number of threads available, here 2 and if needed can go up to 5&lt;/li&gt;&lt;li&gt;queue-capacity - how many tasks can be queued waiting for free thread&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;You can push your existing executor also into another places, like:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;1. pub sub channel:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;publish-subscribe-channel id, task-executor="executor"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;this will cause that each subscriber will process the message in separate thread&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;2. Poller&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;poller id, fixed-delay, task-executor="executor"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;why would you do that: if polling takes too much time, the other scheduled polls may have to wait; with this solution they will be executed in other threads;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Task Scheduler&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;public interface TaskScheduler {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; ScheduledFuture schedule(Runnable task, Trigger trigger);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; ScheduledFuture schedule(Runnable task, Date startTime);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; ScheduledFuture schedule(Runnable task, Date startTime, long period);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; ScheduledFuture schedule(Runnable task, long period);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; ScheduledFuture schedule(Runnable task, Date startTime, long delay);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; ScheduledFuture schedule(Runnable task, long delay);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;public interface Trigger {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; Date nextExecutionTime(TriggerContext context);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;public interface TriggerContext {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; Date lastScheduledExecutionTime();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; Date lastActualExecutionTime();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; Date lastCompletionTime();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;(no XML example..)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;5.3. Spring Batch&lt;/h3&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;Job&lt;/h4&gt;Job - requires no manual intervention, but status should be able to be seen, also restart should be possible in the place when it finished, and stream processing is also important (memory limitations). Spring Batch is the solution.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;JobParameters - identify the job instance, same instance cannot be run twice thats why add there some counter.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Chunks are important concept, we read and write data in chunks of optimal size, and a transaction spans from beginning to the end of a chunk.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;batch:job id="bla"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;lt;batch:step id="loadPayments"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;batch:tasklet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;batch:chunk&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; reader="itemReader"&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; writer="itemWriter"&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; commit-interval="5"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/batch:tasklet&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;lt;/batch:step&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;/batch:job&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;lt;bean id="itemReader" class="....FlatFileItemReader" scope="step"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-size: xx-small;"&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;lt;property name="resource" value="file://#{jobParameters['filena']}&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;"/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;lt;property name="lineMapper"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;bean class="....DefaultLineMapper"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;property name="lineTokenizer"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;bean class="....DelimitedLineTokenizer"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;property name="names" value="source,dest,amount,date"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;property name="fieldSetMapper"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;bean class="....MyMapper"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: xx-small;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;delegating to the tasklet eliminates the boilerplate code connected to events, maintaining state, etc.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;public class MyMapper implements FieldSetMapper&amp;lt;Payment&amp;gt;{&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; @Override&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; public Payment mapFieldSet(FieldSet fieldSet)&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;throws BindException {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;... = fieldSet.readString("source");&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;... = fieldSet.readBigDecimal("amount");&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;... = fieldSet.readDate("date");&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Launching the job&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;bean id="jobLancher" class="....SimpleJobLauncher"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;property name="jobRepository" ref="jobRepository"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;batch:job-repository&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; data-source="dataSource"&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; id="jobRepository"&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; transaction-manager="transactionManager"&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; table-prefix="BATCH_"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To actually launch it you can do:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;JobParametersBuilder jpb = new JobParametersBuilder();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;jpb.addString('filena', 'payment.xml');&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;JobExecution execution = jobLauncher.run(job, jpb.toJobParameters());&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;the launching is sync or async, so in case of async, you can immediately check jobExecution for the status of the job, as this is persisted in db you provided in job repositpry definition.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There is also the Spring Batch Admin web app where you can view job statuses and restart failed ones.&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Spring Batch and Spring Integration&lt;/h4&gt;&lt;div&gt;Spring Integration provides support for everything you can see in Spring Batch Admin.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;si:service-activator&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;method="launch"&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;input-channel="requests"&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;output-channel="statuses"&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;bean class="....&lt;b&gt;JobLaunchingMessageHandler&lt;/b&gt;"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;/si:service-activator&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;JobLauchingMessageHandler expects a message payload of type JobLaunchRequest, which you can provide for example like this:&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;@Transformer&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;public JobLaunchRequest toRequest(Message&amp;lt;File&amp;gt; m){&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;JobParametersBuilder jpb = new JobParametersBuilder();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;jpb.addString(fileParameterName, message.getPayload().getAbsolutePath());&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;return new JobLauchRequest(job, jpb.toJobParameters())&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Event driven integration&lt;/span&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;Spring Batch provides three listeners:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;StepListener&lt;/li&gt;&lt;li&gt;ChunkListener&lt;/li&gt;&lt;li&gt;JobExecutionListener&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;You use them as gateway and&amp;nbsp;register the gateway at the job:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;lt;&lt;span style="font-size: x-small;"&gt;batch:job id&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;batch:listeners&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;batch:listener ref="notificationListener"/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp;&amp;lt;/batcg:listeners&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;/batch:job&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;lt;si:gateway id="notificationListener"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; service-interface="....&lt;b&gt;JobExecutionListener&lt;/b&gt;"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace; font-size: x-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default-request-channel="jobExecutions"/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;h3&gt;5.3. OSGi&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;I skip also, not required for the exam.&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/1611880993513646485/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2015/01/spring-integration-in-action.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1611880993513646485'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1611880993513646485'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2015/01/spring-integration-in-action.html' title='&quot;Spring Integration in Action&quot; Mark Fisher, Jonas Partner, Marius Bogoevici and Iwein Fuld'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-2952638391175076611</id><published>2015-01-02T19:10:00.000+01:00</published><updated>2016-01-13T20:52:22.724+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Node.js'/><title type='text'>Node.js Code School course notes</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;i&gt;These are the notes I took during the Node.js basic course from &lt;a href="http://www.codeschool.com/"&gt;www.codeschool.com&lt;/a&gt;. It was a very good course. It guides through the basics of how to start with NodeJS.&lt;/i&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Lesson 1&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Node.js is not a framework. There are Web frameworks based on Node.js but Node.js itself is not. It is on much lower level than frameworks.&lt;/li&gt;&lt;li&gt;Main thing with Node.js is that it's event based; the event loop; non blocking by design&lt;/li&gt;&lt;li&gt;It's the V8 JavaScript Runtime from Chrome wrapped in extra stuff, and written in C&lt;/li&gt;&lt;li&gt;There is no concurrency, it's like single threaded server&lt;/li&gt;&lt;li&gt;JavaScript was chosen because it also has no concurrency and this fits more&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Minimal server&lt;/h4&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var http = require('http');&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;http.createServer(function(request, response) {&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;response.writeHead(200);&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;response.write("Hello, this is Bla");&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;response.end()&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;}).listen(8080);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;it's registering the request event&lt;/li&gt;&lt;li&gt;it tells what should happen on that event&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Serving index.html&lt;/h4&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;http.createServer(function(request, response) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; response.writeHead(200);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; fs.readFile('index.html', function(error, contents){&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; response.write(contents);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; response.end();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; });&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;}).listen(8080);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Lesson 2: Events&lt;/h3&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in Node.js objects can emit events&lt;/li&gt;&lt;li&gt;every such object is an instance of EventEmitter&lt;/li&gt;&lt;li&gt;the http.createServer is in fact taking the callback for 'request' event, we could as well write server.on('request', callback)&lt;/li&gt;&lt;li&gt;multiple handlers can be registered for same event&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Custom EventEmitter&lt;/h4&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var events = require('events');&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var EventEmitter = events.EventEmitter;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var chat = new EventEmitter();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;chat.on('message', function(message){&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; console.log(message);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;});&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;chat.emit('message', 'blabla');&lt;/span&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Lesson 3: Streams&lt;/h3&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;they are good for transmitting huge amount of data, so that we can do it chunk by chunk&lt;/li&gt;&lt;li&gt;we cover the streams2 api&lt;/li&gt;&lt;li&gt;streams are e.g. the request (readable stream) and response (writable stream) input parameters in the createServer callback function; they are both open inside the function&lt;/li&gt;&lt;li&gt;readable stream is also an EventEmitter!&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Echoing the request to the user&lt;/h4&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;response.writeHead(200);&lt;br /&gt;request.pipe(response); // echo the request to the user&lt;/span&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;File upload&amp;nbsp;&lt;/h4&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var file = fs.createWriteStream('file1.txt');&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;request.pipe(file);&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;request.on('end', function(){&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; response.end('uploaded!')&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;h4&gt;File upload with progress&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var file = fs.createWriteStream('file1.txt');&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var fileBytes = request.headers[content-length];&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var uploadedBytes = 0;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;request.on('readable', function(){&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; var chunk = null;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; while(null !== (chunk = file.read())){&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; uploadedBytes += chunk.length;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; var progress = (uploadedBytes/fileBytes)*100;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; response.write("Progress:"+ parseInt(progress,10)+"%\n");&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; }&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;request.pipe(file);&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;request.on('end', function(){&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; response.end('uploaded!')&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;});&lt;/span&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Other useful things&lt;/h4&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;file.pipe(process.stdout); &lt;/span&gt;- like console.log&lt;/li&gt;&lt;li&gt;reading in chunks:&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;file.on('readable', function(){&lt;br /&gt;&amp;nbsp; var chunk;&lt;br /&gt;&amp;nbsp; while(null !== (chunk = file.read())){&lt;br /&gt;&amp;nbsp; &amp;nbsp; console.log(chunk.toString());&lt;br /&gt;&amp;nbsp; }&lt;br /&gt;});&lt;/span&gt;&lt;/li&gt;&lt;li&gt;don't close writer stream once pipe is done:&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;file.pipe(destFile, {end:false});&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Lesson 4: Modules&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;u&gt;my_module.js:&lt;/u&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var foo = function(){...};&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var bar = function(){...};&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var baz = function(){...};&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;exports.foo = foo;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;exports.bar = bar;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;u&gt;app.js:&lt;/u&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var m = require("./my_module");&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;m.foo();&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;m.bar();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;you can also do module.exports = foo, and then call directly foo(), but in this way you can export only one function&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;if you don't provide the "./" prefix for the module name, it will look in node_modules directory of the app, then the same directory in your home directory, if not then in /home, and if not then at the root path.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;npm - Package Manager for Node - module repository, dependency management, easily publish your own modules, see&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: inherit;"&gt;npmjs.org&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;package.json - good practice to have this file in root of your app, with app info and required dependency versions; then, when you run "npm install", these dependencies will be installed if not there yet;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;package.json is also present in module root folder, as one module may depend on another one&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;semantic versioning: x.x.x, you can also specify ~1.8 to get the latest 1.8.x version; see www.semver.org&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Lesson 5: Express&lt;/h3&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;is a web framework for node&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Basic example&lt;/h4&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;require('express');&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var app = express();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;app.get('/', function(request, response){&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; response.sendFile(__dirname + "/index.html");&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;});&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;app.listen(8080);&lt;/span&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Request with dynamic URI param&lt;/h4&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;app.get('/tweets/:username', function(request, response){&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; var username = request.params.username;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; options = {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; protocol: "http:",&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; host: "api.twitter.com",&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; pathname: "/1/statuses/user_timeline.json",&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; query: {screen_name: username, count: 10}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; };&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; var twitterUrl = url.format(options);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; request(twitterUrl).pipe(response);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;});&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;app.listen(8080);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Templates - Embedded Java Script&lt;/h4&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;npm install --save ejs&lt;/li&gt;&lt;li&gt;the templates are in "views" directory of your app by default&lt;/li&gt;&lt;li&gt;to put the data in the template, use a callback function in request function:&lt;br /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;&lt;strike&gt;request(twitterUrl).pipe(response);&lt;/strike&gt;&lt;br /&gt;request(twitterUrl, function(err,res,body){&lt;br /&gt;&amp;nbsp; var tweets = JSON.parse(body);&lt;br /&gt;&amp;nbsp; //that's the data that will end up in the template:&lt;br /&gt;&amp;nbsp; response.locals = {tweets:tweets, name:username};&lt;br /&gt;&amp;nbsp; response.render('tweets.ejs');&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;&lt;u&gt;tweets.ejs:&lt;/u&gt;&lt;br /&gt;&amp;lt;h1&amp;gt;Tweets for &amp;lt;%= name %&amp;gt;&amp;lt;/h1&amp;gt;&lt;br /&gt;&amp;lt;ul&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;% tweets.forEach(function(tweet){&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;li&amp;gt;&amp;lt;%= tweet.text %&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;%});%&amp;gt;&lt;br /&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Lesson 6: Sockets&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;npm install --save socket.io&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var io = require("socket.io")(server) &lt;/span&gt;- the server which was created with "createServer(app)", where app is express server.. in this way socket.io and express share same http server&lt;/li&gt;&lt;li&gt;we write a chatroom app&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Server side&lt;/h4&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;u&gt;app.js&lt;/u&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var express = require('express');&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var app = express();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var http = require('http');&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var server = http.createServer(app);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;var io = require('socket.io')(server);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;io.on('connection', function(client){&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; console.log("New client connected..");&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; //when client sends a message, emit it to all other clients&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; client.on('messages', function(data){&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;client.broadcast.emit('question',data);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; });&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; //or just emit one dummy message to the client&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; client.emit('messages',{foo:"bar"});&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;});&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;server.listen(8080);&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Client side&lt;/h4&gt;&lt;div&gt;&lt;u&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;index.html:&lt;/span&gt;&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;lt;script src="/socket.io/socket.io.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; var socket = io.connect('http://localhost:8080');&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; //the client can receive messages like this&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; server.on('messages', function(data){&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; console.log(data.foo);&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; });&lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;Lesson 7: Persisting Data&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;still the chatroom example: if someone joins later, they don't see the previous messages; so we store them in server in memory - but if server restarts, then it's bad&lt;/li&gt;&lt;li&gt;so we can use a DB - Node.js has drivers for most DBses which are NON Blocking!&lt;/li&gt;&lt;li&gt;example: Redis (key value store), very good docu: npm install --save redis:&lt;br /&gt;I'm skipping that part, it's redis specific&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/2952638391175076611/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2015/01/nodejs-code-school.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2952638391175076611'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2952638391175076611'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2015/01/nodejs-code-school.html' title='Node.js Code School course notes'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-1884713552860826320</id><published>2014-12-14T18:09:00.004+01:00</published><updated>2016-01-13T20:58:34.006+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='MongoDB'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><category scheme='http://www.blogger.com/atom/ns#' term='Data Mining'/><category scheme='http://www.blogger.com/atom/ns#' term='NoSQL'/><title type='text'>Data Wrangling with MongoDB - Udacity course notes</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;i&gt;These are the notes I took while taking the "Data Wrangling with MongoDB" course at &lt;a href="https://www.udacity.com/"&gt;Udacity&lt;/a&gt;. It tells how to use Python to process CSV, XML, Excel, and how to work with MongoBD. Also some examples for page scraping in Python.&lt;/i&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;1. Data extraction Fundamentals&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;data wrangling = gathering, extracting, cleaning and storing data&lt;/li&gt;&lt;li&gt;you have to assure your data is correct before doing anything else with it, especially if a human was involved in writing the data&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;1.1 Tabular data and CSV&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;items (row) have fields (columns), and first row contains label&lt;/li&gt;&lt;li&gt;parsing CSV in python - manually&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;with open(datafile, "r") as f:&lt;br /&gt;&amp;nbsp; titles = string.split(f.readline(), ",") &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;for line in f:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; data.append(create_data(titles,string.split(line, ",")))&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; i=i+1&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (i&amp;gt;10):&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break&lt;br /&gt;return data&lt;/span&gt;&lt;/li&gt;&lt;li&gt;parsing XLS in python - with XLRD module&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;import xlrd&lt;br /&gt;&lt;br /&gt;workbook = xlrd.open_workbook(datafile)&lt;br /&gt;sheet = workbook.sheet_by_index(0)&lt;br /&gt;data = [[sheet.cell_value(r, col) for col in range(2)] for r in range(sheet.nrows)]&lt;br /&gt;minVal = data[1][1]&lt;br /&gt;minIndex = 1&lt;/span&gt;&lt;/li&gt;&lt;li&gt;parsing CSV with python - with CSV module&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;import csv&lt;br /&gt;&lt;br /&gt;with open(datafile,'rb') as f:&lt;br /&gt;&amp;nbsp; &amp;nbsp; reader = csv.reader(f)#, delimiter=',', quotechar='|'&lt;br /&gt;&amp;nbsp; &amp;nbsp; name = reader.next()[1]&lt;br /&gt;&amp;nbsp; &amp;nbsp; print name&lt;br /&gt;&amp;nbsp; &amp;nbsp; reader.next()&lt;br /&gt;&amp;nbsp; &amp;nbsp; while True:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; try:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; data.append(reader.next())&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; except StopIteration:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;writing CSV with python&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;with open(filename, 'wb') as csvfile:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;&amp;nbsp; writer = csv.writer(csvfile, delimiter='|')&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;&amp;nbsp; for row in data:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; writer.writerow(row)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;1.2. JSON format&lt;/h4&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;nested objects and arrays&lt;/li&gt;&lt;li&gt;different items can have different fields&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;2. Data in More Complex Formats&lt;/h2&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;2.1. XML&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;designed for platform independent data transfer&lt;/li&gt;&lt;li&gt;supports validation&lt;/li&gt;&lt;li&gt;the domain: citation analysis, analysing citations in XML versions of scientific publications&lt;/li&gt;&lt;li&gt;XML parsing with python&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;import xml.etree.ElementTree as ET&lt;br /&gt;&lt;br /&gt;tree = ET.parse(fname)&lt;br /&gt;root = tree.getroot()&lt;br /&gt;&lt;br /&gt;for author in root.findall('./fm/bibl/aug/au'):&lt;br /&gt;&amp;nbsp; &amp;nbsp; data = {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "fnm": author.find('fnm').text,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "snm": author.find('snm').text,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "email": author.find('email').text,&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; authors.append(data)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;handling attributes&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;for author in root.findall('./fm/bibl/aug/au'):&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp;insrs = author.findall('./insr')&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for insr in insrs:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; data["insr"].append(insr.attrib["iid"])&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print data&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;2.2. Data scraping&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;The example of website about arrivals and departures and various airports. There are two combo boxes, so we would have to click a lot to get all the data. We want to rather write a script for us.&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;first we view page source to find all the codes of the combobox lists&lt;/li&gt;&lt;li&gt;then we open firebug to see what calls exactly are made, and which parts are depending on combobox clicks&lt;/li&gt;&lt;li&gt;we try to identify the other parameters (e.g. sth like "_viewstate", etc)&lt;/li&gt;&lt;li&gt;we write a script which makes call by call and generates a set of static HTML pages&lt;/li&gt;&lt;li&gt;! important - first store the data, then analyse it ! - best practice&lt;/li&gt;&lt;li&gt;Beautiful Soup - &lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;from bs4 import BeautifulSoup &lt;/span&gt;- the module for finding the values of a field in HTML, expecially for this kind of tasks&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;with open(page, "r") as html:&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; soup = BeautifulSoup(html)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; data["eventvalidation"] = soup.find(id="__EVENTVALIDATION")['value']&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; data["viewstate"] = soup.find(id="__VIEWSTATE")['value']&lt;/span&gt;&lt;/li&gt;&lt;li&gt;we also have to maintain session it turned out&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;&lt;strike&gt;requests.post("http://..", data={...})&lt;/strike&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;s = requests.Session()&lt;br /&gt;s.post("http://..", data={...})&lt;/span&gt;&lt;/li&gt;&lt;li&gt;then write another script(s) that iterate(s) through the downloaded files, clean(s) up the data (=audits it), and do(es) what we need to do &amp;nbsp;- this is actually covered in several practical exercises&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;3. Data Quality&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;data cleaning is an iterative process&lt;/li&gt;&lt;li&gt;measures of data quality:&lt;/li&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;validity - how it conforms to a schema (official or inofficial)&lt;/li&gt;&lt;li&gt;accuracy - "do all the street addresses exist?" - compare with some gold standard data&lt;/li&gt;&lt;li&gt;completness - are some record missing?&lt;/li&gt;&lt;li&gt;consistency - does some data contradict other parts of data&lt;/li&gt;&lt;li&gt;uniformity&amp;nbsp;- e.g. same units&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;process:&lt;/li&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;audit data (statistical analysis - how many types of which value exist)&lt;/li&gt;&lt;li&gt;plan how to to correct&lt;/li&gt;&lt;li&gt;test if it worked&lt;/li&gt;&lt;li&gt;manual correction step&lt;/li&gt;&lt;li&gt;repeat, until you have confidence in your data&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;you can also do data enhancement besides the cleaning&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;3.1. Various small examples&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;open street map data example - we change St. to Street and Av. to Avenue, etc., after seeing the statistics (validity)&lt;/li&gt;&lt;li&gt;dbpedia data set about cities - we find the error where density is in persons/square km, and area is in square meters, we also see arrays instead of single values, multiple timezones&amp;nbsp;(uniformity)&lt;/li&gt;&lt;li&gt;dbpedia data set about countries - we find some names which are not a country, or are arrays, column shift, by comparing the data to ISO country codes (accuracy)&lt;/li&gt;&lt;li&gt;example with video and screen capture of an exam - less likelihood that both are missing (completness)&lt;/li&gt;&lt;li&gt;example with "who do i trust the most" - e.g. there are 2 different addresses for same person - have to decide which one is more reliable, e.g. how was the data collected, which one is more accurate, etc. (consistency)&lt;/li&gt;&lt;li&gt;example of counting numbers of data types (including null) (uniformity)&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;3.2. Exercise&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;The exercise is about analysing and cleaning cities data set. We count number of data types, deciding about which digit of areaLand we are more likely to use, and choosing the more accurate one, changing string array of city names to python array, checking the lat and lon locations.&lt;/div&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;4. Working with MongoDB&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;flexible schema, easy to handle hierarchical data&lt;/li&gt;&lt;li&gt;JSON documents - convenient for programmers&lt;/li&gt;&lt;li&gt;flexible deployment (local or cloud)&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;4.1. Pymongo&lt;/h4&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;is python driver for mongo - keeps connection to database&lt;/li&gt;&lt;li&gt;minimal example&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;from pymongo import MongoClient&lt;br /&gt;&lt;br /&gt;client = MongoClient('localhost:27017')&lt;br /&gt;db = client[db_name]&lt;br /&gt;query = {"manufacturer" : "Porsche"}&lt;br /&gt;return db.autos.find(query)&lt;br /&gt;&lt;br /&gt;return db.autos.find_one(query)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;projection&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;return db.autos.find(query, {"_id":0, "name":1})&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;* normally _id is included by default, unless specifies like above explicitly&lt;/span&gt;&lt;/li&gt;&lt;li&gt;insert&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;db.autos.insert(auto)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;mongoimport cmd line utility - imports whole JSON files to DB&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;&amp;gt;mongoimport -d examplesdb -c autos --file autos.json&lt;/span&gt;&lt;/li&gt;&lt;li&gt;operators - start from "$"&lt;/li&gt;&lt;li&gt;$gt, $lt, $gte, $lte, $ne&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;query = {"foundingDate" : {"$gte":datetime(2001,1,1), "$lte" : datetime(2099,12,31)}}&lt;/span&gt;&lt;/li&gt;&lt;li&gt;$exists&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;query = {"governmentType":{"$exists" : 1}}&lt;/span&gt;&lt;/li&gt;&lt;li&gt;$regex&lt;/li&gt;&lt;li&gt;queries work inside arrays&lt;/li&gt;&lt;li&gt;also can work against other arrays, $in and $all&lt;/li&gt;&lt;li&gt;$in&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;query = {"assembly":{"$in":["Germany","United Kingdom","Japan"]}, "manufacturer":"Ford Motor Company"}&lt;/span&gt;&lt;/li&gt;&lt;li&gt;$all&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;query = {"modelYears":{"$all":[1965, 1966, 1967]}}&lt;/span&gt;&lt;/li&gt;&lt;li&gt;can also access hierarchy&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;query = {"dimensions.width":{"$gt":2.5}}&lt;/span&gt;&lt;/li&gt;&lt;li&gt;save(obj) method - insert or update (if the _id exists and such object is in db)&lt;/li&gt;&lt;li&gt;update(obj) - for (bulk) partial updates&lt;/li&gt;&lt;li&gt;update + $set&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;city = db.cities.update({"name":"Munich",&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"country":"Germany"},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$set":{"isoCountryCode":"DEU"}})&lt;/span&gt;&lt;/li&gt;&lt;li&gt;update + $unset&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;city = db.cities.update({"name":"Munich",&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace; font-size: x-small;" /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"country":"Germany"},&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace; font-size: x-small;" /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$unset":{"isoCountryCode":&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"blahblah_this is ignored"}})&lt;/span&gt;&lt;/li&gt;&lt;li&gt;bulk update&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;city = db.cities.update({"name":"Munich",&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace; font-size: x-small;" /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"country":"Germany"},&lt;/span&gt;&lt;br style="font-family: 'Courier New', Courier, monospace; font-size: x-small;" /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$set":{"isoCountryCode":"DEU"}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; multi=True)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;remove()&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;city = db.cities.remove() &lt;/span&gt;&lt;span style="font-family: inherit;"&gt;- removes all&lt;/span&gt;&lt;/li&gt;&lt;li&gt;remove(query)&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;4.2. Exercise&lt;/h4&gt;A lot of specific data cleaning and modifying, while copying it from CVS to mongo, row by row. It's about&amp;nbsp;arachnid (spiders) data set.&lt;/div&gt;&lt;/div&gt;&lt;h2&gt;5. Analysing Data&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-weight: normal;"&gt;twitter data set&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: normal;"&gt;followers, followees, tweets, tweet contents&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: normal;"&gt;user id is called "screen_name"&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: normal;"&gt;tasks like "find who tweeted the most"&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;5.1. Aggregation framework in MongoDB&lt;/h4&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;$group and $sort&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;db = get_db('twitter')&lt;br /&gt;pipeline = [&lt;br /&gt;&amp;nbsp; &amp;nbsp;{"$group": {"_id":"$source", &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"count": {"$sum": 1}}&lt;br /&gt;&amp;nbsp; &amp;nbsp;},&lt;br /&gt;&amp;nbsp; &amp;nbsp;{"$sort": {'count': -1}}]&lt;br /&gt;&lt;br /&gt;result = db.tweets.aggregate(pipeline)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;$skip and $limit - skip few first documents, or limit the output to number of documents only&lt;/li&gt;&lt;li&gt;$match - for filtering, and $project&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;pipeline = [{"$match":{"user.time_zone":"Brasilia"}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$match":{"user.statuses_count":{"$gte":100}}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$project":{"followers":"$user.followers_count",&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"screen_name":"$user.screen_name",&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"tweets":"$user.statuses_count"}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$sort":{"followers":-1}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$limit":1}]&lt;/span&gt;&lt;/li&gt;&lt;li&gt;$unwind - will multiply the record for each value in an array&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;pipeline = [{"$match":{"country":"India"}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$unwind":"$isPartOf"},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$group":{"_id":"$isPartOf", "count":{"$sum":1}}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$sort":{"count":-1}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$limit":1}]&lt;/span&gt;&lt;/li&gt;&lt;li&gt;$sum, $first, $last, $max, $min, $avg&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;pipeline = [{"$match":{"country":"India"}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$unwind":"$isPartOf"},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$group":{"_id":"$isPartOf", &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"avg":{"$avg":"$population"}}&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; },&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$group":{"_id":"totalAvg",&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"avg":{"$avg":"$avg"}}&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;]&lt;/span&gt;&lt;/li&gt;&lt;li&gt;$push and $addToSet&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;pipeline = [{"$group":&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"_id":"$user.screen_name",&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"tweet_texts":{"$push":"$text"},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"count":{"$sum":1}}}, &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$sort":{"count":-1}},&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {"$limit":5}&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;]&lt;/span&gt;&lt;/li&gt;&lt;li&gt;indices - they are hierarchical; the hierarchy determines in which order an item can be searched - think about it&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: xx-small;"&gt;db.autos.ensureIndex({"name": 1})&lt;/span&gt;&lt;/li&gt;&lt;li&gt;geospatial indices - don't search by exact point, but "near"&amp;nbsp;to&amp;nbsp;points ($near)&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: 'Courier New', Courier, monospace; font-size: xx-small;"&gt;db.autos.ensureIndex(loc_field, direction)&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;5.2. Exercises&lt;/h4&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Just building different pipelines.&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;6. Case study&lt;/h2&gt;It's about OpenStreetMap data set, which can be downloaded in XML from their site. You can download part which you are looking at, or download data of major cities. They also have a very nice wiki.&lt;br /&gt;&lt;br /&gt;The data is XML with "node"s and "way"s (way = street, road, etc). The data is human edited, so it contains errors.&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;6.1. SAX XML parsing&lt;/h4&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;import xml.etree.ElementTree as ET&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;for event, item in ET.&lt;b&gt;iterparse&lt;/b&gt;(xml_filename, events=("start",))&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; handle_node(elem) &lt;/span&gt;&lt;/div&gt;&lt;br /&gt;The non iterative parsing (reading all to memory at once) could go like:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;tree = ET.&lt;b&gt;parse&lt;/b&gt;(&lt;/span&gt;&lt;span style="font-family: 'Courier New', Courier, monospace;"&gt;xml_filename&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;root = tree.getroot()&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;for child in root:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; handle_node(child)&lt;/span&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;node.tag - name of XML node&lt;/li&gt;&lt;li&gt;node.attrib - dictionary of node attributes&lt;/li&gt;&lt;li&gt;node.attrib.keys() - array of attribute names&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;6.2 Regular expressions&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;import re&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;lower = re.compile(r'^([a-z]|_)*$')&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;re.findall(lower, string)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;m = lower.search(string)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;if m:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; substring = m.group()&lt;/span&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;6.3 Exercise&lt;/h4&gt;It's about parsing a XML document, and iterating over XML nodes and creating proper python dictionaries (specified in the task description).&lt;br /&gt;&lt;br /&gt;Conclusions&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Reading the actual data helps a lot, makes you see misconceptions, and understand what is actually going on&lt;/li&gt;&lt;li&gt;Read the task carefully and do not switch off thinking ;)&lt;/li&gt;&lt;li&gt;Latitude comes before longitude&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/1884713552860826320/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2014/12/data-wrangling-with-mongodb.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1884713552860826320'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1884713552860826320'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2014/12/data-wrangling-with-mongodb.html' title='Data Wrangling with MongoDB - Udacity course notes'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-973232027202579435</id><published>2014-03-25T12:30:00.001+01:00</published><updated>2016-01-13T21:00:06.051+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Maven'/><title type='text'>Maven plugin - smallest example</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;My notes about how to start developing Maven plugins, based on &lt;a href="https://maven.apache.org/guides/plugin/guide-java-plugin-development.html"&gt;https://maven.apache.org/guides/plugin/guide-java-plugin-development.html&lt;/a&gt;.&lt;/i&gt;&lt;br /&gt;&lt;h2 style="padding: 0px; text-align: left;"&gt;Maven Plugins&lt;/h2&gt;&lt;ul style="text-align: left; white-space: normal;"&gt;&lt;li&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;the    properties to configure are defined in plugin goals&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;the    versions of dependencies in the plugin override the dependency    versions of the project&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;configuration    can be placed:&lt;/span&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;under    the plugin node - it is the global plugin configuration&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;under    the executions/execution node - it is the configuration for this    particular execution&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;span style="font-family: 'Times New Roman'; white-space: normal;"&gt;Below  are the minimal sample steps of developing a Maven plugin:&lt;/span&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: 'Times New Roman';"&gt;1. Define the plugin&lt;/span&gt;&lt;/h4&gt;&lt;pre style="padding-left: 20px;"&gt;&lt;span style="background-color: white;"&gt;package &lt;/span&gt;&lt;span style="background-color: yellow;"&gt;sample.plugin&lt;/span&gt;&lt;span style="background-color: white;"&gt;;&lt;br /&gt;&lt;br /&gt;import org.apache.maven.plugin.AbstractMojo;&lt;br /&gt;import org.apache.maven.plugin.MojoExecutionException;&lt;br /&gt;import org.apache.maven.plugins.annotations.Mojo;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Says "Hi" to the user.&lt;br /&gt; *&lt;br /&gt; */&lt;br /&gt;&lt;/span&gt;&lt;span style="background-color: white;"&gt;&lt;b&gt;@Mojo&lt;/b&gt;&lt;/span&gt;&lt;span style="background-color: white;"&gt;( name = "&lt;/span&gt;&lt;span style="background-color: lime;"&gt;sayhi&lt;/span&gt;&lt;span style="background-color: white;"&gt;")&lt;br /&gt;public class &lt;b&gt;GreetingMojo &lt;/b&gt;extends &lt;b&gt;AbstractMojo&lt;/b&gt;&lt;br /&gt;{&lt;br /&gt;    public void execute() throws MojoExecutionException&lt;br /&gt;    {&lt;br /&gt;        getLog().info( "Hello, world." );&lt;br /&gt;    }&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;pre style="padding-left: 20px;"&gt;&lt;span style="background-color: white;"&gt;-----&lt;/span&gt;&lt;/pre&gt;&lt;pre style="padding-left: 20px;"&gt;&lt;span style="background-color: white;"&gt;&amp;lt;project&amp;gt;&lt;br /&gt;  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span style="background-color: yellow;"&gt;sample.plugin&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/groupId&amp;gt;&lt;br /&gt;  &amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span style="background-color: cyan;"&gt;hello-maven-plugin&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/artifactId&amp;gt;&lt;br /&gt;  &amp;lt;version&amp;gt;&lt;/span&gt;&lt;span style="background-color: cyan;"&gt;1.0-SNAPSHOT&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;packaging&amp;gt;maven-plugin&amp;lt;/packaging&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;name&amp;gt;Sample Parameter-less Maven Plugin&amp;lt;/name&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependencies&amp;gt;&lt;br /&gt;    &amp;lt;dependency&amp;gt;&lt;br /&gt;      &amp;lt;groupId&amp;gt;&lt;b&gt;org.apache.maven&lt;/b&gt;&amp;lt;/groupId&amp;gt;&lt;br /&gt;      &amp;lt;artifactId&amp;gt;&lt;b&gt;maven-plugin-api&lt;/b&gt;&amp;lt;/artifactId&amp;gt;&lt;br /&gt;      &amp;lt;version&amp;gt;2.0&amp;lt;/version&amp;gt;&lt;br /&gt;    &amp;lt;/dependency&amp;gt;&lt;br /&gt;  &amp;lt;/dependencies&amp;gt;&lt;br /&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;h4 style="padding-left: 20px; text-align: left;"&gt;&lt;span style="background-color: white;"&gt;2. Add the plugin to another project&lt;/span&gt;&lt;/h4&gt;&lt;pre style="padding-left: 20px; text-align: left;"&gt;&lt;span style="background-color: white;"&gt;&amp;lt;build&amp;gt;&lt;br /&gt;    &amp;lt;plugins&amp;gt;&lt;br /&gt;      &amp;lt;plugin&amp;gt;&lt;br /&gt;        &amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span style="background-color: cyan;"&gt;sample.plugin&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/groupId&amp;gt;&lt;br /&gt;        &amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span style="background-color: cyan;"&gt;hello-maven-plugin&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/artifactId&amp;gt;&lt;br /&gt;        &amp;lt;version&amp;gt;&lt;/span&gt;&lt;span style="background-color: cyan;"&gt;1.0-SNAPSHOT&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/version&amp;gt;&lt;br /&gt;      &amp;lt;/plugin&amp;gt;&lt;br /&gt;    &amp;lt;/plugins&amp;gt;&lt;br /&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;h4 style="text-align: left;"&gt;3. Run the plugin&lt;/h4&gt;&lt;pre&gt;&lt;/pre&gt;&lt;pre style="padding-left: 20px;"&gt;mvn &lt;span style="background-color: cyan;"&gt;sample.plugin&lt;/span&gt;:&lt;span style="background-color: cyan;"&gt;hello-maven-plugin&lt;/span&gt;:&lt;span style="background-color: cyan;"&gt;1.0-SNAPSHOT&lt;/span&gt;:&lt;span style="background-color: lime;"&gt;sayhi&lt;/span&gt;&lt;/pre&gt;&lt;pre style="padding-left: 20px;"&gt;mvn &lt;span style="background-color: cyan;"&gt;hello&lt;/span&gt;:&lt;span style="background-color: lime;"&gt;sayhi&lt;/span&gt;&lt;/pre&gt;&lt;h4 style="text-align: left;"&gt;4. Attach the plugin to a build lifecycle phase&lt;/h4&gt;&lt;pre style="padding-left: 20px;"&gt;&lt;span style="background-color: white;"&gt;&amp;lt;build&amp;gt;&lt;br /&gt;    &amp;lt;plugins&amp;gt;&lt;br /&gt;      &amp;lt;plugin&amp;gt;&lt;br /&gt;        &amp;lt;groupId&amp;gt;&lt;/span&gt;&lt;span style="background-color: cyan;"&gt;sample.plugin&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/groupId&amp;gt;&lt;br /&gt;        &amp;lt;artifactId&amp;gt;&lt;/span&gt;&lt;span style="background-color: cyan;"&gt;hello-maven-plugin&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/artifactId&amp;gt;&lt;br /&gt;        &amp;lt;version&amp;gt;&lt;/span&gt;&lt;span style="background-color: cyan;"&gt;1.0-SNAPSHOT&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/version&amp;gt;&lt;br /&gt;        &lt;/span&gt;&lt;b&gt;&lt;span style="background-color: white;"&gt;&amp;lt;executions&amp;gt;&lt;br /&gt;          &amp;lt;execution&amp;gt;&lt;br /&gt;            &amp;lt;phase&amp;gt;compile&amp;lt;/phase&amp;gt;&lt;br /&gt;            &amp;lt;goals&amp;gt;&lt;br /&gt;              &amp;lt;goal&amp;gt;&lt;/span&gt;&lt;span style="background-color: lime;"&gt;sayhi&lt;/span&gt;&lt;span style="background-color: white;"&gt;&amp;lt;/goal&amp;gt;&lt;br /&gt;            &amp;lt;/goals&amp;gt;&lt;br /&gt;          &amp;lt;/execution&amp;gt;&lt;br /&gt;        &amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/b&gt;&lt;span style="background-color: white;"&gt;&lt;br /&gt;      &amp;lt;/plugin&amp;gt;&lt;br /&gt;    &amp;lt;/plugins&amp;gt;&lt;br /&gt;  &amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;h2 style="padding: 0px; text-align: left;"&gt;Maven Archetypes&lt;/h2&gt;&lt;div&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;"Maven   archetype" is a short name for "maven archetype plugin"!&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt; &lt;/span&gt;&lt;/div&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;For  example the&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;maven-archetype-quickstart&lt;/span&gt;&lt;span style="font-family: Times, Times New Roman, serif;"&gt;&amp;nbsp;plugin  we run like this:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;gt;mvn  archetype:generate&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;-DgroupId=com.companyname.bank&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;-DartifactId=consumerBanking&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;-DarchetypeArtifactId=maven-archetype-quickstart&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;-DinteractiveMode=false&lt;/span&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/973232027202579435/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2014/03/maven-plugin.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/973232027202579435'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/973232027202579435'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2014/03/maven-plugin.html' title='Maven plugin - smallest example'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-7153021931671435688</id><published>2013-05-14T16:19:00.001+02:00</published><updated>2016-01-13T21:03:55.951+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Software Design'/><title type='text'>User Centered Design course</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;The core idea of the course can be summarized in the following way:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;- We have new requiremements. Let's start developing! No?&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;- No! First we create MOCKUPS for the client (simple HTML/JS)&lt;/i&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/7153021931671435688/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2013/05/we-have-new-requiremements.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/7153021931671435688'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/7153021931671435688'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2013/05/we-have-new-requiremements.html' title='User Centered Design course'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-351177832746009634</id><published>2012-09-11T11:43:00.000+02:00</published><updated>2016-01-15T22:43:43.144+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Prolog'/><category scheme='http://www.blogger.com/atom/ns#' term='Semantic Web'/><title type='text'>Notes about Prolog</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;It is important to define from the beginning the meaning of terms&amp;nbsp;for oneself&amp;nbsp;(e.g. what "gold" means - a color or substance), so that there is no ambiguity later. The same applies to the order of argument of course.&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Facts&lt;/h3&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;relation_name(argument_1,argument_2,...,argument_n).&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;relation_name = predicate&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Collection of facts is called database. Database contains also rules.&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Questions&lt;/h3&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;?- predicate(arg_1, arg_2, ..).&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;or&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;?- predicate(arg_1, Var_1, ..).&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;No answer means that the question is "not provable", it does not mean that the answer is "no".&lt;br /&gt;&lt;br /&gt;Prolog searches the database from the beginning to the end; if it finds a match it marks this place in database it instantiates the variable with the matched constan and returns this first match; if the user enters ';', the variable values are cleared and another search is being done from the place previously marked.&lt;br /&gt;&lt;br /&gt;If there are several variables, they are instantiated one by one, for each the database is being searched from the beginning.&lt;br /&gt;&lt;br /&gt;For conjunction of questions we use comma between goals. If there's conjunction of goals, Prolog attempts to satisfy each goal in turn, from left to right.&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Rules&lt;/h3&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;predicate1(arg_1, Var_1,..) :- predicate2(agr_2, Var_1, ..)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This means that predicate1 implies from predicate2.&lt;br /&gt;&lt;br /&gt;The underscore _ marks an anonymous variable.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/351177832746009634/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2012/09/notes-about-prolog.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/351177832746009634'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/351177832746009634'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2012/09/notes-about-prolog.html' title='Notes about Prolog'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-7777662218893216589</id><published>2011-03-23T09:59:00.001+01:00</published><updated>2016-01-15T23:20:15.630+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Aha!'/><category scheme='http://www.blogger.com/atom/ns#' term='Semantic Web'/><title type='text'>Wolfram Alpha Search Engine</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Wolfram Alpha Search Engine:&amp;nbsp;&lt;a href="http://www.wolframalpha.com/"&gt;http://www.wolframalpha.com/&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Wow! it's like seeing information EXACTLY IN THE WAY I AM USED TO STORING IT IN MY BRAIN. I didn't even realise how I remember and organise the information in my brain it up to now. It is as if I was looking at a snapshot, a photo of my memory. Awesome :) and this makes it so usable, so easy to navigate...&lt;br /&gt;&lt;br /&gt;The only problem is that it does not understand more complicated questions, e.g. "what is a white hole" gave information about white colour... i guess it is still a long way to go before it can actually be useful..&lt;br /&gt;&lt;br /&gt;..but anyway I just really understood the power of Semantic Web :)&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/7777662218893216589/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2011/03/wolfram-alpha-search-engine-d.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/7777662218893216589'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/7777662218893216589'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2011/03/wolfram-alpha-search-engine-d.html' title='Wolfram Alpha Search Engine'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-2349108808662204523</id><published>2011-03-17T08:35:00.001+01:00</published><updated>2016-01-15T22:55:49.077+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Aha!'/><category scheme='http://www.blogger.com/atom/ns#' term='Semantic Web'/><title type='text'>An example of a "semantic search need"</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I want to find out how to refresh a button. I enter in Google:&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;"how to refresh a button"&lt;/blockquote&gt;..but what I find is a bunch of posts about the "refresh button":&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;"how to ... refresh button"&lt;/blockquote&gt;just terribly annoying, I cannot find what I need. And of course double quotes don't help at all. Well, a good example.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/2349108808662204523/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2011/03/przyklad-semantic-search-need.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2349108808662204523'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2349108808662204523'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2011/03/przyklad-semantic-search-need.html' title='An example of a &quot;semantic search need&quot;'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-6929574287519974611</id><published>2010-11-02T02:34:00.000+01:00</published><updated>2016-01-15T22:52:19.728+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='XSLT'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Semantic Web'/><category scheme='http://www.blogger.com/atom/ns#' term='XML'/><title type='text'>XSTL syntax summary</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Based on:&amp;nbsp;&lt;a href="http://www.w3schools.com/xsl/xsl_templates.asp"&gt;http://www.w3schools.com/xsl/xsl_templates.asp&lt;/a&gt;.&lt;/i&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;code style="font-weight: bold;"&gt;&amp;lt;xsl:template match="/"&amp;gt;&lt;/code&gt; matches whole document&lt;/li&gt;&lt;li&gt;&lt;code style="font-weight: bold;"&gt;&amp;lt;xsl:value-of&amp;gt;&lt;/code&gt; extract value from a node, e.g.&amp;nbsp;&lt;span class="marked"&gt;&lt;code style="font-weight: bold;"&gt;&amp;lt;xsl:value-of select="catalog/cd/title"/&amp;gt;&lt;/code&gt;, &lt;span style="font-style: italic;"&gt;but it will get only first occurence!&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-family: monospace;"&gt;&amp;lt;&lt;/span&gt;xsl:for-each&amp;gt;&lt;/span&gt; allows loops:&lt;br /&gt;&lt;pre&gt;&lt;span class="marked"&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xsl:for-each select="catalog/cd"&amp;gt;&lt;/span&gt;&lt;br /&gt;...&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;xsl:value-of select="title"/&amp;gt;&lt;br /&gt;...&lt;br /&gt;&lt;span class="marked"&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;/xsl:for-each&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;span class="marked"&gt;filtering out the data from previous example:&lt;/span&gt;&lt;b&gt;&lt;span style="font-family: monospace;"&gt;&amp;lt;&lt;/span&gt;xsl:for-each select="catalog/cd[artist='Bob Dylan']"&amp;gt;&lt;/b&gt;&lt;br /&gt;(artist is at the same level as title)&lt;/li&gt;&lt;li&gt;sorting - put&amp;nbsp;&lt;span class="marked"&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-family: monospace;"&gt;&amp;lt;&lt;/span&gt;xsl:sort select="artist"/&amp;gt; &lt;/span&gt;element inside &lt;span style="font-weight: bold;"&gt;for-each &lt;/span&gt;element&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class="marked"&gt;selecting - embrace the content with&amp;nbsp;&lt;/span&gt;&lt;span class="marked"&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-family: monospace;"&gt;&amp;lt;&lt;/span&gt;xsl:if test="price &amp;gt; 10"&amp;gt; &lt;/span&gt;element &lt;/span&gt;&lt;span class="marked"&gt;inside &lt;span style="font-weight: bold;"&gt;for-each &lt;/span&gt;element&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class="marked"&gt;selecting multiple things (taki switch):&lt;/span&gt;&lt;pre&gt;&lt;span class="marked"&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xsl:choose&amp;gt;&lt;br /&gt; &amp;lt;xsl:when test="price &amp;gt; 10"&amp;gt;&lt;br /&gt;   ...&lt;/span&gt;&lt;br /&gt;&lt;span class="marked"&gt;   &amp;lt;/xsl:when&amp;gt;&lt;br /&gt; &amp;lt;xsl:otherwise&amp;gt;&lt;/span&gt;&lt;br /&gt;   ...&lt;br /&gt;&lt;span class="marked"&gt; &amp;lt;/xsl:otherwise&amp;gt;&lt;br /&gt;&amp;lt;/xsl:choose&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-family: monospace;"&gt;&amp;lt;&lt;/span&gt;xsl:apply-templates&amp;gt; &lt;/span&gt;element - applies a template to  the current element or to the current element's child nodes (xsl:apply-templates select="title"/&amp;gt; - apply the XSLT to the children named title.. if we define several "xsl:apply-templates", at the same time we specify the order in which the children will be processed)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/6929574287519974611/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/11/xstl.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/6929574287519974611'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/6929574287519974611'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/11/xstl.html' title='XSTL syntax summary'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-6335671514820937273</id><published>2010-10-29T14:45:00.000+02:00</published><updated>2016-01-15T23:27:08.930+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>Design Patterns: Bridge (Handle/Body)</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Summary taken from the book ,,&lt;a href="http://c2.com/cgi/wiki?DesignPatternsBook"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;'', by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Addison-Wesley, 1995.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;Class{&lt;br /&gt; House house;&lt;br /&gt; ...&lt;br /&gt;}&lt;br /&gt;...&lt;br /&gt;public static void main(String[] args){&lt;br /&gt; Class c = new Class(new DetachedHouse());&lt;br /&gt;}&lt;/pre&gt;Bridge pattern is when we use Interface/Absract class in a class instead of concrete subclasses, and instantiate it from outside, with concrete instance.&lt;br /&gt;&lt;br /&gt;We use it to separate abstraction from its implementation. Actually we usually have a class hierarchy for imlementation (e.g. arrayList, static array), and separate class hierarchy for abstraction (FIFO, LIFO) - in this way we connect them.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/6335671514820937273/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/bridge_29.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/6335671514820937273'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/6335671514820937273'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/bridge_29.html' title='Design Patterns: Bridge (Handle/Body)'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-4063153051424609366</id><published>2010-10-27T23:47:00.002+02:00</published><updated>2016-01-15T23:27:22.490+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>Design Patterns: Proxy (Surrogate)</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Summary taken from the book ,,&lt;a href="http://c2.com/cgi/wiki?DesignPatternsBook"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;'', by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Addison-Wesley, 1995.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;/pre&gt;Proxy pretends being an object when in fact it's not. There are several types of proxies:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Remote proxy ("Ambassador") - we have client and server, instead of communicating between server's and client's classes we create a proxy on client side, and a proxy on server side, and only the proxies communicate&lt;/li&gt;&lt;li&gt;Virtual proxy - creates expensive object on first demand; it can also hold information about the object which is not instantiated yet (e.g. height and width of an image)&lt;/li&gt;&lt;li&gt;Protection proxy - to control access&lt;/li&gt;&lt;li&gt;Smart proxy - just an addition to an object, to have more control, e.g. lock/unlock, conuting number of references (to later destroy if no references)&lt;/li&gt;&lt;/ol&gt;** Proxies do not connect with other proxies as their objects, in such case we'll have Decorator pattern, not Proxy.&lt;br /&gt;&lt;br /&gt;** "copy-on-write" method - we have same proxy object referenced by different classes, when one proxy state changes, it copies itself. in such case we have to remember of counting number of references as not to leave the last proxy not destroyed&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/4063153051424609366/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/proxy.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/4063153051424609366'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/4063153051424609366'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/proxy.html' title='Design Patterns: Proxy (Surrogate)'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-2253552308880365742</id><published>2010-10-27T23:45:00.002+02:00</published><updated>2016-01-15T23:27:32.416+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>Design Patterns: Composite</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Summary taken from the book ,,&lt;a href="http://c2.com/cgi/wiki?DesignPatternsBook"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;'', by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Addison-Wesley, 1995.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;br /&gt;&lt;pre&gt;class Node{&lt;br /&gt;  Node[] children;&lt;br /&gt;  getChildAt(int idx);&lt;br /&gt;  ...&lt;br /&gt;}&lt;br /&gt;class FullNode extends Node{&lt;br /&gt;}&lt;br /&gt;class LeafNode extends Node{&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;We compose objects to tree structures - when &lt;span style="font-weight: bold;"&gt;we want to treat individual objects and compositions of objects in the same way&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;It's recursive composition.&lt;br /&gt;&lt;br /&gt;The clients do not distinguish between invidual subclasses, they treat all of them uniformly.&lt;br /&gt;&lt;br /&gt;Should the methods be declared in superclass or subclasses? Depends if you favor safety (subclasses) or transparency (superclass):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;if you favor &lt;span style="font-weight: bold;"&gt;safety&lt;/span&gt;, you can still add a getComposite() method to the superclass, and leaves would just return null:) &lt;/li&gt;&lt;li&gt;in case you favor &lt;span style="font-weight: bold;"&gt;transparency &lt;/span&gt;remember to throw at least exceptions in leaf subclasses, so that a possible bug will be noticed&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/2253552308880365742/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/composite.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2253552308880365742'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2253552308880365742'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/composite.html' title='Design Patterns: Composite'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-2625578568656531553</id><published>2010-10-27T23:43:00.000+02:00</published><updated>2016-01-15T23:27:36.970+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>Design Patterns: Adapter (Wrapper)</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Summary taken from the book ,,&lt;a href="http://c2.com/cgi/wiki?DesignPatternsBook"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;'', by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Addison-Wesley, 1995.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;We have incompatible interfaces and we want to convert one interface to match the other.&lt;br /&gt;&lt;br /&gt;The thing we want to adapt we either:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;compose in a class that implements the required interface (object adapter)&lt;/li&gt;&lt;li&gt;extend by a class that implements the required interface (class adapter)&lt;/li&gt;&lt;/ul&gt;the class that implements the required interface is called adapter.&lt;br /&gt;&lt;br /&gt;* adapter can add new functionality which adaptee does not provide&lt;br /&gt;&lt;br /&gt;Class adapter vs Object adapter:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;class adapter will not automatically work for subclasses of adaptee :(&lt;/li&gt;&lt;li&gt;class adapter allows easily to override adaptee's methods :)&lt;/li&gt;&lt;li&gt;object adapter can easily adapt several adaptees :)&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;* pluggable adapters&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/2625578568656531553/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/adapter.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2625578568656531553'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/2625578568656531553'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/adapter.html' title='Design Patterns: Adapter (Wrapper)'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-1596156687341010632</id><published>2010-10-22T05:03:00.000+02:00</published><updated>2016-01-15T23:23:40.280+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='RuleML'/><category scheme='http://www.blogger.com/atom/ns#' term='Semantic Web'/><title type='text'>RuleML 1.0 Derivation Rule</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;from RuleML Website (&lt;a href="http://ruleml.org/"&gt;http://ruleml.org/&lt;/a&gt;):&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;table style="margin-left: 10px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;blockquote class="tr_bq"&gt;&lt;h4&gt;&lt;span style="font-weight: bold;"&gt;Mission Statement&lt;/span&gt;&lt;/h4&gt;&lt;div style="text-align: justify;"&gt;The goal of the Rule Markup Initiative is to develop RuleML as the canonical Web language for rules using XML markup, formal semantics, and efficient implementations.&amp;nbsp;RuleML covers the entire rule spectrum, from derivation rules to transformation rules to reaction rules. RuleML can thus specify queries and inferences in Web ontologies, mappings between Web ontologies, and dynamic Web behaviors of workflows, services, and agents.&amp;nbsp;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt; &lt;h4&gt;&lt;b&gt;Mission Approach&lt;/b&gt;&lt;/h4&gt;&lt;div style="text-align: justify;"&gt;Rather than focusing on academic research prototypes, RuleML is about rule interoperation between industry standards (such as JSR 94, SQL'99, OCL, BPMI, WSFL, XLang, XQuery, RQL, OWL, DAML-S, and ISO Prolog) as well as established systems (CLIPS, Jess, ILOG JRules, Blaze Advisor, Versata, MQWorkFlow, BizTalk, Savvion, etc.).&amp;nbsp;The Initiative develops a modular RuleML specification and transformations  from and to other rule standards/systems. Moreover, it coordinates the development of tools to elicit, maintain, and execute RuleML rules. It also collects use cases, e.g. on business rules and reactive services.&lt;/div&gt;&lt;/blockquote&gt;&lt;div style="font-style: italic;"&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/1596156687341010632/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/ruleml-10-derivation-rule.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1596156687341010632'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1596156687341010632'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/ruleml-10-derivation-rule.html' title='RuleML 1.0 Derivation Rule'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-3534913658982002404</id><published>2010-10-21T22:02:00.000+02:00</published><updated>2016-01-15T23:04:29.550+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='XSD'/><category scheme='http://www.blogger.com/atom/ns#' term='Semantic Web'/><category scheme='http://www.blogger.com/atom/ns#' term='XML'/><title type='text'>XSD summary</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Based on XSD: &lt;a href="http://www.w3schools.com/Schema/default.asp"&gt;http://www.w3schools.com/Schema/default.asp&lt;/a&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;* example:&lt;br /&gt;&lt;pre&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;?xml version="1.0"?&amp;gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&amp;gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;xs:element name="note"&amp;gt;&lt;br /&gt;&amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:complexType&amp;gt;&lt;/pre&gt;&lt;pre&gt;  &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:sequence&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="to" type="xs:string"/&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="from" type="xs:string"/&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="heading" type="xs:string"/&amp;gt;&lt;/pre&gt;&lt;pre&gt;    &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="body" type="xs:string"/&amp;gt;&lt;/pre&gt;&lt;pre&gt;  &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;/xs:sequence&amp;gt;&lt;/pre&gt;&lt;pre&gt;&amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;/xs:complexType&amp;gt;&lt;/pre&gt;&lt;pre&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;/xs:element&amp;gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;/xs:schema&amp;gt; &lt;/pre&gt;* &lt;code&gt;elementFormDefault="qualified"&lt;/code&gt; indicates that all elements in the XML must be namespace qualified&lt;br /&gt;&lt;br /&gt;* to reference an XSD in an XML document the main node has to have the following attributes:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;xmlns="http://www.w3schools.com"&lt;/code&gt; - default namespace declaration&lt;/li&gt;&lt;li&gt;&lt;code&gt;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;/code&gt; - make XML Schema Instance namespace available&lt;/li&gt;&lt;li&gt;&lt;code&gt;xsi:schemaLocation="http://www.w3schools.com location_of_your_schema.xsd"&lt;/code&gt; - location of the schema to be used with given namespace&lt;/li&gt;&lt;/ul&gt;Elements in XSD schema:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;simple element (e.g.&amp;nbsp;&lt;code&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="to" type="xs:string"/&amp;gt;&lt;/code&gt;) - can contain only text (i.e. boolean, string, date, etc.), you can also restrict its type; the most common types:&lt;br /&gt;- xs:string&lt;br /&gt;- xs:decimal&lt;br /&gt;- xs:integer&lt;br /&gt;- xs:boolean&lt;br /&gt;- xs:date&lt;br /&gt;- xs:time&lt;br /&gt;* you can also specify a default value for an element;&lt;/li&gt;&lt;li&gt;an attribute - is a simple element (e.g.&amp;nbsp;&lt;code&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:attribute name="xxx" type="yyy"/&amp;gt;&lt;/code&gt;) - you can specify a default or a fixed (cannot be changed) value of an attribute; to make an attribute required you have to specify it, by using &lt;code&gt;use="required"&lt;/code&gt; attribute;&lt;/li&gt;&lt;li&gt;complex element - composed of other elements and/or text; can also contain empty elements; there are two ways of defining a complex type:&lt;br /&gt;&lt;table style="height: 195px; width: 542px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="employee"&amp;gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;xs:complexType&amp;gt;&lt;br /&gt; &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:sequence&amp;gt;&lt;/pre&gt;&lt;pre&gt;   &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="firstname"&lt;/pre&gt;&lt;pre&gt;               type="xs:string"/&amp;gt;&lt;br /&gt;   &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="lastname"&lt;/pre&gt;&lt;pre&gt;               type="xs:string"/&amp;gt;&lt;br /&gt; &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;/xs:sequence&amp;gt;&lt;/pre&gt;&lt;pre&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;/xs:complexType&amp;gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;/xs:element&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="employee"&lt;br /&gt;         type="personinfo"/&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;xs:complexType name="personinfo"&amp;gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;xs:sequence&amp;gt;&lt;br /&gt; &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="firstname"&lt;/pre&gt;&lt;pre&gt;             type="xs:string"/&amp;gt;&lt;br /&gt;  &amp;nbsp;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:element name="lastname"&lt;/pre&gt;&lt;pre&gt;             type="xs:string"/&amp;gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;/xs:sequence&amp;gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;/xs:complexType&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;In case of second solution, several elements can refer to the same complex type, moreover, new complex types can be built on top of existing ones, in the following way:&lt;br /&gt;&lt;pre&gt;&lt;span style="font-weight: bold;"&gt;&amp;lt;&lt;/span&gt;xs:complexType name="fullpersoninfo"&amp;gt;&lt;br /&gt;&lt;span style="font-weight: bold; white-space: normal;"&gt;&amp;lt;&lt;/span&gt;xs:complexContent&amp;gt;&lt;br /&gt;  &amp;lt;xs:extension base="personinfo"&amp;gt;&lt;br /&gt;    &amp;lt;xs:sequence&amp;gt;&lt;br /&gt;    ... new elements ...&lt;br /&gt;    &amp;lt;/xs:sequence&amp;gt;&lt;br /&gt;  &amp;lt;/xs:extension&amp;gt;&lt;br /&gt;&amp;lt;/xs:complexContent&amp;gt;&lt;br /&gt;&amp;lt;/xs:complexType&amp;gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;empty element (i.e. with even no text inside):&lt;br /&gt;&lt;pre&gt;&amp;lt;xs:element name="product"&amp;gt;&lt;br /&gt;  &amp;lt;xs:complexType&amp;gt;&lt;br /&gt;  &amp;lt;/xs:complexType&amp;gt;&lt;br /&gt;&amp;lt;/xs:element&amp;gt;&lt;/pre&gt;* there are special ways to define a complex element: with text only, with other elements only, with both text and other elements - i nie widze w tym zadnej logiki; for more information on this see: &lt;a href="http://www.w3schools.com/Schema/schema_complex_elements.asp"&gt;http://www.w3schools.com/Schema/schema_complex_elements.asp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;Facets (restrictions):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;restrictions on simple types:&lt;br /&gt;&lt;pre&gt;&amp;lt;xs:element name="car"&amp;gt;&lt;br /&gt;&amp;lt;xs:simpleType&amp;gt;&lt;br /&gt;  &amp;lt;xs:restriction base="xs:string"&amp;gt;&lt;br /&gt;  &amp;lt;xs:restriction_type value="..."/&amp;gt;&lt;br /&gt;  ...&lt;br /&gt;  &amp;lt;xs:restriction&amp;gt;&lt;br /&gt;&amp;lt;/xs:simpleType&amp;gt;&lt;br /&gt;&amp;lt;/xs:element&amp;gt;&lt;/pre&gt;(more here: &lt;a href="http://www.w3schools.com/Schema/schema_facets.asp"&gt;http://www.w3schools.com/Schema/schema_facets.asp&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;Indicators:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;elements after &lt;code&gt;"&amp;lt;xs:complexType&amp;gt;&lt;/code&gt;:&lt;br /&gt;* &lt;code&gt;All&lt;/code&gt; - kazde dziecko musi sie pojawic przynajmniej raz, w dowolnej kolejnosci;&lt;br /&gt;* &lt;code&gt;Choice&lt;/code&gt; - jedno z dzieci ma sie pojawic;&lt;br /&gt;* &lt;code&gt;Sequence&lt;/code&gt; - wszystkie dzieci w podanej kolejnosci&lt;/li&gt;&lt;li&gt;attributes in element's definition:&lt;br /&gt;* &lt;code&gt;maxOccurs&lt;/code&gt;&lt;br /&gt;* &lt;code&gt;minOccurs&lt;/code&gt;&lt;br /&gt;* "&lt;span style="font-style: italic;"&gt;For all "Order" and "Group" indicators (any, all, choice, sequence,  group name, and group reference) the &lt;span style="font-weight: bold;"&gt;default value for maxOccurs and minOccurs is 1&lt;/span&gt;"&lt;/span&gt;&lt;br /&gt;* you can use &lt;code&gt;maxOccurs="unbounded"&lt;/code&gt; to have the element appearing unlimited number of times&lt;/li&gt;&lt;li&gt;element groups and attribute groups (can be used among other elements/attributes):&lt;br /&gt;- this is a reference to groups of elements: &amp;lt;&lt;code&gt;xs:group ref="persongroup"/&amp;gt;&lt;/code&gt;&lt;br /&gt;- and this is a reference to a group of attributes: &lt;pre&gt;&amp;lt;xs:element name="person"&amp;gt;&lt;br /&gt;&amp;lt;xs:complexType&amp;gt;&lt;br /&gt;  &amp;lt;xs:attributeGroup ref="personattrgroup"/&amp;gt;&lt;br /&gt;&amp;lt;/xs:complexType&amp;gt;&lt;br /&gt;&amp;lt;/xs:element&amp;gt;&lt;/pre&gt;read more here: &lt;a href="http://www.w3schools.com/Schema/schema_complex_indicators.asp"&gt;http://www.w3schools.com/Schema/schema_complex_indicators.asp &lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;Other elements:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;"any" element: &amp;lt;&lt;code&gt;xs:any minOccurs="0"/&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;"anyAttribute" element: &amp;lt;&lt;code&gt;xs:anyAttribute/&amp;gt;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;what is interesting, with usage of the two above we can create extensible documents; also we can make a document can use e.g. two schemas, one for main part, and another for subparts&lt;/li&gt;&lt;/ul&gt;Element substitution:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;pre&gt;&amp;lt;xs:element name="name" type="xs:string"&amp;gt;&lt;br /&gt;&amp;lt;xs:element name="navn" substitutiongroup="name"&amp;gt;&lt;/pre&gt;- now "navn" can be used instead of "name"; we can also block an element from others substituting it, by using: &lt;code&gt;block="substitution"&lt;/code&gt; attribute within the original element; read more here: &lt;a href="http://www.w3schools.com/Schema/schema_complex_subst.asp"&gt;http://www.w3schools.com/Schema/schema_complex_subst.asp&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;Dividing and organizing the schema: &lt;a href="http://www.w3schools.com/Schema/schema_example.asp"&gt;http://www.w3schools.com/Schema/schema_example.asp&lt;/a&gt; (this is quite important...)&lt;br /&gt;&lt;br /&gt;More about data types - read here: &lt;a href="http://www.w3schools.com/Schema/schema_dtypes_string.asp"&gt;http://www.w3schools.com/Schema/schema_dtypes_string.asp&lt;/a&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/3534913658982002404/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/xsd-httpwww.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/3534913658982002404'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/3534913658982002404'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/xsd-httpwww.html' title='XSD summary'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-291565387604895943</id><published>2010-10-12T14:38:00.004+02:00</published><updated>2016-01-15T23:27:40.952+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>Design Patterns: Singleton</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Summary taken from the book ,,&lt;a href="http://c2.com/cgi/wiki?DesignPatternsBook"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;'', by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Addison-Wesley, 1995.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;jaki singleton jest kazdy widzi&lt;/span&gt;..&lt;br /&gt;* &lt;span style="font-style: italic;"&gt;class operation = static operation&lt;/span&gt; (?)&lt;br /&gt;&lt;br /&gt;We use Singleton pattern when we want to &lt;span style="font-weight: bold;"&gt;ensure a class only has one instance&lt;/span&gt;, and provide a &lt;span style="font-weight: bold;"&gt;global point of access&lt;/span&gt; to it. Another case of using this is when we want to have the possibility of &lt;span style="font-weight: bold;"&gt;using a subclass of a class instead of the class&lt;/span&gt; without having to modify the code of the other classes.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Consequences and variations:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;singleton class &lt;span style="font-weight: bold;"&gt;may&lt;/span&gt; be responsible for creating its own instance&lt;/li&gt;&lt;li&gt;we have&lt;span style="font-weight: bold;"&gt; full control over access t&lt;/span&gt;o sole instance&lt;/li&gt;&lt;li&gt;it is &lt;span style="font-weight: bold;"&gt;better than global variables&lt;/span&gt;, as we do not pollute the namespace, also as we have lazy initialization&lt;/li&gt;&lt;li&gt;concrete singleton class can be &lt;span style="font-weight: bold;"&gt;specified at run-time&lt;/span&gt;, and other classes can still use it in the same way&lt;/li&gt;&lt;li&gt;singleton can also &lt;span style="font-weight: bold;"&gt;restrict the number of possible instances&lt;/span&gt; to more that 1 instance&lt;/li&gt;&lt;li&gt;it's better not to make the other methods of singleton &lt;span style="font-weight: bold;"&gt;class (static)&lt;/span&gt; methods (it's harder to change to more than 1 instance, it's not possible to override them polymorphically in C++)&lt;/li&gt;&lt;li&gt;if we sublcassed the singleton, we can statically define the concrete subclass in singleton's &lt;span style="font-style: italic; font-weight: bold;"&gt;instance&lt;/span&gt;&lt;span style="font-weight: bold;"&gt; operation&lt;/span&gt;; or we can use a &lt;span style="font-weight: bold;"&gt;registry of singletons&lt;/span&gt; (then the singleton will no longer be responsible for creating the instance)&lt;/li&gt;&lt;/ul&gt;* &lt;span style="font-weight: bold;"&gt;Registry of singletons&lt;/span&gt; works the way that it maps singleton String name to class name; each singleton &lt;span style="font-weight: bold;"&gt;registers itself &lt;/span&gt;in the registry, e.g. in its &lt;span style="font-weight: bold;"&gt;constructor&lt;/span&gt;; a singleton's &lt;span style="font-style: italic;"&gt;instance &lt;/span&gt;method asks the registry for the instance giving it its string name; (&lt;span style="font-style: italic;"&gt;metne to jeszcze dla mnie..&lt;/span&gt;)&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/291565387604895943/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/singleton.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/291565387604895943'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/291565387604895943'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/singleton.html' title='Design Patterns: Singleton'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-5802255362228284540</id><published>2010-10-12T14:38:00.003+02:00</published><updated>2016-01-15T23:28:16.276+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>Design Patterns: Abstract Factory (Kit)</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Summary taken from the book ,,&lt;a href="http://c2.com/cgi/wiki?DesignPatternsBook"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;'', by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Addison-Wesley, 1995.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;class CertainFactory extends Factory{&lt;br /&gt; @Override&lt;br /&gt; ProductA createProductA(){&lt;br /&gt;    return new CertainProductA();&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;We do have an abstract Factory which defines an interface for instantiating object of general types. In implementing subclasses we instantiate objects as cetrain subtypes of the general types.&lt;br /&gt;&lt;br /&gt;We can use such pattern for example for a toolkit that supports multiple look-and-feel standards. Each standard will then have corresponding Factory subclass, and for each widget type a set of specific classes. Clients have no knowledge even of the concrete widgets, just of the abstract Factory and general widget types.&lt;br /&gt;&lt;br /&gt;We use it when we want to configure system with one of multiple &lt;span style="font-weight: bold;"&gt;families of product&lt;/span&gt;, and when we want to &lt;span style="font-weight: bold;"&gt;impose a constraint&lt;/span&gt; that objects specific for particular family should be used &lt;span style="font-weight: bold;"&gt;together&lt;/span&gt;; when we want to separate the &lt;span style="font-weight: bold;"&gt;system&lt;/span&gt; from its product &lt;span style="font-weight: bold;"&gt;creation, composition and representation&lt;/span&gt;; when we want to &lt;span style="font-weight: bold;"&gt;hide the implementation &lt;/span&gt;of products, i.e. when providing a &lt;span style="font-weight: bold;"&gt;class library&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Consequences and variations&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the concrete Factory is usually created at &lt;span style="font-weight: bold;"&gt;run-time&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(-) &lt;/span&gt;extending to use &lt;span style="font-weight: bold;"&gt;new kinds of product&lt;/span&gt; is difficult&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(+) &lt;/span&gt;it promotes &lt;span style="font-weight: bold;"&gt;consistency&lt;/span&gt; among the product families&lt;/li&gt;&lt;li&gt;concrete factories are usually &lt;span style="font-weight: bold;"&gt;singletons&lt;/span&gt;&lt;/li&gt;&lt;li&gt;creating concrete product in concrete factories can be done either with &lt;span style="font-weight: bold;"&gt;FactoryMethod&lt;/span&gt; pattern (the disadvantage is we need a new concrete factory with overriden factory methods for each family), or with &lt;span style="font-weight: bold;"&gt;Prototype&lt;/span&gt; pattern (in this case we instantiate the factories with a set of prototypes of each product type - in this way we can reduce the number of required concrete factories)&lt;/li&gt;&lt;li&gt;instead of specifying a separate method for creating each product type we can have just &lt;span style="font-weight: bold;"&gt;one parametrized method&lt;/span&gt; - but this approach is less safe: all products have to have same subclass in case of statically types languages, and the client will not know anything about the specific object type - which causes a classic trade-off for a highly flexible and extensible interface;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/5802255362228284540/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/abstract-factory.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/5802255362228284540'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/5802255362228284540'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/abstract-factory.html' title='Design Patterns: Abstract Factory (Kit)'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-7818788220453071031</id><published>2010-10-12T14:38:00.001+02:00</published><updated>2016-01-15T23:28:40.301+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>Design Patterns: Builder</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Summary taken from the book ,,&lt;a href="http://c2.com/cgi/wiki?DesignPatternsBook"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;'', by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Addison-Wesley, 1995.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;class Direcor {&lt;br /&gt; getRepresentation(){&lt;br /&gt;   ...&lt;br /&gt;   for (..){&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;      builder.addPart(&lt;/span&gt;in.readLine());&lt;br /&gt;   }&lt;br /&gt;   ...&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;We use this when we want to &lt;span style="font-weight: bold;"&gt;separate the algorithm for creating an object &lt;/span&gt;from the structure of the thing based on which we create it.&lt;br /&gt;&lt;br /&gt;This is often used for &lt;span style="font-weight: bold;"&gt;conversions&lt;/span&gt;: the Director parses input data and calls the the Builder's methods for creating the object. The Builder's same methods are called multiple times for each piece of data. At the end we can retrieve constructed object from the Builder. We can have many different Builders, each converting to different format.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Variations:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the example builder is in a &lt;span style="font-weight: bold;"&gt;step-by-step fashion&lt;/span&gt;, but that mat not be enough, e.g. some conversion cases; in such case the Builder can return to the Director the intermediate steps, which will then be passed back to the Builder, at proper time..&lt;/li&gt;&lt;li&gt;there's &lt;span style="font-weight: bold;"&gt;no need for creating common interface for products&lt;/span&gt; - they vary too much, and the builders must know concrete classes anyways&lt;/li&gt;&lt;li&gt;in superclass of all Builders the building methods &lt;span style="font-weight: bold;"&gt;do not have to be virtual &lt;/span&gt;(abstract) - they can just be &lt;span style="font-weight: bold;"&gt;empty&lt;/span&gt;; in such case the subclasses will implement only the parts they are interested in&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/7818788220453071031/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/builder.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/7818788220453071031'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/7818788220453071031'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/builder.html' title='Design Patterns: Builder'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-3748868081768289315</id><published>2010-10-12T14:19:00.001+02:00</published><updated>2016-01-15T23:27:47.550+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>Design Patterns: Prototype</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;Summary taken from the book ,,&lt;a href="http://c2.com/cgi/wiki?DesignPatternsBook"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;'', by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Addison-Wesley, 1995.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;  &lt;br /&gt;&lt;pre&gt;class GraphicTool{&lt;br /&gt; draw(){&lt;br /&gt;   ...&lt;br /&gt;   Product p = this.prototype.&lt;span style="font-weight: bold;"&gt;clone();&lt;/span&gt;&lt;br /&gt;   p.draw();&lt;br /&gt;   ...&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;We use it when we do &lt;span style="font-weight: bold;"&gt;not know the class' type &lt;/span&gt;(Product) &lt;span style="font-weight: bold;"&gt;to instatiate &lt;/span&gt;at compiliation time. In this way we avoid building a factory for each Product type. We can also use this pattern if we are going to use many instances of Product with similar state (as this way it is more convenient).&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Consequences:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(+) &lt;/span&gt;the code in containing class is not application-specific, not bound to any specific product implementation&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(+)&lt;/span&gt; adding/removing registered prototypes can be done at run-time&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(+) &lt;/span&gt;adjusting the prototype by registering existing class as prototype instead of creating a new class each time&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(+) &lt;/span&gt;the user can define the properties of the prototype at run-time - so he can define new objects without programming!&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(+) &lt;/span&gt;requires less objects than Factory Method&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(-) &lt;/span&gt;requires implementing the &lt;span style="font-style: italic;"&gt;clone() &lt;/span&gt;method in all subclasses of the Product class; can be hard if some of these classes already exist, or if there are circular references&lt;/li&gt;&lt;li&gt;remember that many languages that suport cloning by default, suport only shallow cloning&lt;/li&gt;&lt;/ul&gt;&lt;span style="font-weight: bold;"&gt;Variations:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;clients can use a dynamic set of prototypes (provided by a &lt;span style="font-weight: bold;"&gt;prototype manager&lt;/span&gt;)&lt;/li&gt;&lt;li&gt;client might initialize the newly cloned object either by existing setters, or by calling an &lt;span style="font-style: italic;"&gt;initialize(...) &lt;/span&gt;method&lt;/li&gt;&lt;li&gt;(* for example Smalltalk and Objective C treat classes as prototypes by default)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/3748868081768289315/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/zrodlo-class.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/3748868081768289315'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/3748868081768289315'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/zrodlo-class.html' title='Design Patterns: Prototype'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-1573915623097609297</id><published>2010-10-08T06:19:00.000+02:00</published><updated>2016-01-15T23:26:32.770+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Design'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>Design Patterns: Factory Method (Virtual Constructor)</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;i&gt;Summary taken from the book ,,&lt;a href="http://c2.com/cgi/wiki?DesignPatternsBook"&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;'', by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides, Addison-Wesley, 1995.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;abstract class Creator{&lt;/div&gt;&lt;pre&gt;abstract createProduct();&lt;br /&gt;  doSomething() {&lt;br /&gt;    ...&lt;br /&gt;    Product p = createProduct();&lt;br /&gt;    p.blaBlaBla();&lt;br /&gt;    ...&lt;br /&gt;  }&lt;br /&gt;}&lt;/pre&gt;We use it when a class (Creator) needs to &lt;span style="font-weight: bold;"&gt;create &lt;/span&gt;and use an object (Product), but it &lt;span style="font-weight: bold;"&gt;does not need to know &lt;/span&gt;the type of the object.&lt;br /&gt;&lt;br /&gt;We make this class &lt;span style="font-style: italic;"&gt;abstract&lt;/span&gt;, and let its subclasses implement the method &lt;span style="font-style: italic;"&gt;factoryMethod()&lt;/span&gt;, which will create and return the concrete object. The &lt;span style="font-style: italic;"&gt;factoryMethod()&lt;/span&gt; method is then for example used in the abstract Creator whenever the Product of unknown type was needed.&lt;br /&gt;&lt;br /&gt;We can also use this methd when we want to specify the object type to create in Creator subclasses.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Consequences:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(+) &lt;/span&gt;the code in abstract Creator is not application-specific, not bound to any specific product implementation&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;(-) &lt;/span&gt;each time we want to create specific Product, we have to subclass Creator class - so this method is good if we would do it anyway, otherwise it is just making the application more complicated&lt;/li&gt;&lt;li&gt;we can also use it pattern when Creator has delegated part of its responsibilities to another class (Manipulator); then in Manipulator we can also use the &lt;span style="font-style: italic;"&gt;factoryMethod()&lt;/span&gt; methods (in the book the Manipulator class was abstract, and its various subclasses were using  &lt;span style="font-style: italic;"&gt;factoryMethod()&lt;/span&gt; methods of corresponding subclasses of Creator class; that is why this case was called the case of parralel class hierarchy&lt;/li&gt;&lt;/ul&gt;&lt;span style="font-weight: bold;"&gt;Variations&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Creator does not have to be abstract; it can be concrete and provide default Product implementation&lt;/li&gt;&lt;li&gt;&lt;span style="font-style: italic;"&gt;factoryMethod()&lt;/span&gt; can take a parameter telling which object to instantiate; in such case the Creator would create some objects, the rest can be created by Creator's subclasses (but in such case these subclasses must call the Creator's &lt;span style="font-style: italic;"&gt;factoryMethod() &lt;/span&gt;method at the end)&lt;/li&gt;&lt;li&gt;and many other variations..&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/1573915623097609297/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/design-patterns-factory-method-virtual.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1573915623097609297'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1573915623097609297'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/design-patterns-factory-method-virtual.html' title='Design Patterns: Factory Method (Virtual Constructor)'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-4408819089603181445</id><published>2010-10-07T04:13:00.000+02:00</published><updated>2016-01-15T23:13:17.276+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Infomation Security'/><title type='text'>Information Security (undergrad course)</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;1. Modulo arithmetic&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Def.: a = b mod n &amp;lt;=&amp;gt; there exists such integer k that a-b = kn&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;We say &lt;span style="font-style: italic;"&gt;"a is congruent to b modulo n"&lt;/span&gt;; n is the &lt;span style="font-style: italic;"&gt;modulus&lt;/span&gt;; b is the &lt;span style="font-style: italic;"&gt;residuo&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Theorems about modulo arithmetic:&lt;/span&gt;&lt;br /&gt;a=b and b=c =&amp;gt; a+c=b+d&lt;br /&gt;a=b and b=c =&amp;gt; ac=bd&lt;br /&gt;a=b =&amp;gt; a^s=b^s (proof by induction)&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Lagrange Theorem:&lt;/span&gt;&lt;br /&gt;x=y  =&amp;gt; P(x)=P(y)&lt;br /&gt;&lt;br /&gt;What implies from Lagrange theorem:&lt;br /&gt;* 61345 number we can write down like:&lt;br /&gt;61345 = 6*10^4 + 1*10^3 + 3*10^2 + 4*10 + 5&lt;br /&gt;* we can also represent the number in different base, in any base, let's say base "B":&lt;br /&gt;61345(B) = 6*B^4 + 1*B^3 + 3*B^2 + 4*B + 5 = P(B)&lt;br /&gt;* we can treat this as polynomial P(B); We know that for B=10 it gives the number 61345;&lt;br /&gt;&lt;br /&gt;Suppose we want to know what is 61345 congruent to in modulo 9 arithmetic. Because 10=1 mod 9, then what is 61345=P(10) congruent is equal to what is P(1) congruent. Let's put B=1:&lt;br /&gt;&lt;br /&gt;P(1) = 6 + 1 + 3 + 4 + 5 = 1 mod 9&lt;br /&gt;&lt;br /&gt;So 61345 is congruent to 1 mod 9. We notice that it is enough to add all digits in a number and divide it mod 9 to find out what the number is congruent to modulo 9.&lt;br /&gt;&lt;br /&gt;* but it is different with different n.&lt;br /&gt;&lt;br /&gt;* also thanks to that theorem we can prove incorrectness of high precision arithmetic calculations.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Proof of Lagrange theorem: &lt;/span&gt;by induction on the degree of polynomial&lt;br /&gt;p(x) = a_n*x^n + a_n-1*x^(n-1) + ... + a_1*x + a_0&lt;br /&gt;- for n = 0:&lt;br /&gt;p(x) = a_0 = a_0 mod n = p(y) mod n&lt;br /&gt;- for n = k:&lt;br /&gt;p(x) = a_k*x^k + a_k-1*x^(k-1) + ... + a_1*x + a_0&lt;br /&gt;p(y) = a_k*y^k + a_k-1*y^(k-1) + ... + a_1*y + a_0&lt;br /&gt;&lt;br /&gt;we notice that x^k+1 = y^k+1 mod n (Th3), and even that a_k+1*x^k+1 = a_k+1*y^k+1 mod n (Th2 + reflexivity). Adding these terms to both equations we get the case for n=k+1.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Partition Theorem: - ????&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;2. Group (G,+)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;1. is &lt;/span&gt;&lt;span style="font-style: italic; font-weight: bold;"&gt;closed &lt;/span&gt;&lt;span style="font-style: italic;"&gt;(x+y belongs to G)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;2. is &lt;/span&gt;&lt;span style="font-style: italic; font-weight: bold;"&gt;associative &lt;/span&gt;&lt;span style="font-style: italic;"&gt;(x+(y+z)=(x+y)+z)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;3. has additive &lt;/span&gt;&lt;span style="font-style: italic; font-weight: bold;"&gt;identity element &lt;/span&gt;&lt;span style="font-style: italic;"&gt;(x+e=x)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;4. for each element has corresponding additive &lt;/span&gt;&lt;span style="font-style: italic; font-weight: bold;"&gt;inverse element &lt;/span&gt;&lt;span style="font-style: italic;"&gt;(x+y = e = y+x)&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;* if it also has &lt;/span&gt;&lt;span style="font-style: italic; font-weight: bold;"&gt;commutivity &lt;/span&gt;&lt;span style="font-style: italic;"&gt;property (x+y=y+x), it is called an &lt;/span&gt;&lt;span style="font-style: italic; font-weight: bold;"&gt;Abelian group&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;In modulo n arithmetics the numbers 0-(n-1) are called &lt;span style="font-weight: bold;"&gt;class representatives.&lt;/span&gt; In one class there will be all numbers congruent to class representative mod n.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;3. Relations&lt;/span&gt;&lt;/span&gt;&lt;span style="font-style: italic;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Def.: relation is a subset of Cartesian product.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Congruence is in fact a relation. It is an &lt;span style="font-weight: bold;"&gt;equivalence relation&lt;/span&gt;:&lt;br /&gt;&lt;span style="font-style: italic;"&gt;1. it's symmetric&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;2. it's transitive&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;3. it's reflexive&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;4. Chinese Remainder Theorem&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: times new roman;"&gt;Given a series of n coprime integers mi such that&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: courier new;"&gt;M = /\m_i = m_1 * m_2 * ... * m_n&lt;/span&gt;&lt;span style="font-family: times new roman;"&gt;&lt;br /&gt;and an integer x such that&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: courier new;"&gt;x = r_i mod m_i&lt;/span&gt;&lt;span style="font-family: times new roman;"&gt;, for all &lt;/span&gt;&lt;span style="font-family: courier new;"&gt;1&amp;lt;=i&amp;lt;= n &lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: times new roman;"&gt;then there's only one integer y in the range &lt;/span&gt;&lt;span style="font-family: courier new;"&gt;&lt;span style="font-family: times new roman;"&gt;&lt;span style="font-family: courier new;"&gt;0&amp;lt;= x&amp;lt;M-1&lt;/span&gt;, where &lt;span style="font-family: courier new;"&gt;y = x mod m_i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Proof: &lt;/span&gt;let's assume x=r_i mod m_i and y=r_i mod m_i; then&lt;br /&gt;&lt;span style="font-family: courier new;"&gt;x=y mod m_i&lt;/span&gt;&lt;br /&gt;, and this by  definition equals&lt;br /&gt;&lt;span style="font-family: courier new;"&gt;x-y=k_i*m_i&lt;/span&gt;, for all i&lt;br /&gt;because m_i are coprime, and x-y is a divisor of both k_i and m_i, it means x-y is a divisor of M.&lt;br /&gt;x-y=kM&lt;br /&gt;the only k which makes x-y be in range 0 to M-1 is k=0:&lt;br /&gt;x-y=0 =&amp;gt; x=y&lt;br /&gt;Contradiction.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;5. Function&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Is a relation where first element of ordered pair can appear in 1 ordered pair.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Def.: Function is ordered triple of sets (X,Y,F), X-domain, Y-codomain, F-function range, where F={(x,y)|x belongs to X, y belongs to Y} and each x is the 1st element in only one pair.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;6. CRT notation&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The notation: x=(1,2,4)_(3,4,5) is equal to set of equations:&lt;br /&gt;&lt;br /&gt;x = 1 mod 3 n&lt;br /&gt;x = 2  mod 4&lt;br /&gt;x = 4 mod 5&lt;br /&gt;&lt;br /&gt;This defines x unambigiously in interval 0 to 3*4*5-1.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;7. Euclidean algorithm&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;a/b = k+r/b &amp;lt;=&amp;gt;&amp;lt;=&amp;gt;  a = b*k + r&lt;br /&gt;&lt;br /&gt;Euclidean algorithm uses the fact that gcd(a,b) = gcd(b,r). Why is that fact true?&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Proof: &lt;/span&gt;let's denote:&lt;br /&gt;(1)  gcd(a,b) = s(2)  gcd(b,r) = t&lt;br /&gt;&lt;br /&gt;a) a=l*s, as s divides a (1)&lt;br /&gt;b=w*s, as s divides b (1)&lt;br /&gt;&lt;br /&gt;If we divided a/b we would get:&lt;br /&gt;&lt;br /&gt;a = b*k + r&lt;br /&gt;=&amp;gt; l*s = k*w*s + r&lt;br /&gt;=&amp;gt; l*s - k*w*s = r&lt;br /&gt;=&amp;gt; s*(l - k*w) = r&lt;br /&gt;=&amp;gt; r is a multiple of s&lt;br /&gt;&lt;br /&gt;but gcd(b,r) = t, so s&amp;lt;=t  b) b=d*t, as t divides b (2)&lt;br /&gt;r=e*t, as t divides r (2)&lt;br /&gt;&lt;br /&gt;If we divided a/b we would get:&lt;br /&gt;&lt;br /&gt;a = b*k + r&lt;br /&gt;=&amp;gt; a = d*t*k + e*t&lt;br /&gt;=&amp;gt; t*(d*k + e) = a&lt;br /&gt;=&amp;gt; t divides a and b = &amp;gt; s&amp;gt;=t&lt;br /&gt;&lt;br /&gt;a) and b) =&amp;gt; t = s .&lt;br /&gt;&lt;br /&gt;* CRT multiplication is LINEAR with respect to number of digits of multiplied numbers!&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;8. Finding inverse in modulo n arithmetic&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;For inverse of x=1/m we want to find such y, that m*y = 1 mod n.&lt;br /&gt;&lt;br /&gt;How to do it in other way than guessing (gcd(m,n) = 1):&lt;br /&gt;&lt;br /&gt;n= k_1*m + r_1&lt;br /&gt;m = k_2*f + r_2&lt;br /&gt;f = ...&lt;br /&gt;(...)&lt;br /&gt;d = 1*z + 0&lt;br /&gt;&lt;br /&gt;then:&lt;br /&gt;r_1 = k_1*m - nr_2 = k_2*f - m&lt;br /&gt;(...)&lt;br /&gt;0 = 1*z - d&lt;br /&gt;&lt;br /&gt;ahhh, just check&amp;nbsp;&lt;a href="http://pl.wikipedia.org/wiki/Algorytm_Euklidesa#Rozszerzony_algorytm_Euklidesa"&gt;wiki&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;... until we get 1 = r*m-q*n =&amp;gt; r*x = 1 mod n =&amp;gt; r is inverse to x&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/4408819089603181445/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/madrosci-numer-jeden.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/4408819089603181445'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/4408819089603181445'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/madrosci-numer-jeden.html' title='Information Security (undergrad course)'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-8520937441580135626</id><published>2010-10-07T03:23:00.001+02:00</published><updated>2016-01-15T23:11:52.182+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Software Architecture'/><title type='text'>Software Architecture: Foundations, Theory and Practice - Chapter 2</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;These are my notes from the Chapter 2 from the book "&lt;a href="http://www.softwarearchitecturebook.com/"&gt;Software Architecture: Foundations, Theory and Practice&lt;/a&gt;".&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;Now we will see how &lt;span style="font-weight: bold;"&gt;Software Architecture &lt;/span&gt;relates to &lt;span style="font-weight: bold;"&gt;Software Engineering&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;We will reorientate these concepts away from their typical understanding. We will see that the architecture is most important.&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Every app has an &lt;span style="font-weight: bold;"&gt;architecture&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Every app has an &lt;span style="font-weight: bold;"&gt;architect&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Architecture is &lt;span style="font-weight: bold;"&gt;not a phase of development&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;Architecture is set of &lt;span style="font-weight: bold;"&gt;principal design decision&lt;/span&gt;&lt;span style="font-weight: bold;"&gt;s&lt;/span&gt; made about a system; characterization of the essence of the application.&lt;br /&gt;&lt;br /&gt;The traditional and &lt;span style="font-style: italic;"&gt;inaccurate &lt;/span&gt;interpretation is that the architecture is the product of particular phase in development, called preliminary design (or high-level design, product design) - but this term is in fact much broader.&lt;br /&gt;&lt;br /&gt;Now we will discuss the architecture in context of &lt;span style="font-weight: bold;"&gt;waterfall &lt;/span&gt;process:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;1. Requirements&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;- in theory the requirements should be isolated first, then the solution found and implemented; but in practice requirements analysis is done in quick, superficial manner, or not at all; why is that so? they explain it by tight schedules, budget constraints, ...  but the real reason might just be that &lt;span style="font-weight: bold;"&gt;requirements do not create value, products do&lt;/span&gt;; and after that the marketing people need to match the product to the needs, and even create the needs if neccessary..&lt;br /&gt;&lt;br /&gt;(...)&lt;br /&gt;&lt;br /&gt;...in some way current &lt;span style="font-weight: bold;"&gt;architectures drive the requirements&lt;/span&gt; - as we can see what have been done so far, how it works, what can be done and how; they provide a&lt;span style="font-weight: bold;"&gt; frame of reference&lt;/span&gt;, a &lt;span style="font-weight: bold;"&gt;vocabulary&lt;/span&gt;, also a &lt;span style="font-weight: bold;"&gt;base &lt;/span&gt;for improvements - to create new architectures; this works only for majority of cases, but it can happen the thing is a &lt;span style="font-weight: bold;"&gt;greenfield &lt;/span&gt;development (with no architecture predecessor), though we have to be careful and extensively search for existing solutions before assuming the problem is totally new.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;2.  Design&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Design is the phase of taking the&lt;span style="font-weight: bold;"&gt; principal design decisions&lt;/span&gt; (the most important ones are taken now, the others can be taken later), with placing emphasis on architectural concerns.&lt;br /&gt;&lt;br /&gt;(...)&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Design techniques:&lt;/span&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;OOD - Object Oriented Design&lt;/span&gt; (...); this has also limitations&lt;br /&gt;- it is not a complete design approach, i.e. it does not say anuything about many things, like security, use of commercial components&lt;br /&gt;- it tries to view everything as object (so?!)&lt;br /&gt;- it's very bound to programming language, so the programming language can start dictating what the important decisions are&lt;br /&gt;- concern for concurrency is outside OOD purview&lt;br /&gt;* UML helped to lift the discussion of OOD above the programming language &lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;DSSA - Domain Specific Software Architecture&lt;/span&gt;&lt;br /&gt;- used when prior experience and prior architectures can strongly influence new project&lt;br /&gt;- DSSA is consistent with development of product lines&lt;br /&gt;- while extracting the reusable parts very careful approach must be taken&lt;/li&gt;&lt;/ol&gt;&lt;span style="font-weight: bold;"&gt;3. Implementation&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The task is to create &lt;span style="font-weight: bold;"&gt;machine-executable source code &lt;/span&gt;that is faithful to the architecture. The important things about implementation in architecture-centric view of SE are:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the implementation activity may add to or &lt;span style="font-weight: bold;"&gt;modify &lt;/span&gt;the architecture&lt;/li&gt;&lt;li&gt;architecture &lt;span style="font-weight: bold;"&gt;does not &lt;/span&gt;have to be completed &lt;span style="font-weight: bold;"&gt;before &lt;/span&gt;implementation begins - the only constraint is to keep the code consistent with the recorded architecture&lt;/li&gt;&lt;/ul&gt;What is &lt;span style="font-weight: bold;"&gt;faithful implementation&lt;/span&gt;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;all structural &lt;span style="font-weight: bold;"&gt;elements &lt;/span&gt;in &lt;span style="font-weight: bold;"&gt;architecture &lt;/span&gt;are found in &lt;span style="font-weight: bold;"&gt;source code &lt;/span&gt;and vice versa&lt;/li&gt;&lt;li&gt;the source code cannot contain &lt;span style="font-weight: bold;"&gt;connections &lt;/span&gt;not present in the architecture&lt;/li&gt;&lt;/ul&gt;&lt;span style="font-weight: bold;"&gt;Techniques &lt;/span&gt;for assisting in faithful development from the design:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;generation technologies&lt;/span&gt;&lt;br /&gt;- if only available, is the best, as it &lt;span style="font-weight: bold;"&gt;ensures consistency &lt;/span&gt;between the architecture and the implementation; an example is parser generators&lt;br /&gt;- this is only feasible in domains which are thoroughly understood and bounded&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;frameworks&lt;/span&gt;&lt;br /&gt;- used when there's no generation available&lt;br /&gt;- acts as a &lt;span style="font-weight: bold;"&gt;bridge &lt;/span&gt;between desired architecture style and implementation&lt;br /&gt;- framework selection is a part of architecture-based system implementation; if there's no suitable framework, start from creating one by yourself&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;middleware&lt;/span&gt;&lt;br /&gt;- it's software supporting &lt;span style="font-weight: bold;"&gt;communication &lt;/span&gt;between software components; it corresponds to the connectors&lt;br /&gt;- e.g. CORBA, RPC&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;reuse&lt;/span&gt;&lt;br /&gt;- it is ideal case when certain old component perfectly matches desired architecture; but in reality we need to make &lt;span style="font-weight: bold;"&gt;choices&lt;/span&gt;, depending to what extend it dismatches; we can &lt;span style="font-weight: bold;"&gt;encapsulate &lt;/span&gt;old component in new one, exposing only desired functionalities; we can &lt;span style="font-weight: bold;"&gt;change the architecture &lt;/span&gt;concept to match including the old component; or just give up on reuse and write the component from scratch&lt;/li&gt;&lt;/ul&gt;When none of the assisting techniques are available for some reason, the whole software must be implemented manually - but we need to watch out not to make the real software architecure not consistent with the documented one; If we do not, then we can:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;not be able to reason about &lt;span style="font-weight: bold;"&gt;implemented application architecture&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;mislead &lt;/span&gt;all stakeholders&lt;/li&gt;&lt;li&gt;doom any further &lt;span style="font-weight: bold;"&gt;development based on the documented architecure &lt;/span&gt;to failure&lt;/li&gt;&lt;/ul&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-size: 100%;"&gt;4. Analysis and testing&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;It is an activity taken in order to asses the quality of an artifact. In traditional waterfall model the code is &lt;span style="font-weight: bold;"&gt;first &lt;/span&gt;written and then tested; however, testing &lt;span style="font-weight: bold;"&gt;does not have to &lt;/span&gt;happen after implementation, it can be &lt;span style="font-weight: bold;"&gt;integrated &lt;/span&gt;into development process; as the earlier the errors are discovered the lower cost of correcting them;&lt;br /&gt;&lt;br /&gt;Architecture-cenetered approach offers the opportunity for &lt;span style="font-weight: bold;"&gt;early analysis&lt;/span&gt;; we can test not only &lt;span style="font-weight: bold;"&gt;functionality &lt;/span&gt;but also &lt;span style="font-weight: bold;"&gt;properties&lt;/span&gt;; what exactly can we test about architecture model:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;consistency&lt;/span&gt;, &lt;span style="font-weight: bold;"&gt;correctness&lt;/span&gt;, &lt;span style="font-weight: bold;"&gt;exhibition of desired non functional properties&lt;/span&gt;,&lt;span style="font-weight: bold;"&gt; &lt;/span&gt;and&lt;span style="font-weight: bold;"&gt; internal consistency &lt;/span&gt;(e.g. by &lt;span style="font-weight: bold;"&gt;dataflow analysis &lt;/span&gt;on the architecture)&lt;/li&gt;&lt;li&gt;consistency with requirements&lt;/li&gt;&lt;li&gt;we can &lt;span style="font-weight: bold;"&gt;base &lt;/span&gt;our choice for &lt;span style="font-weight: bold;"&gt;source code testing and analysis&lt;/span&gt; methods based on the architecture model; architecture can also provide guidance and economies in development of &lt;span style="font-weight: bold;"&gt;test harnesses&lt;/span&gt; (automated test frameworks); (...)&lt;/li&gt;&lt;li&gt;it can help in detecting &lt;span style="font-weight: bold;"&gt;inconsistency &lt;/span&gt;between architecture model and the model derived from implemented code&lt;/li&gt;&lt;/ol&gt;It all is to asses and improve the quality of systems.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 100%;"&gt;&lt;span style="font-weight: bold;"&gt;5. Evolution (maintenance)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This is all the activities that chronologically follow the release of an application, for example &lt;span style="font-weight: bold;"&gt;bug fixing&lt;/span&gt;, major &lt;span style="font-weight: bold;"&gt;additions &lt;/span&gt;of new functionality, creation of &lt;span style="font-weight: bold;"&gt;specialized versions &lt;/span&gt;of the application;&lt;br /&gt;&lt;br /&gt;The thing is: whenever a change is required, we should &lt;span style="font-weight: bold;"&gt;go back &lt;/span&gt;to the phase where the issue is considered in - for example if we need new functionality, we should go back to the requirements phase - and then &lt;span style="font-weight: bold;"&gt;moving forward in sequence &lt;/span&gt;from there. But, in practice usually only the coding phase is revisited, as this is the easiest solution - but this results in &lt;span style="font-weight: bold;"&gt;degradation &lt;/span&gt;of application's &lt;span style="font-weight: bold;"&gt;quality&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;What does the architecture-centric approach to software development offer here:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;before we change anything, we need to have &lt;span style="font-weight: bold;"&gt;deep understanding&lt;/span&gt;, do analysis of the problem and proposed change, etc; therefore,&lt;br /&gt;- if we have a clear architecture and its faithful implementation then it is easier to do it&lt;br /&gt;- if we don't have any clear architecture specified, or the code is inconsistent with the specified one, we need to do &lt;span style="font-weight: bold;"&gt;reenginering &lt;/span&gt;first (code=&amp;gt;requirements=&amp;gt;architecture design=&amp;gt;new code) - which is tough, costly and time-consuming&lt;/li&gt;&lt;li&gt;after the analysis, we come up with different solutions to the problem and choose the best one; &lt;span style="font-weight: bold;"&gt;before &lt;/span&gt;making any changes to code we need to &lt;span style="font-weight: bold;"&gt;modify the architecture model &lt;/span&gt;(not the oppposite!) - to keep them &lt;span style="font-weight: bold;"&gt;consistent&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;Processes&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Software Architecture is not a phase of software development.&lt;br /&gt;&lt;br /&gt;(...)&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;Turbine Visualisation of Software Development&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This model is to highlight the central role of software architecture. The &lt;span style="font-weight: bold;"&gt;axis of the core is time &lt;/span&gt;and the core itself represents the &lt;span style="font-weight: bold;"&gt;product&lt;/span&gt;. The &lt;span style="font-weight: bold;"&gt;rings &lt;/span&gt;around the core represent the &lt;span style="font-weight: bold;"&gt;development phases and effort&lt;/span&gt;. The ring's &lt;span style="font-weight: bold;"&gt;height &lt;/span&gt;stands for the &lt;span style="font-weight: bold;"&gt;time &lt;/span&gt;spent for that phase, and the ring's &lt;span style="font-weight: bold;"&gt;volume &lt;/span&gt;is for &lt;span style="font-weight: bold;"&gt;investment &lt;/span&gt;made during that ring.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;we can represent the particular stage of development by showing a &lt;span style="font-weight: bold;"&gt;cross-section &lt;/span&gt;of the turbine - then in the core we can place the already existing elements of the software (e.g. reaquirements, design document)&lt;/li&gt;&lt;li&gt;we can have the core &lt;span style="font-weight: bold;"&gt;already having some thickness &lt;/span&gt;at the beginning - that means we already have some knowledge and resources carried forward from previous projects&lt;/li&gt;&lt;li&gt;one ring can be composed of &lt;span style="font-weight: bold;"&gt;several parts &lt;/span&gt;when cross-sectioned&lt;/li&gt;&lt;/ul&gt;* Agile development does not in fact produce any particular architecture; therefore it is hard to resuse or maintain such software;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;Tween Peaks Model&lt;/span&gt;&lt;/span&gt; (Nuseibeh, 2001)&lt;br /&gt;&lt;br /&gt;(this model is two pyramides, the one on the left is Requirements, and on the right is Architecture, and the more down the more in detail it is, and the development goes from up to the bottom, going from one pyramid to the other, and back..)&lt;br /&gt;&lt;ul&gt;&lt;li&gt;it emphasizes the co-development of requirements and architecture, incrementally elaborating details&lt;/li&gt;&lt;li&gt;it represents recent work in requirements engineering&lt;/li&gt;&lt;/ul&gt;* Brook's law: "&lt;span style="font-style: italic;"&gt;Adding people to late software makes it late&lt;/span&gt;" - and architecture-centric approach helps to reduce that problem! (a little..;))&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: 130%;"&gt;&lt;span style="font-weight: bold;"&gt;A sum up&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The success of a software is &lt;span style="font-weight: bold;"&gt;highly correlated &lt;/span&gt;to &lt;span style="font-weight: bold;"&gt;good architecture&lt;/span&gt;. Although many companies tend to focus on the software development &lt;span style="font-weight: bold;"&gt;process &lt;/span&gt;itself, and on improving it - the primary focus should be the &lt;span style="font-weight: bold;"&gt;architecture&lt;/span&gt;, not the process, as the architecture it the thing that generates the &lt;span style="font-weight: bold;"&gt;revenue &lt;/span&gt;(dochód) for a company.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/8520937441580135626/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/software-architecture-foundations_06.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/8520937441580135626'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/8520937441580135626'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/software-architecture-foundations_06.html' title='Software Architecture: Foundations, Theory and Practice - Chapter 2'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-1685287119912494117</id><published>2010-10-06T00:13:00.000+02:00</published><updated>2016-01-15T23:11:27.197+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Software Architecture'/><title type='text'>Software Architecture: Foundations, Theory and Practice - Chapter 1</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;These are my notes from the Chapter 1 from the book "&lt;a href="http://www.softwarearchitecturebook.com/"&gt;Software Architecture: Foundations, Theory and Practice&lt;/a&gt;".&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;1.1 The power of analogy: the architecture of buildings&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;* architecture = design and construction of buildings&lt;br /&gt;The analogy between design and construction of buildings and d. and c. of software is strong, and textbooks typically use it as example.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table style="height: 193px; width: 644px;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="font-weight: bold;"&gt;building&lt;/td&gt;&lt;td style="font-weight: bold;"&gt;software&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1. collecting requirements&lt;/td&gt;&lt;td&gt;1. specifying requirements&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2. creating design to satisfy requirements&lt;/td&gt;&lt;td&gt;2. creating high-level design&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3. refine design to create blueprints&lt;/td&gt;&lt;td&gt;3. developing detailed algorithms based on this design&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4. construction based on blueprints&lt;/td&gt;&lt;td&gt;4. implementing algorithms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5. building is occupied and used&lt;/td&gt;&lt;td&gt;5. deploying and using the system&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;What is similar: the focus is the &lt;span style="font-weight: bold;"&gt;satisfaction &lt;/span&gt;of future occupant's needs; allows for &lt;span style="font-weight: bold;"&gt;specialization &lt;/span&gt;of labour (designer is different from contractor); it has many &lt;span style="font-weight: bold;"&gt;intermediate&lt;/span&gt; points;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Deeper insights:&lt;/span&gt;&lt;br /&gt;- architecture is separate from, but &lt;span style="font-weight: bold;"&gt;linked &lt;/span&gt;to, physical structure (building/software); two architectures can be compared, described, discussed&lt;br /&gt;- properties of structures are &lt;span style="font-weight: bold;"&gt;induced by &lt;/span&gt;the design of their architectures (eg. medieval castle)&lt;br /&gt;- recognition of the distinctive role and character of an &lt;span style="font-weight: bold;"&gt;architect&lt;/span&gt;&lt;br /&gt;- &lt;span style="font-weight: bold;"&gt;architecture &lt;/span&gt;is more central focus than the process, process just serves&lt;br /&gt;- architecture has matured over the years into a &lt;span style="font-weight: bold;"&gt;discipline&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Architectural styles&lt;/span&gt; are captured from experience and lessions from previous generations of architects.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;Limitations of the analogy:&lt;/span&gt;&lt;br /&gt;- we have good &lt;span style="font-weight: bold;"&gt;intuition &lt;/span&gt;for how buildings should be designed, but not for software&lt;br /&gt;- it's harder to see the software architecture (software is &lt;span style="font-weight: bold;"&gt;intangible&lt;/span&gt;, abstract nature), so it's harder to evaluate&lt;br /&gt;- software is more &lt;span style="font-weight: bold;"&gt;malleable &lt;/span&gt;(plastyczny, kowalny) than building materials, so buildings is not a good source to learn about ideas for dealing with change&lt;br /&gt;- there's &lt;span style="font-weight: bold;"&gt;building industry&lt;/span&gt;, but no really such thing for software&lt;br /&gt;- same software can be deployed &lt;span style="font-weight: bold;"&gt;in many places&lt;/span&gt;, buildings not really&lt;br /&gt;- software is a machine, building's not (software's &lt;span style="font-weight: bold;"&gt;dynamic&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;1.2 Architecture of the Web&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Everyone knows &lt;span style="font-weight: bold;"&gt;WWW&lt;/span&gt;, but how is it actually built?&lt;br /&gt;&lt;ul&gt;&lt;li&gt;from user's point of view: dynamic set of relationships among collections of information&lt;br /&gt;--&amp;gt; so it is: &lt;span style="font-weight: bold;"&gt;internet browser&lt;/span&gt; + &lt;span style="font-weight: bold;"&gt;set of documents&lt;/span&gt;&lt;/li&gt;&lt;li&gt;from another point of view: dynamic collection of machines all over the world, which interact across computer networks&lt;br /&gt;--&amp;gt; so it is: &lt;span style="font-weight: bold;"&gt;physical machines&lt;/span&gt; (clients and servers)&lt;/li&gt;&lt;li&gt;from developer's point of view: collection of independently written programs that interact according to HTTP, URI, MIME and HTML standard rules&lt;br /&gt;--&amp;gt; so it is:&lt;span style="font-weight: bold;"&gt; physical machines&lt;/span&gt; (clients and servers) + &lt;span style="font-weight: bold;"&gt;documents &lt;/span&gt;+ &lt;span style="font-weight: bold;"&gt;interactions&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;but still there's much more to it.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;&amp;lt;&amp;lt;and then there comes a set of &lt;span style="font-weight: bold;"&gt;7 rules&lt;/span&gt; (constraints) which are supposed to clearly define what www is&amp;gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;&amp;lt;&amp;lt;and it is also said that these rules are the &lt;span style="font-weight: bold;"&gt;architectural style&lt;/span&gt; of the www&amp;gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;(...)&lt;br /&gt;&lt;br /&gt;The following&lt;span style="font-weight: bold;"&gt; observations are important:&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the architecture of the Web is &lt;span style="font-weight: bold;"&gt;separated &lt;/span&gt;from the code that implements its elements; to understand the Web, the architecture is the only effective reference point!&lt;/li&gt;&lt;li&gt;there's&lt;span style="font-weight: bold;"&gt; no single piece of code&lt;/span&gt; that implements the Web's architecture! instead we have it implemented by servers, browsers, proxies, routers, and network infrastructure;&lt;/li&gt;&lt;li&gt;there are pieces of code that are &lt;span style="font-weight: bold;"&gt;equivalent &lt;/span&gt;in view of the architecture, but implemented in totally different ways, e.g. web browsers&lt;/li&gt;&lt;li&gt;the constraints defining the Web are&lt;span style="font-weight: bold;"&gt; not apparent&lt;/span&gt; in the code, but still are visible by all the components (nicht verstehen)&lt;/li&gt;&lt;/ul&gt;--&amp;gt; &lt;span style="font-weight: bold;"&gt;Why &lt;/span&gt;this architecture is good for Web (why it was chosen and why did it make the Web become so popular)? We'll see in Chapter 11, but for now it is important that it was the focus on architecture which made it.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Sum up: Architecture is critical enabler for development of complex systems.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;1.3 Architecture on the desktop&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;the following command in Linux:&lt;br /&gt;&lt;blockquote&gt;&lt;span style="font-family: courier new;"&gt;ls invoices | grep -e August | sort&lt;/span&gt;&lt;/blockquote&gt;gives sorted list of all files in invoices directory whose names include string August =&amp;gt; to understand how it works you need to understand filters and pipes&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;&amp;lt;&amp;lt;and then there follows the explanation of &lt;span style="font-weight: bold;"&gt;filters and pipes&lt;/span&gt;, and Linux commands&amp;gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;(...)&lt;br /&gt;&lt;br /&gt;The architectural style, called &lt;span style="font-weight: bold;"&gt;pipe&amp;amp;filter&lt;/span&gt;, can be used in many applications then.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Sum up: Architectural concepts can make effective the development of applications, and help in reuse (in that case reuse of the Unix filters).&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;1.4 Productivity and product lines&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;(...)&lt;br /&gt;&lt;br /&gt;The challenge for the manufacturer is to produce wide range of product which consumers demands, simultaneously exploiting /wykorzystywać/ commonalities among members of the product family (reusing). Reusing is good because it makes it 1. &lt;span style="font-weight: bold;"&gt;easier &lt;/span&gt;and 2. more &lt;span style="font-weight: bold;"&gt;reliable&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;A problem and the solution which solves it because of focus on architecture (using &lt;span style="font-weight: bold;"&gt;product families&lt;/span&gt;):&lt;br /&gt;&lt;br /&gt;Problem: Philips TV sets would become more and more expensive because of quickly advancing technology (hardware) and software capabilities.&lt;br /&gt;&lt;br /&gt;Solution: they produced a steady stream of various products, containing /zatrzymywać/ their cost -&amp;gt; they formulated a &lt;span style="font-weight: bold;"&gt;product family&lt;/span&gt;. The types varied along&lt;span style="font-weight: bold;"&gt; three dimensions&lt;/span&gt;: price, output device, and geographical region. The main issues to address were &lt;span style="font-style: italic; font-weight: bold;"&gt;commonality&lt;/span&gt;&lt;span style="font-weight: bold;"&gt; &lt;/span&gt;and &lt;span style="font-style: italic; font-weight: bold;"&gt;variability&lt;/span&gt;&lt;span style="font-weight: bold;"&gt; &lt;/span&gt;of the products.&lt;br /&gt;&lt;br /&gt;(...)&lt;br /&gt;&lt;br /&gt;&lt;span style="font-style: italic;"&gt;Sum up: Architectures are critical enablers for developing&lt;span style="font-weight: bold;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style="font-style: italic; font-weight: bold;"&gt;product families&lt;/span&gt;&lt;span style="font-style: italic;"&gt;, a key element of many business strategies.&lt;/span&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/1685287119912494117/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/software-architecture-foundations.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1685287119912494117'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/1685287119912494117'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/software-architecture-foundations.html' title='Software Architecture: Foundations, Theory and Practice - Chapter 1'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-7827414982591217591</id><published>2010-10-04T17:17:00.000+02:00</published><updated>2016-01-15T23:12:31.061+01:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='MVC'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Software Architecture'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Patterns'/><title type='text'>MVC - corrections to my exercise</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;MVC - Model View Controller&lt;br /&gt;&lt;ul&gt;&lt;li&gt;!! The model is responsible for all the &lt;span style="font-weight: bold;"&gt;logic&lt;/span&gt;.&lt;/li&gt;&lt;li&gt;Controller is responsible for user input, e.g. checking for &lt;span style="font-weight: bold;"&gt;syntax error&lt;/span&gt;;&lt;br /&gt;Model  is responsible for the logic, also checking &lt;span style="font-weight: bold;"&gt;logic errors&lt;/span&gt; in the input;&lt;br /&gt;!! But it is controller who makes sure the user is displayed error message;&lt;/li&gt;&lt;li&gt;The model has to communicate with view: it can be  done either by:&lt;br /&gt;- sending data encapsulated in an object - but then please do not include any logic in the object, it is just for data sending (as the view will have the access to all object's methods);&lt;br /&gt;- by defining some other &lt;span style="font-weight: bold;"&gt;protocol &lt;/span&gt;defined, like sending just pure data (better);&lt;/li&gt;&lt;li&gt;The Model does not send the data to View - it puts the data 'somewhere', and &lt;span style="font-weight: bold;"&gt;notifies &lt;/span&gt;all views whenever its data has been changed; the views know where to get the data from; this is because we may have many views and just one model, it is not a good idea to send the data to all views each time;&lt;/li&gt;&lt;/ul&gt;In the undergraduate course they're learning the design patterns, and how to write down an application's architecture, how to do &lt;span style="font-weight: bold;"&gt;reverse engineering&lt;/span&gt;, how to implement a pattern or recognize what is the architecture type; but in the graduate course you will also learn &lt;span style="font-weight: bold;"&gt;how do you know whether an architecture is good or bad&lt;/span&gt;, or &lt;span style="font-weight: bold;"&gt;which one is better&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;In Taks 4, when asked if now you would come up with different architecture for the your certain old application and why, you should think of if you're able to &lt;span style="font-weight: bold;"&gt;improve the quality&lt;/span&gt; by changing the architecture; by improving quality I mean improving one of the 6 quality components, which were &lt;span style="font-weight: bold;"&gt;modifiability&lt;/span&gt;, security, etc.&lt;br /&gt;&lt;br /&gt;This is how you could initialize an MVC application:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;public static void main(String[] args) throws IOException{&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;PhoneBookModel model = new PhoneBookModel();&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;PhoneBookView view = new PhoneBookView(model);&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;public PhoneBookView(PhoneBookModel model) {&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;this.model = model;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;model.attach(this);&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;this.controller = new PhoneBookController(model, this);&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp;controller.startApp();&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;}&lt;/span&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/7827414982591217591/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/10/konsultacje-dot-assignment-1.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/7827414982591217591'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/7827414982591217591'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/10/konsultacje-dot-assignment-1.html' title='MVC - corrections to my exercise'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-3665568056373040103</id><published>2010-09-29T07:37:00.000+02:00</published><updated>2016-01-15T23:12:03.773+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Software Architecture'/><title type='text'>Software Architecture: Perspective on an Emerging Discipline - Chapter 1</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;i&gt;These are notes from the Chapter 1 from the book "&lt;a href="https://books.google.de/books?id=5KlQAAAAMAAJ"&gt;Software        Architecture: Perspective on an Emerging Discipline", by Mary Shaw        and David &lt;span class="SpellE"&gt;Garlan&lt;/span&gt;, Prentice Hall, 1996&lt;/a&gt;.&lt;/i&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Software Architecture becomes most important part in Software Engineering;&lt;br /&gt;What is Software Architecure? It is not the same as design. We could say it 'high level design', but it is also still not the same. Software Architecture is &lt;span style="font-weight: bold;"&gt;components + interactions&lt;/span&gt;, but also design &lt;span style="font-weight: bold;"&gt;decisions&lt;/span&gt;, the decisions why such design gives better quality than the other;&lt;/li&gt;&lt;li&gt;It is not &lt;span style="font-weight: bold;"&gt;functionality &lt;/span&gt;that is important, but the &lt;span style="font-weight: bold;"&gt;quality&lt;/span&gt;; this is because we want to&lt;br /&gt;- to deal with complexity and ease debugging&lt;br /&gt;- to support reuse&lt;br /&gt;- ...&lt;/li&gt;&lt;li&gt;&lt;span style="font-weight: bold;"&gt;Software Engineering&lt;/span&gt;, in turn, is a &lt;span style="font-weight: bold;"&gt;routine&lt;/span&gt; (which means a repeatative process); Software Architecture is one of the artifacts produced by Software Engineering; another artifact can be the code itself; Software Engineering deals with the following things:&lt;br /&gt;- solving a customer's problem&lt;br /&gt;- with certain resource limit (e.g. the money)&lt;br /&gt;- by applying a systematic approach (repeatable process)&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;* the routine is for &lt;span style="font-weight: bold;"&gt;cotrolling the workers &lt;/span&gt;who just want to do the work and go home; having only scientists and PhDs would be ideal case but not real life;&lt;br /&gt;* proper architecture gives &lt;span style="font-weight: bold;"&gt;80% chance &lt;/span&gt;that the program will succeed&lt;br /&gt;* &lt;span style="font-weight: bold;"&gt;folklore &lt;/span&gt;- when people tell their colleagues about some way of doing something, and it spreads in this informal way&lt;br /&gt;* there was an attempt to introduce &lt;span style="font-weight: bold;"&gt;licenses for Software Engineers&lt;/span&gt; but it didn't succeed as people didn't take it seriously - no one really trusts software&lt;br /&gt;* for example in &lt;span style="font-weight: bold;"&gt;NASA &lt;/span&gt;they have &lt;span style="font-weight: bold;"&gt;voting system&lt;/span&gt;, i.e. 3-5 computers run exactly the same program simultaneously&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://learningmonik.blogspot.com/feeds/3665568056373040103/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://learningmonik.blogspot.com/2010/09/grad-lab-1.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/3665568056373040103'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/posts/default/3665568056373040103'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2010/09/grad-lab-1.html' title='Software Architecture: Perspective on an Emerging Discipline - Chapter 1'/><author><name>Monik</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-8926235884385754301</id><published>2011-03-17T09:55:43.859+01:00</published><updated>2011-03-17T09:55:43.859+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>odnosnie tego drugiego artykulu: &amp;quot;We  assume ...</title><content type='html'>odnosnie tego drugiego artykulu: &amp;quot;We  assume  that  the  domain  ontology  used  for  the purpose of text categorization has a rich instance base of interconnected entities (with proper labels) that can be  used  for  spotting  them  in  the  analyzed  text.&amp;quot; - no wlasnie</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/4510504667282549968/comments/default/8926235884385754301'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/4510504667282549968/comments/default/8926235884385754301'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2011/03/ontology-based-tyext-classification.html?showComment=1300352143859#c8926235884385754301' title=''/><author><name>Monik</name><uri>https://www.blogger.com/profile/10906799230058879679</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><gd:extendedProperty name='blogger.itemClass' value='pid-2050908768'/><gd:extendedProperty name='blogger.displayTime' value='3/17/2011 9:55 AM'/></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-2370970305562025689</id><published>2011-03-17T09:58:41.373+01:00</published><updated>2011-03-17T09:58:41.373+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;quot;The entities are classified according to a t...</title><content type='html'>&amp;quot;The entities are classified according to a taxonomy that will be used for categorization purposes.&amp;quot; - czyli kazdej klasie w A-boxie odpowiada zbior termow, zgadza sie (tutaj tego nie napisali wprost ale tak to rozumialam)&lt;br /&gt;&lt;br /&gt;&amp;quot;The target classification categories are defined as a taxonomy sub-hierarchy,  list  of  related  classes  or  mix  of  both  the above.&amp;quot;&lt;br /&gt;- tez, nie napisali wprost tutaj, ale tak to rozumialam&lt;br /&gt;&lt;br /&gt;&amp;quot;We also assume that the analyzed text is related to the knowledge domain represented in the ontology.&amp;quot; - moze dlatego klasyfikacja tutaj byla w 2 krokach; bo jakby bylo za daleko to drugi krok by nas w pole mogl wyprowadzic (jak z metoda siecznych czy jakos tak..)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/4510504667282549968/comments/default/2370970305562025689'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/4510504667282549968/comments/default/2370970305562025689'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2011/03/ontology-based-tyext-classification.html?showComment=1300352321373#c2370970305562025689' title=''/><author><name>Monik</name><uri>https://www.blogger.com/profile/10906799230058879679</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><gd:extendedProperty name='blogger.itemClass' value='pid-2050908768'/><gd:extendedProperty name='blogger.displayTime' value='3/17/2011 9:58 AM'/></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-6631768086762148016</id><published>2011-03-17T10:00:25.908+01:00</published><updated>2011-03-17T10:00:25.908+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>... lololoj, ten drugi artykul opisuje wszystko in...</title><content type='html'>... lololoj, ten drugi artykul opisuje wszystko in detail. Warto potem poczytac ;)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/4510504667282549968/comments/default/6631768086762148016'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/4510504667282549968/comments/default/6631768086762148016'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2011/03/ontology-based-tyext-classification.html?showComment=1300352425908#c6631768086762148016' title=''/><author><name>Monik</name><uri>https://www.blogger.com/profile/10906799230058879679</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><gd:extendedProperty name='blogger.itemClass' value='pid-2050908768'/><gd:extendedProperty name='blogger.displayTime' value='3/17/2011 10:00 AM'/></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-8654055003382767385</id><published>2011-12-13T20:11:03.294+01:00</published><updated>2011-12-13T20:11:03.294+01:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Dobra, chyba juz rozumiem. To jest calkiem co inne...</title><content type='html'>Dobra, chyba juz rozumiem. To jest calkiem co innego. Z tym ze wybor I zalezy od wyboru II. Czyli mozemy przeprowadzic MLE tylko jesli zrobilismy TF albo ITF na tekscie, a to drugie jesli bylo 0/1. teoretycznie mozna 0/1 potraktowac MLEm, ale tak sie nie robi. choc chyba ktos robil i sie okazalo ze byly lepsze wyniki niz TF i ITF&lt;br /&gt;&lt;br /&gt;MUSZE SPROBOWAC! :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/1984962371538355721/comments/default/8654055003382767385'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/1984962371538355721/comments/default/8654055003382767385'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2011/12/jak-sie-ma-mle-maximum-likelihood.html?showComment=1323803463294#c8654055003382767385' title=''/><author><name>Monik</name><uri>https://www.blogger.com/profile/10906799230058879679</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='//img2.blogblog.com/img/b16-rounded.gif'/></author><gd:extendedProperty name='blogger.itemClass' value='pid-2050908768'/><gd:extendedProperty name='blogger.displayTime' value='12/13/2011 8:11 PM'/></entry><entry><id>tag:blogger.com,1999:blog-5940427300271272994.post-5375143736429191169</id><published>2015-08-27T12:45:32.567+02:00</published><updated>2015-08-27T12:45:32.567+02:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>thanks, it&amp;#39;s useful!</title><content type='html'>thanks, it&amp;#39;s useful!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/2952638391175076611/comments/default/5375143736429191169'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5940427300271272994/2952638391175076611/comments/default/5375143736429191169'/><link rel='alternate' type='text/html' href='http://learningmonik.blogspot.com/2015/01/nodejs-code-school.html?showComment=1440672332567#c5375143736429191169' title=''/><author><name>Minh Trí Phạm</name><uri>https://www.blogger.com/profile/07151324231714631011</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-Fj9A8sKxwHc/AAAAAAAAAAI/AAAAAAAAAEY/65Yrm_xqdRI/s32-c/photo.jpg'/></author><thr:in-reply-to href='http://learningmonik.blogspot.com/2015/01/nodejs-code-school.html' ref='tag:blogger.com,1999:blog-5940427300271272994.post-2952638391175076611' source='https://www.blogger.com/feeds/5940427300271272994/posts/default/2952638391175076611' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1529608466'/><gd:extendedProperty name='blogger.displayTime' value='8/27/2015 12:45 PM'/></entry></feed>